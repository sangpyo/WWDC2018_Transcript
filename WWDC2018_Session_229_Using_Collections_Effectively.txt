좋은 아침.
 내 이름은 Michael LeHew이고 Apple의 재단 팀 소장품을 작업했습니다.
 그리고 오늘 스위프트에서 컬렉션을 최대한 효율적으로 사용하기 위해 알아야 할 구체적인 사항에 대해 이야기하고자합니다.
 스위프트에서 사용할 수있는 세부 정보 및 컬렉션의 모든 측면에 대해 오늘 많은 영역을 다루겠습니다.
 일반적인 함정과 성능 문제를 피할 수있는 방법에 대해 알아보고 특정 컬렉션을 사용할시기를 결정할 때 매우 구체적인 조언을 제공 할 것입니다.
 시작하겠습니다.
 나는 당신이 세계, 컬렉션이없는 세계를 상상해 보시기 바랍니다.
 그리고이 세상에는 배열이 없을 수도 있지만 여전히 곰이 있습니다. 그러나 다른 곰이 필요할 때마다 또 다른 변수를 정의해야 할 것이며, 우리는 이러한 곰으로 일을하고 싶습니다.
 우리는 스스로를 반복 할 필요가 있습니다.
 꽤 무서운, 그렇지? 그것은 더 나 빠지게된다.
 이 세상도 사전을 가지고 있지는 않지만 고맙게도 영리한 개발자가되어 우리는 우리가 신경 쓰고있는 각각의 경우를 고심하게 정의하는 함수로이를 해결할 수 있습니다.이 함수를 사용하는 것은 사전을 사용하는 것과 매우 유사합니다. 우리가 필요로하는 역동적 인 능력.
 하지만 누가 가변적 인 국가를 좋아 하죠? 다행스럽게도 우리에게는이 세상에 살지 않습니다.
 고맙게도 우리 세계는 곰과 컬렉션을 정의하는 풍부한 일류 구문을 가지고 있습니다.
 저장할 수있는 요소를 반복하거나 검색 할 때 반복하지 않는 데 도움이되는 API입니다.
 컬렉션은 널리 보급되어 있으며 Swift에서 모두 공통 프로토콜을 준수하는 많은 공통 기능과 알고리즘을 공유합니다.
 놀랍지 않게 컬렉션이라고합니다.
 그리고 Swift에서 컬렉션은 요소가 여러 번 비파괴 적으로 통과 할 수 있고 요소가 아래 첨자를 통해 액세스 될 수있는 시퀀스입니다.
 컬렉션의 추상 표현을 고려하면서 어떻게하는지 살펴 보겠습니다.
 이것은 메모리, 해시 테이블, 빨강 검정 트리, 링크 목록 또는 상상할 수있는 다른 요소에 연속적으로 정의 된 배열 일 수 있습니다.
 중요한 것은 시작 인덱스라는 초기 인덱스의 개념을 지원한다는 것입니다.
 컬렉션의 초기 요소에 액세스하는 데 사용할 수 있습니다.
 컬렉션의 끝을 식별하는 끝 인덱스가 있고 컬렉션은 시작 인덱스에서 끝 인덱스까지 반복하는 기능을 지원합니다.
 그들은이 작업을 여러 번 할 수 있으며 컬렉션 자체에서 요소를 검색하는 하위 스크립트도 지원합니다.
 이것이 코드에서 어떻게 보이는지 봅시다.
 사실 컬렉션의 정의를 살펴보면 일련의 요소로 선언됩니다.
 또한 index와 같은 추가 유형이 있으며 이는 비교 가능해야합니다.
 요소를 검색하거나 색인을 사용하기위한 첨자를 제공하며 컬렉션의 범위를 식별하는 시작 및 끝 인덱스를 정의합니다.
 마지막으로 index after라는 함수가 있습니다. 하나의 인덱스에서 다른 인덱스로 이동할 수 있습니다.
 그리고이 마지막 함수는 매우 중요합니다. 왜냐하면 표준 라이브러리가 놀라운 프로토콜 확장 기능으로 많은 유용하고 강력한 기본 동작을 정의 할 수 있기 때문입니다.
 이들 중 일부를 살펴 보겠습니다.
 컬렉션을 준수하면 첫 번째 요소와 마지막 요소를 가져 오거나 카운트를 식별하거나 컬렉션이 비어 있는지 확인하는 속성을 사용하여 놀라운 기능 범위에 액세스 할 수 있습니다.
 또한 4N 구문을 사용하여 Collection을 반복 할 수있는 API를 얻을 수 있습니다.
 지도, 필터 및 축소와 같은 유용한 기능이 있습니다.
 이제 우리 고유의 확장 기능을 추가하여 Collection을 더욱 강력하게 만들어 보겠습니다.
 Collection은 이미 모든 요소를 ​​반복하는 방법을 제공하지만 다른 모든 요소를 ​​반복하면서 일부 값을 건너 뛰고 Collection에 확장을 추가하여이 작업을 수행하는 함수가 필요합니다.
 메소드의 시그니처부터 살펴 보겠습니다.
 우리는 서로의 기능을 서로 호출 할 것이며, 우리가 신경 쓰는 각 요소를 호출 할 수있는 폐쇄를 취할 것입니다.
 우리는 반복의 경계를 잡을 것이고, 시작할 때 시작될 다른 변수를 찾을 것입니다. 우리가 갈수록 변이 될 것입니다.
 현재 요소에 대한 클로저를 호출하고 현재 인덱스를 다음 요소로 넘깁니다.
 그리고 우리는 현재 색인을 무효화했을 것입니다. 컬렉션의 끝 부분에 도달했을 수 있으므로, 그렇게했는지 확인해야합니다. 그렇게했다면 색인을 한 번 더 올릴 수 있으므로 모든 것을 건너 뛸 수 있습니다. 다른 요소.
 그리고 우리가 이것을 호출하면, 이것을 1에서 10까지의 가까운 범위에서 호출하면 짝수 번째 요소를 건너 뛰는 것을 볼 수 있습니다.
 그래서 콜렉션은 우리가 정말로 강력한 행동을 설명 할 수있게 해줍니다.하지만 콜렉션은 혼자가 아닙니다.
 사실, 콜렉션 만 우리가 가지고있는 프로토콜이 아닙니다.
 Swift에서 수집 프로토콜의 풍부한 계층 구조에 액세스 할 수 있으며, 각각은 유형에 대해 가정 할 수있는 종류에 대해 크게 향상됩니다.

이 두 가지에 대해 이야기 해 보겠습니다.
 우리는 Collection이 주어진 인덱스에서 앞으로 나아갈 수 있다는 것을 이미 확증했으나, 다른 방향으로 나아갈 수있는 양방향 콜렉션도 있습니다.
 물론 양방향 컬렉션은 컬렉션 자체이므로 앞으로도 반복 할 수 있습니다.
 다음으로 가장 유연한 컬렉션 형식은 랜덤 액세스 컬렉션으로 알려져 있으며이를 통해 일정 시간 동안 계산하거나 다른 인덱스를 계산하거나 두 인덱스 간의 거리를 계산해야한다는 요구 사항이 추가됩니다.
 컴파일러는이를 강제 할 수 없으므로 임의의 행위를 콜렉션으로 준수하면 약속을하고있는 것입니다.
 그러나 당신이이 약속을 지키면이 약속을 이행 할 수 있다면 프로토콜은 일정한 시간 내에 컬렉션의 모든 색인에 액세스 할 수있는 권한을 부여합니다.
 물론 무작위 액세스 컬렉션은 컬렉션으로 남아 있으므로 앞으로 및 뒤로 반복 할 수 있습니다.
 이제 스위프트 개발자로서, 우리는 이러한 프로토콜, 배열, 집합 및 사전과 같은 컬렉션을 준수하는 많은 유용한 컬렉션에 액세스 할 수 있습니다.
 그러나 이러한 프로토콜의 범용 유틸리티 덕분에 많은 다른 유형은 데이터, 범위 및 문자열과 같은 수집 프로토콜을 준수합니다.
 또는 인덱스 콜렉션은 콜렉션을 고유 한 방식으로 간단히 준수함으로써 모든 풍부한 기능에 액세스 할 수 있습니다.
 실제로 이러한 유형 중 하나가 작동하는 방식을 알게되면 해당 지식을 다른 유형 중 하나에 적용 할 수 있으며 상당수가 있습니다.
 그래서 형식이 Collection에 어떻게 부합하는지에 대한 세부 사항에 대해 이야기 할 것이고, 모두 그것이 인덱스되는 방법을 설명하는 것으로 시작됩니다.
 각 콜렉션에는 고유 한 종류의 색인이 있습니다.
 그리고 그 지수는 비교 가능해야합니다.
 경우에 따라 인덱스는 배열과 같이 정수처럼 보일 수 있지만 인덱스가 정수처럼 보일 뿐이므로 인덱스를 정수처럼 사용해야하는 것은 아닙니다.
 이제 나는 놀랄만 한 대답을 할 수있는 몇 가지 질문을하고 싶다.
 첫 번째 방법은 배열의 첫 번째 요소를 얻는 방법이며 즉시 모든 생각을 할 수 있습니다. 배열의 영 역을 호출 할 것입니다.
 배열의 인덱스가 그럴 수 있습니다.
 그래서 당신은 때때로 이것을 말하고 당신이 원하는 것을 정확히 얻을 수 있습니다.
 그러나 이것을하는 것이 최선의 방법은 아닙니다.
 계속해서 같은 질문을하겠습니다.하지만 이번에는 다른 컬렉션에 대해 알아 보겠습니다.
 세트의 첫 번째 요소는 무엇입니까? 이제 이것은 정말 이상한 질문처럼 보일지도 모릅니다. 세트는 순서가 없습니다.
 그러나 그것들은 콜렉션이며 콜렉션이기 때문에 콜렉션을 반복 할 수 있습니다. 그리고 세트를 반복 할 때, 먼저 하나의 요소를 반복 할 것입니다. 그래서 이것이 실제로 우리가 묻는 질문입니다.
 그래서 나는 영하 10도를 말할 수 있을까? 다행히 컴파일러는 no라고 말하고 set의 인덱스 타입이 int이기 때문에 타입 시스템은 올바른 인덱스 타입을 사용하기를 원합니다.
 운 좋게도 우리는 이미 그 일을하는 법을 알고 있습니다.
 콜렉션 프로토콜은 모든 콜렉션에 시작 인덱스가 있음을 알려주므로 미리 살펴보고 사용하면 실제로 모든 콜렉션과 함께 작동합니다.
 시작 인덱스는 항상 반복 할 때 볼 수있는 첫 번째 항목의 요소가 될 것입니다.
 그러나 인덱스를 사용하여 컬렉션에 직접 첨언하는 경우에는주의해야 할 뉘앙스가 있습니다.
 그리고 그것은 충돌 할 수 있습니다.
 나는 실제로 이러한 컬렉션에 내용이 포함되어 있다고 주장하지 않았기 때문에 시작 인덱스 만 사용하고 있으며이 컬렉션은 비어있을 수 있습니다.
 컬렉션의 첫 번째 요소에 액세스하는 것은 훨씬 더 좋은 방법 인 일반적인 작업입니다.
 먼저 전화하십시오.
 그리고 첫 번째로 호출하면 이것이 더 안전합니다. 왜냐하면 모든 컬렉션에 첫 번째 요소가있는 것은 아니라는 사실을 반영하여 반환 시간이 선택 사항이기 때문입니다.
 그래서 또 다른 질문이 있습니다.
 그것은 콜렉션의 두 번째 요소이며 여기 콜렉션을 강조하고 싶습니다.
 그것은 아직 존재하지 않는 컬렉션, 배열, 집합 또는 무언가 일 수 있습니다.
 프로토콜 확장을 통해 콜렉션에 새 속성을 추가하자. 그러면 두 번째 콜을 호출 할 것이고 처음 콜렉션과 마찬가지로 콜렉션에 두 개의 요소가있는 것은 아니기 때문에 선택적으로 리턴 할 것이다.
 자 이제 subscripting 1을 써 봅시다.
 하지만 여기서 우리의 제로 기반 인덱싱 본능은 우리를 길을 잃을지도 모릅니다. 그러면 컴파일러가 다시 잡을 것입니다.
 이 코드가 모든 컬렉션에서 작동하고 모든 컬렉션이 정수를 사용하여 인덱스를 작성하는 것은 아닙니다.
 그럼 다른 접근법을 시도해 봅시다.
 내가 정말로 원하는 것은 시작 인덱스보다 하나 큰 것입니다.
 그러나 여기서 운이 좋은 것은 컴파일러가 이것을 잡을 것입니다.
 임의의 인덱스 유형에는 1을 더할 수 없습니다.
 인덱스 유형은 불투명하거나 불투명 할 수 있습니다.
 그리고 여기서해야 할 일은 콜렉션 프로토콜에서 제공하는 API를 사용해야한다는 것입니다.
 그러니 계속 해보세요.
 저는 두 번째 요소를 찾기 위해해야 ​​할 일들에 대한 스케치를 주석 처리했습니다.

가장 먼저해야 할 일은 컬렉션이 비어 있는지 확인해야한다는 것입니다.
 컬렉션의 시작 인덱스가 끝 인덱스와 정확히 일치하면 컬렉션이 비어 있습니다.
 그런 콜렉션에 두 번째 요소가 없으므로이를 확인하고 nil을 반환합시다.
 아, 이제 우리 컬렉션에는 하나의 요소가 있다고 가정 할 수 있습니다.
 index를 사용하여 두 번째 요소 또는 두 번째 인덱스를 가져올 수 있지만 인덱스가 유효한지 확인해야하며이를 시각적으로 확인해야합니다.
 후에 컬렉션이 진행되지만 콜렉션에 요소가 하나만있는 경우 잘못된 인덱스가 생성되고 인덱스에 첨자를 넣으려고하면 잠시 전에 치명적인 오류가 발생합니다.
 그래서 우리는 그것이 유효한지 확인합니다. 이것은 빈 [들리지 않음]과 매우 유사합니다.
 인덱스가 nil을 리턴하는 end 인덱스와 같지 않은지 확인합니다.
 두 요소 콜렉션에는 a가 없기 때문에 하나의 요소 콜렉션에는 두 번째 요소가 없습니다.
 이 시점에서 컬렉션에는 적어도 두 개의 요소가 포함되어 있다는 것을 알기 위해 필요한 모든 가정이 있으므로 원하는 인덱스 값을 가져 와서 인덱스에 하위 연산자를 사용하는 것이 안전합니다.
 이제는 코드가 많이 생겼습니다. 그러나이 일반적인 목적의 인덱스 수학은 어떤 컬렉션에서도 작동 할 것이라고 지적 할 가치가 있습니다. Swift는 더 나은 방법을 제시합니다. .
 슬라이스라고하는 것이 있지만 슬라이스를 사용하여 수행하는 방법을 보여주기 전에 슬라이스가 무엇이며 어떻게 작동하는지 이야기하고 싶습니다.
 조각은 컬렉션의 일부만을 설명하는 형식입니다.
 모든 슬라이스에는 고유 한 시작 및 끝 인덱스가 있으며 슬라이스는 원본 컬렉션에서 컬렉션과 별도로 존재합니다.
 그리고 슬라이스를 매우 효율적으로 만드는 것은 별도의 저장 장치를 차지하지 않기 때문입니다.
 그들은 단순히 원래의 콜렉션을 참조하고, 슬라이스가 첨자로 쓰여질 때 원래의 버퍼를 읽습니다.
 기본 컬렉션과 동일한 색인을 공유하기 때문에 이러한 작업을 수행 할 수 있습니다.
 그리고 그것이 어떻게 작동하는지 살펴 보겠습니다.
 우리는 이것을 우리 자신에게 증명할 수 있습니다.
 우리는 배열로 시작할 것이고, 우리는 그 배열에 첫 번째 요소를 떨어 뜨려 하나의 요소가 더 짧은 슬라이스를 생성하도록 요청할 것입니다.
 그리고 우리가 인덱스에 대해 증명하는 것에 관심을 갖기 때문에 실제로 배열의 두 번째 인덱스는 시작 인덱스 이후에 하나씩 가져 와서 비교 한 다음 비교할 것입니다.
 그리고 실제로, 그들은 동일합니다.
 이제이 dropfirst 함수는 우리 콜렉션의 두 번째 요소를 간결하게 얻을 필요가있는 것처럼 보입니다.
 이제 이전 솔루션으로 돌아가서 조각으로 얼마나 표현력이 풍부한 지 살펴보십시오.
 이전에 작성해야했던 모든 멋진 색인 [들리지 않음] 코드를 기억하십니까? 글쎄, dropfirst를 사용함으로써, 우리는 조각이 우리를 위해 점검하는 모든 멋진 인덱스 범위를 처리하도록 할 것입니다.
 그리고 처음부터 선택적으로 반환하기 때문에 빈 요소 컬렉션과 단일 요소 컬렉션에서 예상대로 작동합니다.
 여기서 일어나는 일을 시각화합시다.
 배열로 시작하여 첫 번째 요소를 삭제하여 슬라이스를 만듭니다.
 그런 다음 첫 번째 속성을 사용하여 슬라이스에 아래 첨자를 추가하여 원본 컬렉션에서 요소를 검색합니다.
 이제 당신에 대해 모르겠지만이 코드를 유지하는 편이 낫습니다.
 이제 모든 유형은 자체 슬라이스 유형을 자유롭게 설명 할 수 있습니다.
 예를 들어, 배열은 어레이가 작동하는 가장 일반적인 유스 케이스에 특별히 적합한 배열 슬라이스를 정의합니다.
 마찬가지로 문자열은 하위 문자열 슬라이스 유형을 정의하고 하위 문자열은 문자열과 가장 일반적인 특수한 경우에 맞춰 조정됩니다.
 set과 같은 일부 유형은 표준 라이브러리에 정의 된 일반화 된 슬라이스 유형을 사용합니다.
 집합은 순서가 지정되지 않았기 때문입니다.
 그들이 할 수있는 일은별로 많지 않습니다.
 그들은 기본적으로 원본 컬렉션에 대해 시작 및 끝 인덱스를 유지해야합니다.
 반면에 데이터와 범위는 자체 슬라이스 유형이므로 여기에 많은 옵션이 있습니다.
 그리고 우리가 계속 나아 가기 전에 제가 이야기하고 싶은 슬라이스에 관해 또 하나의 것이 있습니다.
 수천, 수천, 수천 개의 요소와 같은 매우 큰 컬렉션이 있다고 가정 해 봅시다.
 그리고 우리는 그 컬렉션의 일부에 몇 개의 작은 조각을 추가합니다.
 조각이 주변에있는 한 슬라이스는 원래 수집의 전체를 그대로 유지한다는 것을 기억하는 것이 중요합니다.
 그리고 이것은 놀라운 문제로 이어질 수 있습니다.
 이것이 코드에서 어떻게 작동하는지 보겠습니다.
 전반부를 돌려 줄 수있는 배열의 확장이 있다고 가정 해 봅시다. 여기에 droplast 함수를 사용하고 있습니다.
 그리고 우리는 8 개의 숫자 배열을 가지고 있습니다. 우리는 우리의 확장을 호출하여 슬라이스를 생성 한 다음 8 개의 숫자를 원래의 저장소에서 제거하려고 시도합니다. 그 배열을 빈 배열에 할당합니다.
 재미있는 일이 일어나는 첫 번째 단서는 슬라이스에 첫 번째 요소를 요청할 때 발생합니다.

원래 배열에 대한 저장소를 버린 경우에도 반환 할 수 있습니다.
 사본이 있거나 마술이 진행 중입니다.
 그래서 버퍼를 없애고 싶다면 실제로 진행중인 마법은 우리가 버퍼를 잡고 있다는 것입니다.
 그래서 만약 우리가 제거하고 싶다면, 우리가 할 수있는 것은 슬라이스로부터 배열의 실제 복사본을 만들 수 있습니다. 그런 다음 그 슬라이스를 빈 배열 자체로 설정하면 그 복사본은 여전히 ​​유효합니다.
 방금 일어난 일을 시각화합시다.
 우리는 배열로 시작했습니다.
 그런 다음 배열의 전반부에 슬라이스를 형성했습니다.
 그런 다음 배열을 비워두고 해당 슬라이스를 비워 두도록 복사본을 작성했습니다.
 그리고 우리가 그 작업을 한 후에야 기본 스토리지가 사라졌습니다.
 따라서이 문제에서 게으른 사본과 같은 작업을 분류합니다.
 당신은 당신이 요소의 사본을 스스로 만들 때 선택할 수 있습니다. 그리고 게으르다가 나중에 뭔가를한다는 개념이 다른 맥락에서도 정말 유용하다는 것이 밝혀졌습니다.
 이러한 컨텍스트 중 하나는 함수 호출입니다.
 이제 Swift의 함수 호출은 기본적으로 열망합니다.
 즉, 그들은 자신의 의견을 소비하고 요구되는대로 산출물을 반환합니다.
 이 예제를 고려하십시오.
 우리는 1부터 4000까지의 범위로 시작하며, 범위는 많은 숫자를 나타내는 매우 간결한 방법입니다.
 그것은 단지 시작과 끝이고, 그것들을 만드는 방법을 알고 있습니다.
 그런 다음 각 값에 2를 곱해서 매핑합니다. 따라서 실제로 4000 개의 요소 배열을 할당하고 각 요소에 매핑 기능을 수행했습니다.
 그런 다음이를 4 개의 요소로 필터링합니다.
 그리고이 시점에서 우리는 실제로 4004 개의 요소를위한 4004 개의 공간을 할당했지만 실제로는 마지막 4 개만 필요했습니다.
 그리고 아마도 우리가 항상 원하지 않는 중간 계산이 끔찍합니다.
 절대적으로 필요한 경우가 아니라면 그 중 아무 것도하지 않는 방법이 있다면 좋을 것입니다.
 그리고 스위프트의 대답은 실생활과 마찬가지로 게으름이라고합니다.
 우리는 이전과 마찬가지로 범위를 시작하여 그 범위를 게으 르도록 말할 것입니다.
 그리고 우리가 이것을 할 때, 원래 콜렉션을 게으른 콜렉션으로 포장하고,이 게으른 콜렉션에서 작업을 수행 할 때, 우리는 그것을 다시 포장 할 것입니다.
 그래서 우리가 랩핑 할 때 맵을 호출 할 때 우리는 실제로 맵핑을하지 않습니다.
 우리는 그 closure를 사용하기 위해 나중에 저장해야하는 것 이외에는 아무것도하지 않습니다.
 더구나, 만약 내가 그 게으른지도 컬렉션을 필터링, 필터는 간단하게지도 컬렉션을 래핑, 그것은 수요가 있지만, 지금은 아니지만 나중에 필터링 할 것입니다.
 이제 우리의 게으른 필터 컬렉션에 첫 번째 요소에 대해 물어 보겠습니다.
 이렇게하면 게으른 필터 컬렉션에 첫 번째 요소가 있는지 묻는 것으로 시작하지만 게으른 필터 컬렉션은 알 수 없습니다.
 그것은 알고 있을지 모르는 것을 감싼다.
 그리하여지도 컬렉션을 연기합니다.
 그리고지도 컬렉션은 첫 번째 요소인지도 모릅니다.하지만 컬렉션은 실제로 범위가 첫 번째 요소임을 알고있을 수 있습니다.
 범위의 첫 번째 요소는 값 1이며, 게으른 맵 콜렉션으로 리턴됩니다. 여기서 게으른 맵 콜렉션은 실제로 클로저를 수행 할 수 있으며 값 2를 계산하여 게으른 필터 콜렉션에 candidateFirst 요소로 리턴합니다.
 이 경우 우리에게는 운이 좋았습니다. 2는 10보다 작아졌습니다. 따라서 lazy 필터 콜렉션은 첫 번째 시도에서 첫 번째 요소를 찾아 호출자에게 반환합니다.
 이제는 계산이 많이 달라졌습니다.
 필요에 따라 필요할 때만 계산을 수행하는 게으른 것을 목표로 삼았지만 피할 수있는 또 다른 방법은 중간 저장 공간을 만드는 것입니다.
 그래서 그 예를 보여주고 싶습니다.
 우리가 다른 종류의 곰을 가지고 있다고 가정 해 봅시다.
 그러나 나는이 곰 중 일부가 중복된다는 것을 지적하고 싶다.
 우리는 이미 그들이 곰이라는 것을 알고 있습니다.
 그들은 우리에게 다시 말할 필요가 없습니다.
 그래서 바보 같은 중복 베어를 찾기 위해 코드를 작성해 보겠습니다. 이전과 같이 지연 필터를 사용하여이를 수행 할 것입니다.
 그리고이 경우 게으른 필터를 만드는 것은 문자열 배열을 래핑하는 지연 필터 컬렉션이 될 것입니다.
 여기에 더 가깝게, 우리가 프리디 케이트 체크를하기 전에 어느 곰이 우리가 현재 반복하고 있는지를 프린트 할 것입니다.
 우리는 필터가 어떻게 작동하는지 이해하기를 원하기 때문에이 작업을 수행하고 있습니다. 그러면 먼저 호출하고 지연 필터 콜렉션으로 지연하고 지연 필터 콜렉션에 Grizzly를 인쇄 할 원본 저장소로 연기하고, 조건부 (이 경우 false) 인 Grizzly에 bear라는 단어가 없는지 확인하고 팬더로 이동합니다.
 우리가 팬더에 도착하면, 팬더에 도착했을 때, 팬더를 다시 인쇄하고, 곰이라는 단어가 들어 있는지 확인하고, 광경을 향해 나아갑니다.

스펙타클이 인쇄되고 곰이라는 단어가 포함되어 있지 않으며 마침내 거미 곰에게 전달됩니다. 거미 곰은 자비 롭게 곰이라는 단어가 들어 있으며 게으른 필터 컬렉션이 이제 발신자에게 돌아갈 수 있습니다.
 우리가 처음으로 다시 전화하면 어떻게 될까요? 음, 그것은 같은 이야기입니다.
 우리는 lazy 필터 콜렉션을 요청합니다. 콜렉션은 기본 콜렉션으로 넘어 가서, 그 콜렉션을 호출자에게 리턴합니다.
 이제는 일반적으로 원하는 결과가 아닐 수도 있습니다. 따라서 결과를 계산하도록 반복적으로 게으른 콜렉션을 요청할 필요가있는 경우 한 번만 발생하는 방법이 있습니다.
 우리는 게으른 콜렉션이 게으른 콜렉션으로부터 새로운 콜렉션을 생성함으로써 정확히 한 번만 반복되도록 보장 할 수 있으며, 그렇게 할 때 여전히 게으른 콜렉션으로 연기 될 것이지만 이제 반복은 전체 콜렉션, 본질적으로, 당신은 알다시피, 그 게으른 계산의 게으른 버전을 생산하고 있습니다.
 그리고이 경우 우리는 거미 곰 자리 문자열을 포함하는 배열을 얻습니다.
 우리가 그 광선의 첫 번째 요소를 인쇄한다면, 우리는 클로저를 전혀 참조하지 않거나 게으른 콜렉션을 전혀 참조 할 필요가 없습니다.
 우리는 기본적으로 게으름을 몰아 내고 이제 열렬한 배열을 가지고 있습니다.
 언제 우리는 언제 게으르겠습니까? 음, 게으른 모음집은 연결된지도와 필터의 오버 헤드를 제거하는 정말 좋은 방법입니다.
 콜렉션 계산 결과의 일부만을 필요로 할 때, 또는 클로저에 부작용이있는 경우 게으른 사용을 피해야하며 클로저에 거의 부작용이 없어야합니다.
 다시 확인하거나 API 경계를 넘을 때 정규 컬렉션으로 다시 돌아가는 것을 고려해야합니다.
 게으른 것은 구현 세부 사항이되어야합니다.
 지금까지는 변경 가능한 콜렉션만으로 많은 멋진 작업을 수행 할 수 있었지만 물론 Swift는 콜렉션을 변경시킬 수 있습니다.
 우리가 아직 이야기하지 않은 두 종류의 컬렉션에 대해 이야기 해 봅시다.
 첫 번째는 변경 가능한 콜렉션입니다.
 이렇게하면 모음의 내용은 바꿀 수 있지만 길이는 변경할 수 없도록 setter가 아래 첨자에 추가됩니다.
 그리고 당신은 일정한 시간에 이것을 할 수 있어야합니다.
 다음은 Range Replaceable Collection으로, 콜렉션에서 요소를 제거하거나 삽입 할 수있을 때 얻을 수있는 콜렉션의 종류입니다.
 이제 저는 항상 물어 오는 질문 중 하나에 대해 이야기하고 싶습니다.
 왜 완벽하게 합당한 콜렉션 코드가 충돌하나요? 그리고 모든 좋은 질문 답변과 마찬가지로, 나는 거의 항상 내 자신의 몇 가지 질문을 후속합니다.
 때로는 클래식으로 시작하고, 무엇을하려고하십니까? 그리고 저는 대개 신속하게 후속 조치를 취합니다. 귀하의 소장품은 어떻게 사용하고 있습니까? 당신이 돌연변이를 일으키고 있습니까? 여러 스레드에 대한 콜렉션에 액세스하지 않습니까? 그리고 나는 그들의 질문에 대한 답이 문제의 근본 원인이되기 때문에이 질문을합니다.
 자, 스레드가 포함되지 않는다는 가정부터 시작합시다.
 나는 실에 대해서 아직 생각할 준비가되어 있지 않다.
 심지어 9:30도 아니야.
 우리가 배열을 가지고 있다고 가정하고, 우리가 알고있는 요소의 인덱스를 얻습니다.이 경우 e 값입니다.
 그런 다음 컬렉션을 변형 시키십시오. 예를 들어 첫 번째 요소를 제거하면 해당 인덱스와 연관된 요소가 인쇄됩니다.
 우리가 이것을 할 때, 불행하게도 이것은 치명적인 오류를 만들어 낼 것입니다.
 색인은 더 이상 유효하지 않습니다.
 사실, 우리는 우리 컬렉션을 돌연변이 한 순간 색인이 무효가되었습니다.
 훨씬 더 안전한 접근법은 우리 컬렉션을 먼저 변경 한 다음 색인을 계산하는 것입니다.
 돌연변이가 항상 지수를 무효로한다는 것을 지적하는 것은 가치가 있습니다.
 이것은 배열에만 적용되는 것은 아닙니다.
 이 문제가 어떻게 사전에 나타날 수 있는지 살펴 보겠습니다.
 곰들이 좋아하는 것을 몇 개 보여주는 사전이 있다고 가정 해 봅시다.
 우리는 곰이 좋아하는 음식의 색인을 붙잡아서 인쇄하여 연어라고 확인합니다.
 다음으로, 우리는이 곰이 가지고있는 몇 가지 더 좋아하는 것들을 추가 할 것이며, 우리는 우리가 가장 좋아하는 음식이 여전히 연어인지 확인하게 될 것입니다.
 그리고 우리는 그것을 보게 될 것입니다. 잠깐, 우리가 가장 좋아하는 재화는 겨울잠이 아니라 연어입니다.
 배열과 마찬가지로 사전을 변경 한 순간에 색인을 무효화했습니다.
 이 코드가 충돌 할 수도 있음을 지적하는 것도 가치가 있습니다.
 어떻게 해결할 수 있을까요? 글쎄, 그것은 우리가 배열에 사용했던 것과 정확히 똑같은 수정입니다.
 우리는 돌연변이 한 후에 단순히 색인을 재 계산합니다.
 음, 인덱스를 다시 계산할 때 이것은 때로는 비쌀 수 있다는 점을 명심해야합니다.
 일부 색인 검색 방법은 선형 시간을 사용합니다.
 따라서 필요한 인덱스 만 찾을 수 있도록주의해야합니다.
 이런 상황에서 자신을 찾는 것을 피하려면 여기에 제 조언이 있습니다.
 돌연변이가 거의 항상 귀하의 지표를 무효화한다는 것을 기억하십시오.
 때로는 그럴 수 없지만, 이것을 어려운 규칙으로 취급하는 것이 가장 좋습니다.

당신은 훨씬 더 행복 할거야.
 또한 조각은 변형 된 후에도 컬렉션의 기본 원래 상태를 유지하므로 그 때문에 컬렉션이 변경 될 수있는 인덱스 또는 조각을 유지하는 것에 대해 실제로 두 번 생각하십시오.
 그리고 인덱스 계산은 때로는 중요한 시간을 필요로 할 수 있음을 명심하십시오.
 필요에 따라 인덱스 만 계산하십시오.
 잠시 후에 토론에 스레드를 가져와 봅시다.
 내가 물어 본 질문 중 하나는 스레드가 여러 스레드에서 액세스 할 수 있다는 것입니다. 그리고 내가 이것을 묻는 이유는 우리 컬렉션이 여러분이 하나의 스레드에서 그것들에 접근 할 것이라고 가정하기 때문입니다.
 그리고 이것은 성과의 이유로 정말 좋은 것입니다.
 모든 단일 스레드 유스 케이스가 상호 배타를 보장하기 위해 사용할 수있는 잠금 또는 다른 프리미티브를 소비하지 않도록합니다.
 그리고 쓰레드가 관련 될 때, 컬렉션을 사용하는 개발자 만이 프레임 워크 개발자가 제공 할 수있는 것보다 훨씬 높은 수준의 추상화로 적절한 잠금 또는 직렬 큐를 사용하여 액세스를 제한하는 데 필요한 모든 정보를 갖게됩니다.
 그래서 이런 종류의 문제가 어떻게 생겼는지 보자.
 우리가 잠자는 곰으로 가득차는 것을 목표로 배열을 만들고, 각각의 곰을 그들 자신의 곰 인 것처럼 시뮬레이트하기 위해, 우리는 우리가 말할 때 사용하는 동시 디스패치 큐에 접근 할 것입니다 각 곰은 자러 간다.
 그리고 이것은 동시 디스패치 대기열이므로 동일한 시간에 코드를 실행하는 것을 상상해 보는 것이 도움이됩니다. 코드를 동일한 행에 넣어 시뮬레이션합니다.
 그리고 나중에 우리의 응용 프로그램에서, 그 잠자는 곰을 확인하고, 가끔은 할아버지와 새끼가 행복하게 snoozing 것을 보자.
 다른 시간에, 새끼가 먼저 잠을 자면 할아버지가됩니다.
 때때로, 아주 신비하게, 할아버지 만자는 중입니다.
 그리고 다른 시간에, 그것은 새끼가 될 것이고 때로는 우리 프로그램이 중단되고 충돌 할 것이고 아무도 잠을 자지 못합니다.
 이 모든 가능성은 가능한 경쟁 조건이 있음을 시사하며 실제로이 예제에 포함 된 모든 잠재적 인 스레드를 고려할 가능성이 높습니다.
 그리고 우리는 Xcode에 포함 된 스레드 살균제 또는 TSAN을 사용하여 이것을 증명할 수 있습니다.
 그렇게한다면 우리는 이런 종류의 출력을 얻을 수 있습니다. 실제로 TSAN이 경쟁을 잡을 것입니다.
 신속한 액세스 레이스가 있음을 알 수 있습니다.
 그것은 어떤 스레드가 관련되어 있는지 알려주고 결국 우리에게 문제를 찾기 시작하는 줄을 알려주는 요약을 줄 것입니다.
 그리고 그 모든 증거는 사실 버그를 찾는 데 실제로 도움이 될 것입니다.
 그래서 우리는 여기에 버그가 있음을 증명했습니다.
 TSAN은 내 경험으로 결코 거짓말을 한 적이 없습니다.
 그래서 우리는 곰들이 동시에 잠을자는 것을 없애고이를 해결할 수 있습니다. 우리는 직렬 디스패치 대기열을 사용하여이를 수행 할 것입니다.
 이제 한 번에 한 명의 곰만 잠을 잘 수 있습니다.
 그래서 우리가 지금 잠자는 곰들을 다시 들여다 보면, 적절한 대기열에서 돌보는 일을 할 때, 우리는 할아버지와 새끼가 충분히 평화롭게 우리가 기대했던 것처럼 졸고 있다는 것을 알 수 있습니다.
 그래서 여러 스레드에 대한 콜렉션 작업에 대한 조언은 오직 하나의 스레드에서만 볼 수 있도록 데이터를 격리하려고 시도하고, 그렇게 할 수없는 경우 상호 배제에서 적절한 양식을 가지고 있는지 확인하십시오. 직렬 디스패치 큐 또는 잠금으로.
 항상 스레드 살균제를 사용하여 작업 내용을 다시 확인하십시오.
 버그가 앱에서 출시되기 전에 잡는 것이 훨씬 낫습니다.
 변경 가능한 컬렉션 작업에 대한 조언이 조금 더 있습니다.
 당신이 그것을 피할 수 있다면 첫 번째는 변경 가능한 상태를 전혀 사용하지 않는 것입니다.
 지금까지 설명한 모든 어려움은 우리가 가변적 인 상태로 작업했기 때문에 발생했습니다.
 처음에는 변경 가능한 콜렉션을 피함으로써 이러한 복잡성에 대한 모든 잠재력을 피할 수 있습니다.
 여러 번 슬라이스를 사용하거나 지연 래퍼를 사용하여 수행하려는 변형을 실제로 에뮬레이션 할 수 있으며 변경할 수없는 데이터를 이해하는 것이 거의 항상 쉽습니다.
 그리고 Swift에 내장 된 가변성 덕분에 컴파일러는 실제로 mutation하지 않을 때 상태를 변경할 수있는 상태로 남겨두면 도움이 될 것입니다.
 이제 실제로해야 할 때 변경할 수있는 상태를 가장 효과적으로 사용하는 방법과 관련된 조언이 하나 더 있습니다.
 새로운 컬렉션을 만들 때입니다.
 실제로 얼마나 많은 요소가 필요한지에 대한 정확한 계산이나 근사치를 알만큼 운이 좋으면 성과를 도울 수 있습니다.
 대부분의 콜렉션 API는이 힌트를 제공 할 수있는 방법을 가지고 있으며 이렇게하면 오버 헤드없이 필요한 크기를 정확하게 얻을 수 있습니다.
 그렇지 않다면 우리의 컬렉션은 일반적인 용도의 도구입니다.

이것들은 다양한 경우에 적용될 수 있습니다. 그리고 요소를 점진적으로 추가 할 때 필요한 저장 공간을 실제로 할당 할 수 있지만 그러한 힌트를 제공 할 때 예상치를 초과하지 않도록주의하십시오. 그렇지 않으면 실제로 필요한 것보다 더 많은 스토리지를 사용하는 똑같은 상황에 처하게 될 것이기 때문입니다.
 이제 저는 오늘 마지막 주제로 나아가고 싶습니다.
 이는 Foundation을 가져올 때와 사용할 때 고려해야 할 다양한 컬렉션입니다.
 표준 라이브러리 모음 외에도 Foundation을 가져올 때 수십 년 동안 객관적인 C 개발자가 사용해온 훌륭한 참조 유형 모음에 액세스 할 수 있습니다.
 그리고 이것들 중 많은 것들도 스위프트에서의 적합성을 얻었고 따라서 우리가 말한 컬렉션들만을 행동합니다.
 즉, 유의해야 할 중요한 몇 가지 사항이 있습니다.
 명심해야 할 첫 번째 사실은 이러한 NS [들리지 않음] 컬렉션이 참조 유형이라는 것입니다.
 그리고 이것은 예를 고려하여 가장 잘 검사됩니다.
 우리는 가치 유형과 참조 유형을 정의하고 양 측면에서 동일한 유형을 수행합니다.
 그래서 우리의 가치 유형을 x라고 부를 것입니다.
 문자열 배열입니다.
 우리는 x라는 빈 배열을 얻습니다.
 참조 유형을 사용하면 빈 배열을 얻을 수 있지만 x는이를 가리키고 있습니다.
 그런 다음이 배열을 값 유형으로 변경합니다.
 그 배열은 라인에 돌연변이가있다.
 참조 유형에서 해당 배열은 참조이며, 참조되는 배열은 라인에서 돌연변이가 발생합니다.
 우리는 또 다른 변수를 추가합니다.
 값 유형을 사용하면 실제로 특별한 것이 발생합니다.
 실제로이 시점에서 스토리지를 복사하지 않습니다.
 스토리지가 실제로 x가 소유하고 있음을 알고있는 배열은 왜입니까? 그리고 왜 실제로 그 컬렉션 중 하나가 돌연변이 될 때까지 복사본을 수행 할 것입니까?
 참조 유형은 조금 다릅니다.
 Y는 동일한 기본 배열에 대한 또 다른 포인터입니다.
 그래서 y를 돌연변이시켜 봅시다.
 우리는 다른 곰을 그 배열에 넣을거야.
 값 유형을 사용하면 먼저 쓰기 기계에서 해당 사본을 호출합니다.
 우리는 y를 쓰고있어, 그것을 복사해야하고, 다음 곰을 삽입 할 수 있습니다.
 참고로, 조금 더 간단합니다.
 배열은 하나뿐입니다.
 팬더를 배열에 넣기 만하면됩니다.
 Swift에서 Foundation 컬렉션을 사용하여 작업 할 때 염두에 두어야 할 두 번째 사항이 있습니다.
 즉 Swift의 모든 objective-C API는 Swift native value 유형으로 나타납니다.
 실제로 각 언어의 코드가 자연스럽게 그들이 가장 잘 작동하는 유형으로 말하게하기 때문에 이것은 실제로 정말 멋지다.
 그러나 이것이 어떻게 작동 할 수 있습니까? 두 언어는 이러한 콜렉션에 대해 완전히 다른 구현을 가지고 있습니다.
 그리고 그것이 작동하는 이유는 브리징 (bridging)으로 알려진 것입니다.
 브리징은 서로 다른 두 가지 런타임 표현 사이에서 변환하는 방법이며, 이는 신속하고 객관적인 C가 매우 다른 언어의 컴파일 및 런타임 기능을 제공한다는 점에서 필요합니다.
 가능한 한 빨리 브리징을 최적화하는 동안 무료는 아닙니다.
 두 언어를 연결하는 데는 항상 비용이 들게됩니다.
 우리가 다리를 밟으면 어떻게 될까요? 언어간에 다리를 뚫을 때 새로운 저장소와 동등한 저장소가 분산되어 있으므로 한 가지 언어로 n 가지를 사용하는 경우 다음 공간에서 n 개의 공간을 차지하게됩니다.
 그런 다음 요소별로 이동해야하며 잠재적으로 요소 간 변환이 필요합니다.이 요소 간 브리징은 때때로 반복적 일 수 있습니다.
 예를 들어 문자열 배열이있는 경우 먼저 배열을 연결 한 다음 각 문자열을 연결합니다.
 이것이 두 언어의 경계에서 발생하면 우리는 열망하는 브리징이라고 부릅니다.
 또한 컬렉션의 요소가 브리징을 필요로 할 때 컬렉션은 항상 열심히 연결됩니다.
 그리고 이것은 문자열로 입력 된 사전에서 가장 자주 발생합니다.
 콜렉션 브리징이 열심히하지 않으면, 우리는 그것을 게으른 호출합니다.
 그리고 이것은 컬렉션의 요소 유형이 NSView와 같이 스스로 브리징되지 않을 때 발생합니다.
 이 경우 브리징은 컬렉션이 실제로 사용될 때까지 연기됩니다.
 이 예제를 몇 가지 예제로 만들어 보겠습니다.
 먼저 NSDatas의 NSArray를 설명하는 objective-C API를 살펴 보겠습니다.
 이제 NSArray는 배열에 연결되고 NSData는 값 유형 데이터에 연결됩니다.
 그래서 그러한 수집 물은 열심히 연결될 것입니다.
 잠시 전에 NSViews가 Swift에서 연결되지 않는다고 언급했습니다.
 Swift에서 참조 유형으로 남아 있습니다.
 NSView의 NSArray는 느리게 브리지 될 것입니다.
 먼저 배열에 액세스하거나 배열을 사용하기 전까지는 브리징이 발생하지 않습니다.
 마지막으로 NS 문자열 인 NSDictionary는 문자열을 값 유형 문자열로 Swift에서 만나야하기 때문에 열심히 연결됩니다.
 이제 우리는 브리징이 무엇인지, 그것이 어떻게 작동하는지, 그리고 언제 일어 났는지에 대해 가장 중요한 질문으로 넘어갈 수 있습니다.

그리고 그 대답은 정말로 간단합니다.
 측정 할 때 앱에 부정적인 영향을 미칩니다.
 특히 시간 프로필을 사용하거나 악기를 추적 할 때 코드가 언어간에 교차하는 위치에 특히주의하십시오. 특히 루프 내부에서 발생하는 경우 특히주의하십시오.
 어떤 브리징은 일어날 것이고, 그것은 완전히 괜찮습니다.
 당신이 찾고있는 것은 불균형 한 시간이나 당신이 쓰지 않은 코드에 쓰인 놀라운 시간입니다.이 단어에는 브리지라는 단어가 있습니다.
 구체적인 예를 살펴 보겠습니다.
 내가하고있는 위대한 아이들 이야기에 대한 원고가 있다고 가정 해 보겠습니다. 그러나 실제로 길기 때문에 조금만 보여 드리겠습니다. 그러나 실제로 그것을 터뜨릴 수 있기를 바랍니다. 나는 모든 말을하거나 모든 것을 만들고 싶습니다. 브라운이라는 단어의 실체는 실제로 갈색을 띄며 공간의 이익을 위해 첫 번째 단어 만 강조 표시합니다.
 이렇게하려면 NS 가변 문자열을 사용합니다.
 나는 내 이야기를 전달할 것이다.
 그런 다음 속성 문자열 문자열 속성을 사용하여 Swift 문자열의 범위를 물어볼 것입니다. 갈색 범위는 네이티브 인덱스 유형의 문자열을 생성합니다.
 그리고 mutable string은 NS 범위에서 작동하므로 작년에 도입 한 편의 초기화 프로그램을 NS 범위로 변환하여 사용합니다.이 경우 변환을 수행하기 위해 다시 문자열 특성 문자열을 호출합니다.
 그런 다음 갈색이라는 단어의 첫 번째 인스턴스에 색을 칠합니다.
 그리고이 코드를 실행하려고하면 조금 느립니다.
 그래서 나는 그것을 설명한다.
 놀랍게도, 나는 항상 갈색이라는 단어를 칠하는 데 시간을 할애한다고 생각했지만 실제로 실제로 색인을 계산하고 있는데 왜 그런가요? 그 이유는 실제로 우리의 문자열을 여러 언어로 여러 번 연결하기 때문입니다.
 가변 속성 문자열은 objective-C 참조 유형이므로 문자열 속성을 요청할 때 실제로는 NSString을 문자열로 변환해야합니다.
 첫 번째 범위를 계산할 때 여기에서 한 번 수행하고 있으며 NSRange로 변환 할 때 다시 한 번 수행합니다.
 모든 텍스트를 색칠하기 위해 루프에서 이렇게하면 비용이 얼마나 들까 상상할 수 있습니다.
 이제 이것이 왜 발생하는지 살펴 보겠습니다.
 텍스트를 부를 때마다.
문자열의 경우 Swift 실행 컨텍스트에서 시작합니다.
 그러나 NSMutableAttributedString의 구현은 objective-C이며 결과를 제공하기 위해 실제로는 원래 구현을 참조해야합니다.
 원래 구현은 참조 유형 인 NSString을 반환하므로 문자열로 돌아 가면 클러스터로 문자를 클러스터링하여 클러스터를 그 래핑해야합니다.
 브리징은 리턴 유형이든 매개 변수이든 상관없이 발생합니다.
 이제 우리가 그 세부 사항을 알게 되었으니 이제 만들 수 있습니다. 이제 조금 더 나아질 수 있습니다.
 한 번 다리를 놓으십시오.
 우리 코드를 다시 한번 살펴보고 실제로 성능을 절반으로 향상 시켰는지 확인해 봅시다.
 그러나 올해 우리는 조금 더 나아질 수 있습니다.
 아, 그리고 지금, 우리는 우리가하는 곳을 연결하지 않습니다.
 그러나 올해 우리는 조금 더 잘할 수 있습니다.
 올해 우리가 텍스트를 요구할 때 실제로 NSString에 [들리지 않음].
문자열의 속성 인 경우 변수를 꺼내면 실제로 브리징이 발생하지 않습니다.
 그리고 더 나아가, 문자열이 NSString이되었으므로, 우리가 속성의 범위를 호출 할 때 우리는 실제로 NSRange를 자동으로 가져옵니다.
 스위프트 네이티브 형식과 NS 범위 사이의 범위 변환을 수행 할 필요가 없으며 매우 뛰어납니다.
 그럼이 코드를 측정하고 어떻게 보이는지 살펴 봅시다. 물론이 코드는 꽤 좋아 보입니다.
 이전에 거의 800 밀리 초를 소비하는 것보다 훨씬 빠릅니다.
 그러나 나는 여전히 우리가 여기에 다리를 놓고 있다고 지적하고 싶다.
 그리고 그것은 작은 다리입니다,하지만 우리는 여전히 다리를 뚫고 있습니다.
 여기서 Brown은 Swift 값 유형 문자열입니다.
 그리고 우리는 객관적인 C API 범위 인 [들리지 않는] NSString을 호출 할 때마다 실제로 작은 문자열을 NSString에 연결합니다.
 이 경우 비용이 저렴합니다.
 나는 단지 한 번만하고 있습니다. 그러나 이것이 반복적이라면, 소량이 시간이지나면서 합쳐질 것이라고 상상할 수 있습니다.
 따라서 동일한 작은 문자열을 반복적으로 연결하지 않도록주의해야합니다.
 그러나 이러한 최적화를 수행하기 전에 항상 측정하십시오.
 이제 브리징에 대한 세부 사항을 살펴 보았으므로 파운데이션 컬렉션 사용시기에 대한 조언을 드리고자합니다.
 참조 의미론을 가진 콜렉션이 필요할 때 명시 적으로 사용하는 것을 고려해야합니다.
 그 중 하나를 직접 쓰지 않아도됩니다. 우리는 이미 많은 훌륭한 것들을 가지고 있습니다.
 참조 유형으로 알고있는 유형으로 작업 할 때도 사용해야합니다.
 NS 프록시 또는 핵심 데이터 관리 객체와 같은 것들.

그리고 마지막으로 객관적인 C 코드로 라운드 트립을 할 때 고려해야 할 마지막 시간이지만, 성능 문제가 무엇이든 관계없이 브리징이 실제로 발생했는지를 확인하고 확인한 후에이 작업을 수행하는 것이 좋습니다. 봄.
 이제 스위프트에서 전 세계 컬렉션의 엄청난 힘을 얻었습니다.
 이 새로운 발견 된 지식을 사용하여 기존 컬렉션 사용을 검토하십시오.
 인덱스와 조각을보다 효과적으로 사용하여 코드를 향상시킬 수있는 장소를 찾습니다.
 코드를 측정하십시오.
 그리고 게으름을 피우거나 브리지하는 방법을 튜닝하여 도움을받을 수있는 장소를 찾아보십시오.
 스레드 살균제를 사용하여 변경 가능한 상태를 감사하고 오늘 놀이터에서 논의 된 모든 개념을 적용하고 자신의 앱을 사용하여 컬렉션의 숙달도를 한층 강화할 수 있습니다.
 컬렉션에 대해 궁금한 사항이 있으면 오늘 마지막 실험실을 방문하십시오.
 우리가 도와주고 있습니다.
 시간 내 줘서 고마워.
 이제 나가서 효과적이십시오.

안녕하세요. 좋은 오후입니다.
 자연어 처리에 관한 우리 세션에 오신 것을 환영합니다.
 오늘 많은 분들이 참석하게되어 매우 기쁩니다. NLP 공간에서 새롭고 멋진 기능에 대해 알려 드리게되어 대단히 기쁩니다.
 나는 비벡 (Vivek)이고, 나는이 세션을 내 동료 인 더그 데이비슨 (Doug Davidson)과 공동으로 발표 할 것입니다.
 시작하자.
 작년에 앱 센터 무대를 마련하고 앱을 더 똑똑하고 지능적으로 만들 수있는 NLP의 힘을 어떻게 활용할 수 있는지 설명했습니다.
 우리는 NSLinguisticTagger에서 사용할 수있는 NLP API를 안내함으로써이 작업을 수행했습니다.
 NSLinguisticTagger는 NLP의 기본 구성 요소를 제공하는 클래스와 토대입니다.
 언어 식별에서부터 조직, 품사 표기 등 모든 것.
 우리는 NSLinguisticTagger에서 언어학과 기계 학습을 자연스럽게 혼합함으로써이 목표를 달성했습니다.
 따라서 개발자는 이러한 API를 사용하고 작업에 집중할 수 있습니다.
 모든게 훌륭합니다.
 올해 NLP의 새로운 기능은 무엇입니까? 자연어라는 NLP를위한 새로운 프레임 워크가 있음을 발표하게되어 매우 기쁩니다.
 NLP는 이제 모든 Apple 플랫폼에서 장치의 NLP를 수행하는 원 스톱 숍이 될 것입니다.
 자연 언어는 정말 멋진 기능을 가지고 있으며 각각에 대해 이야기 해 보겠습니다.
 첫째, API 표면이 완전히 새롭게 디자인되었으므로 NSLinguisticTagger가 사용하던 기능을 여전히 지원하지만 실제로는 정말 Swift API를 지원합니다.
 하지만 그렇지 않습니다.
 이제 사용자 지정 NLP 모델을 지원합니다.
 이들은 ML 생성을 사용하여 생성하고 Code ML API 또는 Natural Language를 사용하여 모델을 배포 할 수있는 모델입니다.
 자연어로 지원되는 모든 것이 NLP를 학습하는 모든 기계의 성능이 뛰어납니다.
 Apple 하드웨어 및 모델 크기에 최적화되어 있습니다.
 그리고 마지막으로 모든 것이 완전히 사적인 것입니다.
 자연 언어로 구동되는 NLP에서 학습하는 모든 기계는 사용자의 개인 정보를 보호하기 위해 장치에서 수행됩니다.
 이는 Apple에서 자체 기능을 위해 NLP를 장치에 사용하는 것과 똑같은 기술입니다.
 그럼 자연 언어의 이러한 각 기능에 대해 이야기하겠습니다.
 Swift API부터 시작하겠습니다.
 앞서 언급했듯이 Natural Language는 NSLinguisticTagger가 수행하는 모든 기본 구성 요소를 지원하지만 훨씬 더 쉽고 간편하게 API를 사용할 수 있습니다.
 이러한 API 중 일부를 제공하고이를 검토하기 위해 가상의 앱으로 설명해 보겠습니다.
 그래서 우리가 여기있는 첫 번째 앱은 작성한 앱이며, 앱의 일부로 소셜 메시징 또는 P2P (peer-to-peer) 메시징 기능을 사용할 수 있습니다.
 그리고이 앱의 애드온 기능은 올바른 스티커를 보여줄 수있는 기능입니다.
 그래서 메시지의 내용을 기반으로합니다.이 경우는 "늦어지고 있습니다. 나는 피곤합니다. 내일 아침에 잘 자러 갈 것입니다.
"앱에 적절한 스티커가 표시됩니다.
 당신은이 텍스트를 분석하고 스티커를 가져옵니다.
 사용자는이를 첨부하여 응답으로 보낼 수 있습니다.
 그래서이 모든 것이 훌륭합니다.
 이 응용 프로그램은 정말 잘하고 있습니다.
 격렬한 평가를 받고 있습니다.
 그러나 앱이 다국어가 아니라는 의견을받습니다.
 요즘에는 사용자가 이중 언어를 사용합니다.
 그들은 여러 다른 언어로 의사 소통하는 경향이 있으며, 앱이 중국어로 메시지를 받으면 무엇을해야할지 모릅니다.
 그렇다면이 문제를 극복하기 위해 어떻게 자연 언어를 사용할 수 있습니까? 두 개의 서로 다른 API에 대한 두 번의 간단한 호출을 통해이를 수행 할 수 있습니다.
 첫 번째는 언어 식별입니다.
 새로운 Natural Language 프레임 워크를 사용하면 자연 언어를 가져 오기 시작합니다.
 NLLanguageRecognizer 클래스의 인스턴스를 만듭니다.
 처리하려는 문자열을 첨부하고 dominant language API를 호출하기 만하면됩니다.
 이제 이것은 문자열에 대한 언어 측면에서 최고의 단일 가설을 반환합니다.
 따라서 여기 출력은 기본적으로 중국어 간체입니다.
 현재 Natural Language에서는 새로운 API를 지원합니다.
 특정 문자열에 대한 최상위 가설을 알고 싶은 경우가 있습니다.
 따라서 가장 유사한 언어와 관련 확률을 알고 싶습니다.
 그래서 다국어가 많이 필요한 여러 다른 응용 프로그램에서 이것을 사용하는 것을 상상할 수 있습니다. 가장 중요한 가설이 될 수있는 여지를 원하는 것입니다.
 따라서 Language Hypotheses라는 새로운 API로이 작업을 수행 할 수 있습니다.
 원하는 언어의 최대 개수를 지정할 수 있으며, 다시 얻을 수있는 것은 최상위 언어와 관련 확률을 가진 개체입니다.
 이제이 중국어 텍스트를 토큰 화하기 위해 패턴이 매우 유사하다는 것을 다시 볼 수 있습니다.
 다시 자연어를 가져옵니다.
 NLTokenizer의 인스턴스를 만들고이 특정 인스턴스에서 문자열을 단어로 토큰 화하기 때문에 단어 단위로 지정합니다.

문자열을 첨부하면 객체의 문자열에서 tokens 메서드를 호출하기 만하면됩니다.
 그리고 당신이 얻는 것은 토큰 배열입니다.
 이제이 토큰 배열을 사용하면 여기에 특정 토큰을 찾아 볼 수 있으며, 앱에서 다국어 지원을받을 수 있습니다.
 이제 앱에서 언어 식별 및 토큰 화 API에 대한 간단한 호출로 중국어를 지원할 수 있습니다.
 이제는 다른 종류의 API를 살펴 보겠습니다.
 언어 식별 및 토큰 화는 좋지만 자동 음성 태그 지정, 엔티티 인식이라는 이름을 사용하는 등의 작업을하고 싶습니다.
 따라서 가상 엔디드 응용 프로그램에서 명명 된 엔티티 인식 API를 다시 사용하는 방법을 설명하겠습니다.
 여기 앱이 있습니다.
 뉴스 추천 앱입니다.
 이 앱의 일부로 사용자는 왕실 결혼식에 대해 많은 것을 읽었으며 정말 호기심이 많은 사용자입니다.
 그들은 왕의 결혼식에 관한 모든 것을 찾고 싶어합니다.
 그래서 그들은 앱에서 많은 페이지를 읽은 다음 검색 창으로 이동하고 해리를 입력합니다.
 그리고 그들이 보는 것은 그들이 찾고 있었던 것과 관련이없는 완전히 사물입니다.
 당신은 해리 포터 등을 얻습니다.
 왕실 결혼식과 관련있는 해리 왕자가보고 싶습니다.
 이제는 이름 엔티티 인식 API를 사용하여 앱에서이 문제를 극복 할 수 있습니다.
 앞서 언급했듯이 여기의 구문은 매우 익숙합니다.
 NSLinguisticTagger를 사용하는 데 익숙한 사람들은 친숙하고 익숙해 져야하지만 기억하고 사용하는 것이 훨씬 쉽습니다.
 자연 언어를 가져옵니다.
 이제 NLTagger의 인스턴스를 만들고 이름 유형으로 스키마 유형을 지정합니다.
 품사 태깅의 일부를 원할 경우, 어휘 유형이되도록 스킴 유형을 지정합니다.
 처리 할 문자열을 다시 지정합니다.
 이 특별한 경우에는 언어를 지정하여 언어를 영어로 설정합니다.
 따라서 익숙하지 않거나 언어가 무엇인지 확실하지 않으면 Natural Language는 자동으로 언어 인식 API를 사용하여 언어를 인식합니다.
 마지막으로, 방금 만든이 객체에 대해 tags 메서드를 호출합니다.
 단위를 단어로 지정하고 스키마를 이름 유형으로 지정합니다.
 그리고 출력물로 얻는 것은 여기에있는 사람 이름 인 Harry Prince와 Meghan Markle이며 Windsor가 될 위치입니다.
 이제 사용자가 검색 한 내용의 상황에 맞는 정보를 기반으로 검색 창으로 돌아 가면 앱의 검색 환경을 크게 향상시킬 수 있습니다.
 따라서이 API를 사용하는 방법에 대한 더 많은 정보가 있습니다.
 개발자 문서로 이동하여 자세한 정보를 찾을 수 있습니다.
 여기서 강조하고 싶은 것은 NSLinguisticTagger가 여전히 지원되지만 NLP의 미래는 Natural Language입니다.
 따라서이 프레임 워크에서 NLP의 모든 최신 기능을 사용할 수 있도록 자연어로 이동하는 것이 좋습니다.
 이제 기어를 바꾸고 앱에 대한 아이디어가있는 상황을 보거나 자연 언어가 지원하지 않는 앱 내 기능이 필요합니다.
 너 뭐하니? 따라서 여러분은 분명히 무언가를 만들 수 있습니다. 훌륭한 것이지만, 그렇게 쉽게 할 수있는 도구를 주면 어떨까요? 커스텀 NLP 모델에 대해 이야기하고 Create ML을 사용하여 커스텀 NLP 모델을 구축하는 방법과 본질적으로 코드 ML 모델 인 후속 모델을 Doug Davidson에게 넘겨 줄 것입니다.
  Vivek에게 감사드립니다.
 그래서 저는 새로운 Natural Language 프레임 워크에 대해 매우 기쁩니다.하지만 가장 흥분되는 부분은 사용자 정의 모델을 묘사하고 사용하는 것입니다.
 왜 그런데? 앱에 대해 잠시 생각해 보시고, 작성한 앱이나 작성하고 싶은 앱에 대해 잠시 생각해보고, 앱에 대해 조금만 알고 계시다면 어떻게 사용자 경험을 개선 할 수 있을지 생각해 주셨으면합니다. 그들이 다루는 텍스트.
 그런 다음 텍스트 분석 방법에 대해 잠시 생각해보십시오.
 어쩌면 텍스트의 몇 가지 예를 살펴보고 그 내용을 배우고 그 결과를 이해 한 다음 텍스트를 볼 수 있습니다. 그리고 한눈에 텍스트를 볼 수 있습니다. 그것.
 글쎄, 그렇다면 최소한 자동 학습 모델을 훈련 시켜서 자동으로 앱의 분석을 수행 할 수있는 합리적인 기회가 주어집니다. 훈련을 통해 학습하고 모델을 생성 할 수있는 예제를 제공합니다. 그 분석을 할 수 있습니다.
 이제는 NLP를위한 여러 가지 유형의 기계 학습 모델이 있으며 다양한 교육 방법이 있습니다.
 아마도 여러분 중 많은 사람들이 이미 기계 학습 모델을 교육하고있을 것입니다. 그러나 여기서 우리의 임무는 이런 종류의 교육을 정말 쉽고 자연스러운 언어 프레임 워크 및 API와 정말 잘 통합 할 수있는 방법을 만드는 것입니다.

이를 염두에두고 우리는 광범위한 기능을 지원하고 텍스트 조각에 레이블을 적용하는 NLTagger의 패러다임과 잘 어울리는 두 가지 유형의 모델을 지원합니다.
 따라서 우리가 지원하는 모델 중 첫 번째는 텍스트 분류 자입니다.
 텍스트 분류자는 텍스트, 단락 또는 전체 문서 일 수 있으며 텍스트에 레이블을 적용합니다.
 기존 API의 예로는 언어 식별, 스크립트 식별 등이 있습니다.
 우리가 지원하는 두 번째 유형의 모델은 단어 태그 지정자이며 단어 태그 지정자는 일련의 단어로 간주되는 문장을 취한 다음 문맥에서 문장의 각 단어에 레이블을 적용합니다. 기존 API의 예로는 음성 태그 지정 엔티티 인식 기능을 제공합니다.
 그러나 그것들은 이러한 종류의 모델의 일반적인 용도의 일종입니다.
 특정 애플리케이션에 특수 목적 모델을 사용하면 훨씬 더 많은 작업을 수행 할 수 있습니다.
 가상의 예를 보여 드리겠습니다.
 따라서 텍스트 분류의 경우 사용자 리뷰를 다루고 있다고 가정하고 주어진 리뷰가 긍정적 인 리뷰인지 아니면 부정적인 리뷰인지 또는 그 중간에 있는지 자동으로 알기를 원합니다.
 글쎄, 이것은 텍스트 분류자를 훈련시킬 수있는 일종의 일입니다.
 이것은 감정 분류입니다.
 또는 기사 요약이나 기사 요약 또는 어쩌면 기사 헤드 라인이 있고 자신이 좋아하는 주제 분류 체계에 따라 자신이 속한 주제를 자동으로 결정하고 싶다고 가정 해보십시오.
 이것은 다시 당신을 위해 텍스트 분류자를 훈련시킬 수있는 일종의 것입니다.
 아니면 좀 더 나아가서, 자동 여행사를 만들고 있다고 가정 해 봅시다. 클라이언트로부터 요청을 받으면 가장 먼저 알고 싶은 것은 그들이 무엇에 대해 물어 보는 것입니까? 호텔, 식당 또는 항공편 또는 기타 처리하는 것입니까?
 이것은 당신을 위해 텍스트 분류자를 훈련시킬 수있는 일종의 것입니다.
 단어 태그 지정으로 이동합니다.
 따라서 우리는 다양한 언어에 대해 음성 태그 지정을하는 단어 태그 작성자를 제공하지만, 아직 지원하지 않는 일부 언어에 대해 음성 태그 지정을해야 할 필요가 있다고 가정합니다.
 글쎄요, 커스텀 모델을 지원하면, 워드 타거를 훈련 시켜서 할 수 있습니다.
 또는 명명 된 엔티티 인식.
 따라서 우리는 사람과 장소와 조직의 이름을 인식하는 내장 된 엔티티 인식 기능을 제공합니다. 그러나 지금 당장은 지원하지 않는 것에 관심이있는 다른 종류의 이름이 있다고 가정합니다.
 예를 들어, 제품 이름과 같습니다.
 따라서 사용자 지정 엔티티 인식기를 사용자가 특별히 관심이있는 어떤 종류의 이름이나 다른 용어를 인식 할 수있는 단어 태그 지정자로 교육 할 수 있습니다.
 또한 자동 여행사의 경우 사용자가 물어 보는 내용을 알게되면 다음으로 알고 싶은 것은 요청시 관련 용어가 무엇인지 파악하는 것입니다.
 예를 들어, 비행 요청 인 경우.
 그들은 어디로 가고 싶은가요? 따라서 단어 태그 지정자는 문장에서 다양한 용어를 식별 할 수 있습니다.
 또는 문장을 가져 와서 구, 명사구, 동사구, 명사구로 나눌 필요가있는 다른 응용 프로그램.
 적절한 종류의 라벨링을 사용하면 단어장에서이를 수행하도록 교육 할 수 있으며 라벨 작업, 텍스트 부분에 라벨 적용, 순서에 따른 단어 또는 텍스트의 덩어리로 다양한 작업을 표현할 수 있습니다. 텍스트 분류 자.
 그래서 이들은 감독 된 기계 학습 모델이므로 항상 두 단계가 관련되어 있습니다.
 첫 단계는 훈련이고, 두 번째 단계는 추론입니다.
 교육은 개발 프로세스의 일부로 수행합니다.
 레이블이 지정된 교육 데이터를 가져 와서 ML 작성에 제공하고 모델을 생성합니다.
 그런 다음 추론은 사용자가 일부 데이터를 만났을 때 런타임에 해당 모델을 애플리케이션에 통합 한 다음 해당 데이터를 분석하고 이에 대한 적절한 레이블을 예측할 때 앱에서 발생합니다.
 이러한 단계가 어떻게 작동하는지 살펴 보겠습니다.
 먼저 교육을 시작하고 교육은 항상 데이터로 시작합니다.
 훈련 데이터를 가져온 다음이 경우에 피드를 입력하십시오. 놀이터에서 ML 만들기 ML 세션에서 보았 듯이 말하거나 스크립트 [들리지 않음]을 말하십시오.
 Create ML은 교육을 수행하기 위해 자연 언어 프레임 워크를 호출하며, 나오는 것은 장치에서 사용하도록 최적화 된 핵심 ML 모델입니다.
 이제이 데이터의 모습을 살펴 보겠습니다.
 따라서 Create ML은 다양한 데이터 형식을 지원합니다.
 바로 여기에서 JSON은 데이터를 완벽하게 보여주기 때문에 JSON으로 데이터를 표시합니다.이 데이터는 침전물 분류자인 텍스트 분류자를위한 교육 데이터입니다.
 그래서이 훈련 예는 두 부분으로 구성된 텍스트 덩어리와 그에 대한 적절한 레이블로 구성됩니다.
 예를 들어 긍정적 인 문장이므로 레이블이 양수이지만 원하는 레이블 집합을 선택할 수 있습니다.

이제 Create ML을 사용하기 시작할 때 Create ML은 단 몇 줄의 코드로 모델을 훈련시키는 매우 간단한 방법을 제공합니다.
 첫 번째 줄에서는 JSON 파일에서 교육 데이터를로드합니다.
 따라서 JSON 파일에 대한 URL을 제공하고 Create XML 데이터 테이블을 만듭니다.
 그런 다음 한 줄의 코드에서이 데이터로 텍스트 분류기를 만들고 작성하십시오.
 말해야 할 것은 필드 이름, 텍스트 및 레이블이 무엇인지 알려주고 코드를 한 번만 작성하면 해당 모델을 디스크에 씁니다.
 이제 Word Tagger를 교육하면 매우 유사합니다.
 각 예제는 단일 텍스트가 아니기 때문에 데이터가 조금 더 복잡합니다.
 그것은 일련의 토큰이며, 레이블은 다시 일련의 레이블, 같은 수의 레이블, 각 토큰에 대한 레이블입니다.
 예를 들어 신원 확인에 이름을 지정하는 Word Tagger에 대한 교육 데이터가 있습니다. 각 단어, 각 토큰에는 레이블이 있습니다. 이름이 없거나 이름이 아니거나 조직이거나 조직 이름 또는 제품이거나 제품 이름 또는 인식하고있는 이름의 종류에 상관없이 다른 여러 가지 다른 레이블을 사용할 수 있습니다.
 따라서 각 토큰에는 레이블이 있으며 각 샘플은 하나의 토큰 시퀀스와 해당 레이블로 구성됩니다.
 그리고 ML을 만들어내는 것은 거의 동일합니다.
 교육 데이터를 JSON의 데이터 테이블에로드합니다.
 그런 다음 텍스트 분류기 대신 Word Tagger를 만들고 훈련 한 다음 디스크에 기록합니다.
 이제 Create ML에서 사용할 수있는 여러 가지 옵션과 API가 있습니다.
 나는 어제 일어난 ML 세션 생성을 살펴보고, ML에 대한 더 자세한 정보를 얻으시기 바랍니다.
 자, 일단 모델을 가지고 나면 추론 부분으로갑니다.
 따라서 모델을 가져 와서 Xcode 프로젝트로 드래그합니다.
 Xcode가이를 컴파일하고 애플리케이션 리소스에 포함시킨 다음 런타임에 무엇을합니까? 코어 ML 모델입니다.
 다른 Core ML 모델과 마찬가지로 사용할 수 있지만 흥미로운 점은 이러한 모델이 NLP의 기존 기능을 제공하는 내장 모델과 마찬가지로 Natural Language API와 잘 작동한다는 것입니다.
 따라서 데이터가 발생합니다.
 Natural Language로 전달하면 모델을 사용하고 모든 레이블을 제거한 다음 레이블, 분류 자의 단일 레이블 또는 태그 지정자의 레이블 시퀀스를 다시 전달하는 데 필요한 모든 작업을 수행합니다.
 그렇다면 Natural Language API에서 어떻게합니까? 가장 먼저해야 할 일은 응용 프로그램의 리소스에서 해당 모델을 찾은 다음 ML 모델이라는 자연 언어로 클래스의 인스턴스를 만듭니다.
 그리고 최소한, 분류자를 위해 할 수있는 가장 간단한 일은 텍스트 덩어리로 전달하고 레이블을 출력하는 것입니다.
 그러나 더 흥미로운 점은 NLTagger를 사용하여 기존 모델에 내장 된 모델을 사용하는 것과 똑같은 방식으로이 모델을 사용할 수 있다는 것입니다.
 그럼 어떻게 작동하는지 보여 드리겠습니다.
 지명 된 식별 인식 음성 부분과 같은 것에 대해 가지고있는 기존의 태그 체계 외에도, 사용자 정의 태그 체계를 작성하고 이름을 부여한 다음 여러 가지 다른 태그 체계를 포함하는 태그 작성기를 작성할 수 있습니다 .
 맞춤 태그 구성표 또는 기본 제공 태그 구성표 또는 그 중 하나만 있으면 맞춤 태그 구성표에 맞춤 모델을 사용하도록 태그 지정자에게 알리는 것뿐입니다.
 그리고 그냥 정상적으로 사용하십시오.
 문자열을 태그 지정자에 연결하면 특정 모델에 적합한 텍스트 단위에 해당하는 태그를 찾아 볼 수 있으며, 태그 작성기는 자동으로 모델을 호출하여 태그를 가져와 태그를 사용자에게 반환합니다 언어 식별, 토큰 화 등과 같이 NLTagger가 자동으로 수행하는 모든 작업을 수행합니다.
 그래서 간단한 가상의 예제에서 이것을 보여 드리고자합니다.
 그리고이 가상의 예는 사용자가 건너 뛰었을 수도있는 기사에 북마크를 저장하고 나중에 읽으려고하는 앱입니다.
 그러나 현재이 응용 프로그램의 문제점은 북마크 목록이 조직이없는 하나의 긴 목록에 불과하다는 것입니다.
 이 기사를 자동으로 분류하여 주제에 따라 조직에 넣을 수 있다면 좋지 않을까요? 음, 우리는 분류 자에게 우리를 위해 그렇게하도록 훈련시킬 수 있습니다.
 그리고 다른 것은 기사를 볼 때 텍스트가 길다는 것입니다.
 어쩌면 예제 이름과 같은 기사에서 흥미로운 점을 강조하고 싶을 것입니다.
 우리는 사람, 장소 및 조직의 이름에 대해 고유 한 이름 인식 기능을 제공했지만 제품 이름을 강조하기 위해 사용자 지정 단어 태그를 지정하여 해당 이름을 식별 할 수있었습니다.
 그래서 데모 머신으로 가보겠습니다.
 자연어 처리를 적용하기 전에 우리의 응용 프로그램을 그대로 사용하십시오.

보시다시피 측면에 기사가 하나씩 나와 오른쪽에 기사가 많이 있습니다.
 그럼 고쳐 주자.
 그럼, 들어가겠습니다 - 모델을 훈련하는 첫 부분은 데이터이고, 다행스럽게도 필자는 Apple에 두 가지 모델을 훈련시키는 데 필요한 몇 가지 교육 데이터를 수집 한 열심히 일하는 동료 몇 명을 보유하고 있습니다.
 첫 번째 모델은 주제에 따라 기사를 분류 할 텍스트 분류기입니다.
 이것이 교육 자료의 모습입니다.
 각 교육 예제는 텍스트 덩어리이며 주제, 엔터테인먼트, 정치, 스포츠 등의 적절한 레이블입니다.
 또한 문장에서 제품 이름을 인식하는 단어 태그 지정자를 교육하기위한 교육 자료가 있습니다.
 따라서이 교육 데이터는 매우 간단합니다.
 각 예는 일련의 토큰과 일련의 레이블로 간주되는 문장으로 구성되며 각 레이블은 none이거나 제품 이름이 아니거나 prod라는 제품 이름입니다.
 자, 이것들을 가지고 훈련 시키자.
 그래서 내가하고 싶은 일은 내가 ML 만들기를 사용하는 놀이터를 들고이 놀이터가 방금로드됩니다.
 이 경우이 제품은 내 제품 단어 태그입니다.
 트레이닝 데이터를로드하고, 워드 태그 생성기를 만들어 디스크에 기록합니다.
 그러니 제발 그 불을 끄고 달리기 시작합시다.
 그것은 데이터를로드 했으므로 본질적으로 모든 토큰 화, 즉 특징 추출을 자동으로 처리합니다.
 우리는 훈련을한다.
 이것은 꽤 작은 모델이므로, 훈련이 오래 걸리지는 않습니다. 모델을 내 바탕 화면에 자동으로 작성하도록 설정했습니다.
 괜찮아.
 그래서 그것은 하나의 모델입니다.
 이제 여기에 텍스트 분류기를 훈련시키는 또 다른 놀이터가 있습니다.
 보시다시피, 매우 비슷해 보입니다.
 교육 데이터를로드하고 텍스트 분류기를 작성한 다음 디스크에 기록하십시오.
 그래서 나는 그것을 시작한다.
 다시 말하지만 자동 자연 언어가 모든 데이터를로드하고 토큰 화하며 그로부터 기능을 추출합니다.
 이것은 조금 더 큰 모델입니다.
 훈련하는 데 몇 분이 걸립니다.
 그러니 그냥 풀어 보자. 그 동안 런타임에 이들 코드를 사용해야하는 코드를 살펴 보자.
 그래서 저는 런타임에해야 할 일을하기 위해 아주 작은 두 개의 클래스를 작성했습니다.
 첫 번째 방법은 텍스트 분류기를 사용하여 내 앱 리소스에서 해당 모델을 찾아서이를위한 NL 모델을 만드는 것입니다.
 그리고 제가 기사를 가로 질렀을 때, 그 모델에 그 기사에 대한 예측 된 레이블을 물어 보았습니다. 그리고 그게 전부입니다.
 내 단어장을 사용하기위한 코드가 약간 더 있습니다.
 따라서 이전에 본 것처럼 제품 이름 인식을위한 맞춤 태그 체계가 있으며 실제로 관심이있는 태그는 제품 태그뿐입니다.
 그래서 나는 그것에 대한 커스텀 태그를 만든다.
 다시 말하지만, 번들 리소스에서 모델을 찾아 NL 모델을 만든 다음 NLTagger를 만들어야합니다.이 NLTagger는 두 가지 스키마를 지정합니다.
 첫 번째는 이름 인식을위한 내장 된 이름 유형 체계이며, 두 번째는 내 사용자 정의 제품 태그 체계이며, 둘 다 똑같은 방식으로 작동합니다.
 그런 다음 사용자 지정 구성표에 내 사용자 지정 모델을 사용하도록 해당 태그 지정자에게 지시해야합니다.
 이제 여러 언어를 지원하는 경우이 스키마에 대해 하나 이상의 모델을 사용할 수 있습니다.
 그리고 나서 제가 할 일은이 기사의 텍스트를 강조하는 것입니다.이 텍스트는 한 가지 또는 다른 이름으로 결정됩니다.
 따라서 가변 속성 문자열을 얻고 속성을 추가 할 것입니다.
 그래서이 가변 문자열의 문자열을 가져 와서 태그러에 첨부하고 태그를 통해 몇 가지 열거를 수행 할 것입니다.
 첫 번째 방법은 사람, 장소 및 조직의 이름 인식에 기본 제공되는 이름 유형 체계를 사용하며, 사람이나 장소 또는 조직으로 태그가 지정된 항목을 발견하면 해당 항목에 특성을 추가합니다. 어떤 색깔을 줄 것입니다.
 그리고 우리는 우리의 커스텀 모델로 똑같은 일을 할 수 있습니다.
 맞춤형 제품 태그 체계를 사용하여 열거하고,이 경우 맞춤형 제품 태그로 라벨이 지정된 항목을 찾으면 동일한 방식으로 색상을 추가 할 수 있습니다.
 따라서 기본 제공 모델을 사용하는 것과 동일한 방식으로 Natural Language API를 사용하여 사용자 지정 모델을 사용할 수 있습니다.
 이제 놀이터로 돌아가 모델 훈련이 끝났음을 확인하고 실제로 두 가지 모델이 내 데스크톱에 표시됩니다.
 그래서 내가 할 일은 그것들을 내 응용 프로그램으로 끌어 넣는 것뿐입니다.
 이걸 가져 와서 오른쪽으로 드래그 해 봅시다.
 괜찮아.
 이 코드를 가져 와서 드래그하면 Xcode가이를 자동으로 컴파일하여 응용 프로그램에 포함시킵니다.
 그래서 내가해야 할 일은 그것을 만들고 실행하는 것뿐입니다.
 그리고 그것을 숨기 자.

여기에 새로운 응용 프로그램이 있습니다. 내 기사 목록이 모두 주제별로 깔끔하게 정렬된다는 것을 알 수 있습니다. 내가이 기사 중 하나를 살펴보면 이름이 강조 표시되어 있음을 알 수 있습니다. 우리는 내장 된 이름 인식을 사용하여 사람, 장소 및 조직의 이름을 강조 표시하지만 더 자세히 살펴보면 사용자 정의 제품 태그 지정자를 사용하여 다음과 같은 제품 이름을 강조 표시 한 것을 볼 수 있습니다 iPad, MacBook, iPad mini 등.
 그래서 이것은 자신 만의 커스텀 모델을 훈련하고 자연어 API와 함께 사용하는 것이 얼마나 쉬운지를 보여줍니다.
 이제는 비벡 (Vivek)으로 되돌아 가서 훈련 모델에 대한 몇 가지 중요한 고려 사항에 대해 이야기 할 것입니다.
 Doug,이 맞춤형 NLP 모델을 사용하는 방법에 대해 알려 주셔서 감사합니다.
 우리는 자연어와 Create ML 및 Core ML [들리지 않음]을 매우 긴밀하게 통합 한 것을 매우 기쁘게 생각하며,이 새로운 API로 당신이 정말로 믿을 수없는 일을하기를 바랍니다.
 그래서 저는 다시 주목하고 성과에 대해 이야기하고 싶습니다.
 앞서 언급했듯이 Natural Language는 모든 Apple 플랫폼에서 사용할 수 있으며 표준 텍스트 처리라고 부르는 것을 제공합니다.
 이제 우리가 의미하는 바를 다시 한번 이해해 봅시다.
 이제 Create ML을 사용하지 않는 전통적인 기계 학습 파이프 라인을 살펴 보려면 어디서부터 시작해야할까요? 어느 정도의 교육 데이터로 시작합니다.
 이 훈련 데이터를 가져 가야합니다.
 이 데이터를 토큰 화합니다.
 아마도 몇 가지 기능을 추출 할 것입니다.
 이것은 토큰 화가 매우 중요한 중국어 및 일본어와 같은 언어에서 매우 중요합니다.
 당신은 그것을 좋아하는 기계 학습 툴킷으로 던질 것이고, 당신은 기계 학습 모델을 얻을 것입니다.
 이제는 Apple 기기에서이 기계 학습 모델을 사용하려면이를 Core ML 모델로 변환해야합니다.
 그럼 어떻게 할거 니? 코어 ML 변환기를 사용하면됩니다.
 이것은 데이터에서 모델로 이동하여 Apple 디바이스에 배포하기위한 교육 과정의 일종입니다.
 이제 유추 시간에, 당신이하는 일은 당신의 앱에 모델을 떨어 뜨리는 것입니다.하지만 그렇지 않습니다.
 또한 훈련 시간에 발생한 것과 일치하는 토큰 화 및 피쳐 추출을위한 코드를 작성해야합니다.
 모델의 충실도를 최대화하는 것에 대해 생각해야하기 때문에 많은 노력이 필요합니다.
 토큰 화 기능 추출이 교육 및 추론 시간 모두에서 동일하다는 것이 절대적으로 중요합니다.
 그러나 이제 자연 언어를 사용하면 완전히 제거 할 수 있습니다.
 따라서 훈련 시간에 시퀀스를 보면 훈련 데이터가 있습니다.
 지금까지 논의한 API를 통해 ML 생성에 전달합니다.
 후드 아래에서 토큰 화 기능 추출을 수행하고 기계 학습 라이브러리를 선택하며 모든 작업을 수행하고 Core ML 모델 인 모델을 반환하는 ML 호출 자연 언어를 호출합니다.
 이제 유추 시간에, 당신은 여전히 ​​당신의 앱에이 모델을 드롭하지만 토큰 화 기능 추출이나 다른 것에 대해 걱정할 필요가 없습니다.
 사실 자연 언어가 모든 것을 처리하기 때문에 한 줄의 코드를 작성할 필요가 없습니다.
 앱과 작업에만 집중하고 모델을 끌어서 놓기 만하면됩니다.
 앞에서 언급 한 Natural Language의 다른 측면은 Apple 하드웨어 및 모델 크기에 최적화 된 것입니다.
 이제 몇 가지 예제를 통해이를 살펴 보겠습니다.
 따라서 Doug은 명명 된 엔티티 인식 및 덩어리에 대해 이야기했으며 두 가지 벤치 마크가 있습니다.
 그래서 이들은 CRF Suite라는 오픈 소스 툴킷과 Natural Language를 통해 구축 한 모델입니다.
 모델은 동일한 교육 데이터로 구축되었으며 동일한 테스트 데이터에서 테스트되었습니다.
 같은 종류의 기능이 사용되었습니다.
 두 모델에서 얻은 정확도는 같습니다.
 하지만 자연 언어에서 생성 할 수있는 모델 크기를 살펴 보겠습니다.
 그것은 단지 약 1입니다.
네 바이트의 데이터 크기, 명명 된 엔티티 인식을위한 모델 크기 및 1.
청킹을 위해 8 메가 바이트.
 이렇게하면 앱 내에서 엄청난 양의 공간을 절약 할 수 있습니다.
 기계 학습 알고리즘 측면에서 우리는 두 가지 옵션을 지원합니다.
 우리는 이것을 텍스트 분류에 지정할 수 있습니다.
 따라서 텍스트 분류의 경우 두 가지 선택 사항이 있습니다.
 하나는 maxEnt이며, 이것은 Maximum Entropy의 약자입니다.
 NLP에서 maxEnt는 본질적으로 다항 로지스틱 회귀 모델입니다.
 NLP 피드에서 Maximum Entropy라고 부릅니다.
 다른 하나는 조건부 임의 피드의 약어 인 CRF입니다.
 이 두 알고리즘의 선택은 실제로 당신의 임무에 달려 있습니다.
 따라서 우리는이 두 가지 옵션을 시도하고 모델을 구축하는 것이 좋습니다.
 이제는 단어 태그 지정과 관련하여 하나의 기본 옵션 인 조건부 무작위 피드입니다.

ML 워드 태그를 인스턴스화 할 때 데이터를 지정하면 기본 모델은 조건부 임의 피드입니다.
 이제 제가 언급했듯이, 이러한 알고리즘의 선택은 당신의 과제에 달려 있지만, 제가 강조하고 싶은 것은 전통적인 개발 프로세스 사이에서 일종의 무연 (undaudible)입니다.
 따라서 앱 아이디어가 있으면 개발주기를 거치게됩니다.
 따라서 기계 학습이 매우 유사한 작업 흐름이라고 생각할 수 있습니다.
 어디서부터 시작하고, 데이터로 시작한 다음 데이터를 가지고 있는지, 몇 가지 질문을해야합니다.
 교육 자료를 검증해야합니다.
 데이터에 위조 된 예제가 없는지 확인하고 오염되지 않았는지 확인해야합니다.
 일단 그렇게하면 클래스 당 교육 인스턴스 수를 검사 할 수 있습니다.
 감정 분류 모델을 훈련하고 긍정적 인 감정에 대한 수천 가지 사례가 있다고 가정 해 보겠습니다. 부정적인 감정에 대한 5 가지 예가 있습니다.
 두 클래스를 구분하거나 구분할 수있는 견고한 모델을 교육 할 수는 없습니다.
 각 클래스에 대한 교육 샘플이 합리적으로 균형을 유지하는지 확인해야합니다.
 따라서 데이터로 처리하면 다음 단계는 교육입니다.
 앞에서 언급했듯이 사용 가능한 여러 가지 옵션을 실행하고 좋은 점을 파악하는 것이 좋습니다. 그러나 좋은 점을 정의하는 방법은 무엇입니까? 당신은 당신의 어플리케이션에 맞는 것을 알아 내기 위해 모델을 평가해야합니다.
 작업 흐름의 다음 단계는 평가입니다.
 컨벤션에서 기계 학습을위한 평가는 훈련 데이터를 조달 할 때 교육 세트, 검증 세트 및 테스트 세트로 데이터를 분리하고 일반적으로 유효성 검사 세트를 사용하여 알고리즘의 매개 변수를 조정한다는 것입니다 테스트 세트에서 테스트합니다.
 따라서 우리는 여러분이 똑같은 일을하기를 권장합니다. 오랫동안 기계 학습에 서 있었던 것과 동일한 종류의 지침을 적용하십시오.
 우리가 권장하는 또 다른 사항은 도메인 외부 데이터를 테스트하는 것입니다.
 이게 무슨 뜻이야? 따라서 앱에 대한 아이디어가 있다면 기계 학습 모델에 의해 섭취 될 특정 유형의 데이터를 생각할 것입니다.
 이제 호텔 리뷰 용 앱을 제작하고 호텔 리뷰를 여러 종류의 등급으로 분류하려고한다고 가정 해 보겠습니다.
 그리고 사용자는 완전히 도메인 외부에있는 데이터를 던집니다.
 아마도 식당 리뷰 나 영화 리뷰와 관련이 있을지 모르지만 그걸 처리 할 수있을 정도로 견고한 모델입니다.
 그것은 당신이 스스로에게해야 할 질문입니다.
 마지막 단계는 패치를 작성하고 버그를 수정하며 앱을 업데이트하는 기존의 개발 워크 플로에 잘 맞습니다.
 기계 학습으로 어떻게 그 일을합니까? 음, 기계 학습을 통해 문제를 해결하거나 모델을 수행하는 방법은 모델이 제대로 수행되지 않는 부분을 찾아서 올바른 유형의 데이터로 보완해야합니다.
 데이터를 추가하고 모델을 재교육함으로써 근본적으로 새로운 모델을 얻을 수 있습니다.
 제가 언급했듯이, 그것은 개발 워크 플로우와 매우 흡사합니다. 그리고 그들은 [안 들림]합니다.
 따라서 기계 학습 모델을 앱의 일부로 사용하는 경우이 기능을 패브릭의 일부로 생각할 수 있습니다.이 기능을 컴퓨터 프로세스 자체와 결합하면됩니다.
 여기서 강조하고자하는 마지막 사항은 개인 정보 보호 정책입니다.
 이 세션에서 보았던 모든 것들, 기계 학습과 자연어 처리는 모두 기기에서 일어납니다.
 따라서 Apple은 사생활을 매우 중요하게 여기며, 이는 사용자의 개인 정보를 보호하기 위해 기기에서 완전히 배우는 기계를 사용하는 놀라운 기회입니다.
 따라서 자연 언어는 기계 학습을 보호하는 프라이버시를 향한 또 다른 단계이지만이 경우 NLP에 적용됩니다.
 요약하면 자연어 프레임 워크라는 새로운 프레임 워크에 대해 이야기했습니다.
 Apple 컴퓨터와 긴밀하게 통합되어있어 [들리지 않음]을 학습합니다.
 이제 Create ML을 사용하여 모델을 교육 한 다음 Core ML API 또는 Natural Language와 함께 해당 모델을 사용할 수 있습니다.
 Natural Language와 API를 사용하여 생성 한 모델은 모든 플랫폼에서 Apple 하드웨어에서 고도로 수행되고 최적화됩니다.
 마지막으로, NLP에서 학습하는 모든 기계가 사용자의 장치에서 발생하기 때문에 개인 정보 보호를 지원합니다.
 여기에 더 많은 정보가 있습니다.
 내일 우리는 자연 언어 연구소 (Natural Language Lab)를 운영합니다. 따라서이 API를 사용해 보시고 우리와 대화하여 개선점이나 앱과 관련한 협의 사항에 대해 질문하십시오.
 우리는 기계 학습을 함께하고 있으며, 지금 일어나고있는 [들리지 않는] Create ML 실험실이 있습니다.
 따라서 여러분은 계속해서 그 연구실의 일원으로서 우리에게 와서 이야기 할 수 있습니다.
 관심을 가져 주셔서 감사합니다.
 감사.

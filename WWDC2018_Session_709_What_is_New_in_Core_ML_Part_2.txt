여보세요! 코어 ML의 두 번째 세션에 오신 것을 환영합니다.
 내 이름은 Aseem이고 저는 Core ML 팀의 엔지니어입니다.
 여러분 모두 아시겠지만, Core ML은 기기의 추론을위한 Apple의 기계 학습 프레임 워크입니다.
 Core ML에 대해 정말 좋아하는 한 가지는 모든 Apple 하드웨어에 최적화되어 있다는 것입니다.
 작년에 우리는 모든 Apple 플랫폼에서 놀라운 응용 프로그램을 많이 보았습니다.
 정말 흥미 진진합니다.
 그리고 우리는 올해 우리가 가지고있는 새로운 기능에 더욱 흥분하고 있습니다.
 이제 앱 크기를 크게 줄일 수 있습니다.
 새로운 일괄 예측 API를 사용하면 앱을 훨씬 빠르게 만들 수 있습니다.
 그리고 사용자 정의를 사용하여 앱에 첨단 연구를 포함시킬 수 있습니다.
 그래서 그것은 첫 번째 세션을 요약 한 것입니다.
 그리고 당신이 그것을 놓친 경우에, 나는 당신이 되돌아 가서 슬라이드를 확인하도록 강력히 권합니다.
 이 세션에서는 이러한 기능을 실제로 활용하는 방법을 살펴 보겠습니다.
 좀 더 구체적으로, 우리는 몇 가지 예를 거쳐 Core ML Tools를 사용하여 몇 가지 간단한 단계를 수행하는 방법을 보여줄 것입니다.
 모델의 크기를 줄이고 모델에 사용자 지정 기능을 포함 할 수 있습니다.
 여기 세션의 의제가 있습니다.
 Core ML Tools 생태계에 관한 정말 빠른 업데이트부터 시작하겠습니다.
 그런 다음 양자화 및 사용자 정의 변환에 대한 데모를 살펴 보겠습니다.
 그래서 생태계부터 시작하겠습니다.
 ML 모델을 어떻게 구합니까? 글쎄요, 가장 좋은 점은, 가능한 경우 온라인으로 찾으면 다운로드한다는 것입니다. 맞습니까? ML 모델을 다운로드하기 좋은 곳은 Apple Machine Learning 방문 페이지입니다.
 거기에 몇 가지 모델이 있습니다.
 이제 데이터 세트에서 모델을 교육하려고한다고 가정 해 보겠습니다.
 이 경우 Create ML을 사용할 수 있습니다.
 이것은 우리가 올해 시작한 새로운 프레임 워크이며이를 사용하는 기계 학습 전문가 일 필요는 없습니다.
 정말 사용하기 쉽습니다.
 바로 Xcode에 있습니다.
 가서 시도 해보세요.
 이제 여러분 중 일부는 이미 우리가 지역 사회 밖에있는 놀라운 기계 학습 도구에 익숙합니다.
 그리고 작년에 파이썬 패키지 인 Core ML Tools를 발표했습니다.
 그리고 그와 함께 몇 가지 변환기를 출시했습니다.
 지난 해이 지역에서 많은 활동이있었습니다.
 그리고 이것은 그림이 지금 보이는 방법입니다.
 보시다시피 더 많은 변환기가 있습니다.
 또한 이제는 교육 프레임 워크를 선택하는 데 많은 선택의 여지가 있습니다.
 이 모든 변환기는 Core ML Tools 위에 구축됩니다.
 이제 저는 여기에 몇 가지 다른 변환기를 강조하고 싶습니다.
 작년에 Google과 공동 작업하여 TensorFlow 변환기를 출시했습니다.
 그래서 그것은 흥미 진진했습니다.
 아시다시피, TensorFlow는 새 레이어를 시험하는 연구원들에게 인기가 많아서 최근에 사용자 지정 레이어에 대한 지원을 변환기에 추가했습니다.
 그리고 TensorFlow는 최근 훈련 도중 양자화에 대한 지원을 발표했으며 Core ML 2는 양자화를 지원합니다.
 이 기능은 곧 변환기에 추가됩니다.
 우리가 가진 또 다른 흥미 진진한 파트너십은 Facebook과 Prisma입니다.
 이로 인해 ONNX 변환기가 생성되었습니다.
 ONNX에 대한 좋은 점은 이제 새로운 ONNX 변환기를 사용하여 모두 Core ML로 변환 할 수있는 다양한 교육 라이브러리에 액세스 할 수 있다는 것입니다.
 따라서 Core ML Tools 생태계의 빠른 요약본이었습니다.
 이제 양자화에 대해 이야기하고 싶습니다. 제 친구 Sohaib을 무대에 초청하고 싶습니다.
  모두 안녕하십니까.
 내 이름은 Sohaib입니다.
 저는 Core ML 팀의 엔지니어입니다.
 그리고 오늘은 Core ML Tools 2의 새로운 양자화 유틸리티에 대해 살펴 보겠습니다.
0.
 코어 ML 도구 2.
0은 최신 Core ML 모델 형식 사양을 지원합니다.
 그것은 또한 당신이 자신의 네트워크 기계 학습 모델에서 유연한 모양을 추가하고 양자화하기가 정말 쉬운 유틸리티를 가지고 있습니다.
 Core ML에서 이러한 멋진 새 기능을 사용하면 모델 크기를 줄일 수 있습니다.
 또한 앱의 모델 수를 줄여 앱의 공간을 줄입니다.
 이제 양자화를 살펴 보겠습니다.
 Core ML Tools는 교육 후 양자화를 지원합니다.
 우리는 32 비트 부동 소수점 매개 변수를 갖는 Core ML 신경망 모델로 시작합니다.
 그리고 Core ML Tools를 사용하여이 모델의 가중치를 양자화합니다.
 결과 모델은 크기가 작습니다.
 이제 모델의 크기 축소는 모델을 양자화 할 비트 수에 직접적으로 의존합니다.
 이제 우리 중 많은 사람들이 양자화가 정확히 무엇인지 궁금해 할 것입니다. 그리고 내 모델의 크기를 어떻게 줄일 수 있습니까? 후드에서 뒤로 물러나 보자.
 신경망은 층으로 구성됩니다.
 그리고이 층들은 수학적 기능으로 생각할 수 있습니다.
 그리고이 수학 함수에는 가중치라는 매개 변수가 있습니다.
 그리고 이러한 가중치는 대개 32 비트 부동 소수점으로 저장됩니다.
 이제 이전 세션에서 ResNet50을 살펴 보았습니다.
 다른 것들 사이에서 이미지 분류에 사용되는 인기있는 기계 학습 모델.
 이제이 특정 모델에는 2 천 5 백만 개 이상의 중량 매개 변수가 있습니다.

상상할 수 있습니다. 매개 변수를 어떻게 든 표현할 수 있다면 이러한 매개 변수의 수가 적어 지므로이 모델의 크기를 크게 줄일 수 있습니다.
 사실이 과정을 양자화라고합니다.
 양자화에서 우리는 [들리지 않는] 레이어의 가중치를 최소값과 최대 값으로 가져와 부호없는 정수로 매핑합니다.
 이제 APIC 양자화의 경우이 값을 0에서 55 사이의 범위에서 매핑합니다.
 7 비트 양자화의 경우, 0에서 127까지 1 비트까지 매핑합니다.
 여기서 우리는이 가중치를 0 또는 1로 매핑합니다.
 동일한 정보를 나타 내기 위해 더 적은 비트를 사용하기 때문에 우리는 모델의 크기를 줄입니다.
 큰.
 이제 여러분 중 많은 사람들이 float를 정수로 매핑한다는 것을 눈치 챘을 것입니다.
 그리고 아마도이 매핑에서 정확성 손실이있을 수 있다는 결론에 도달했을 것입니다.
 사실입니다.
 엄지 손가락의 규칙은 모델을 양자화 할 비트 수가 낮을수록 모델의 정확도가 높습니다.
 그리고 우리는 그걸 조금 돌아 보겠습니다.
 이것이 양자화 개요입니다.
 그러나 문제는 여전히 남아 있습니다.
 어떻게이 매핑을 얻을 수 있습니까? 글쎄, 거기에 많은 인기있는 알고리즘과 기술을 당신이 이것을하는 데 도움이됩니다.
 코어 ML은 선형 양자화 및 룩업 테이블 양자화와 같이 가장 인기있는 두 가지를 지원합니다.
 간단한 개요를 보겠습니다.
 선형 양자화는 이러한 전체 매개 변수를 동일하게 매핑하는 알고리즘입니다.
 양자화는 스케일 및 값에 의해 매개 변수화됩니다.
 그리고이 값은 우리가 양자화하는 레이어의 매개 변수를 기반으로 계산됩니다.
 이제이 매핑이 어떻게 작동 하는지를 보여주는 매우 직관적 인 방법은 우리가 뒤로 물러서는 것입니다.
 바닥에있는 양자화 된 가중치에서 원래의 플로트 가중치로 되돌아 갈 방법을 확인하십시오.
 선형 양자화에서 우리는 단순히 양자화 된 가중치에 스케일 매개 변수를 곱하고 편향을 추가합니다.
 코어 ML이 지원하는 두 번째 양자화 기술은 룩업 테이블 양자화입니다.
 그리고이 기술은 정확하게 그것이 들리는 것입니다.
 우리는 룩업 테이블을 구성한다.
 이제 다시 양자화 된 가중치에서 원래의 가중치로 되돌아 갈 방법을 생각해 보면 도움이됩니다.
 이 경우 양자화 된 가중치는 단순히 조회 테이블에 다시 색인됩니다.
 자, 선형 양자화와 달리 우리는 양자화 된 가중치를 움직일 수 있습니다.
 그들은 선형으로 간격을 띄울 필요가 없습니다.
 핵심 ML 도구는 전체 정밀도 신경망 모델로 시작하는 선형 양자화 및 룩업 테이블 양자화를 지원합니다.
 유틸리티를 사용하여 해당 모델의 가중치를 양자화하십시오.
 이제 당신은 내가 모델의 크기를 줄일 수 있다는 것을 잘 알고있을 것입니다.
 하지만 어떻게 내 양자화를위한 매개 변수를 알아낼 수 있습니까? 선형 양자화를 수행하는 경우 내 눈금 및 편향을 어떻게 파악합니까? 조회 테이블 양자화를 수행하는 경우 조회 테이블을 어떻게 구성합니까? 나는 당신이 그것에 대해 걱정할 필요가 없다고 당신에게 말하려고 왔습니다.
 당신이하는 일은 모델을 양자화하고자하는 비트 수를 결정하는 것뿐입니다.
 그리고 사용하려는 알고리즘을 결정하고 Core ML Tools가 나머지 작업을하도록하십시오.
 실제로 - 사실, 코어 ML 신경망 모델을 사용하는 것은 매우 간단합니다.
 그리고 그것을 양자화하십시오.
 그런 다음 몇 줄의 파이썬 코드로이 작업을 수행 할 수 있습니다.
 그러나 왜 우리가 당신에게 데모를 보여줄 수있을 때 여기에 서서 그것에 대해 이야기해야합니까? 따라서이 데모의 목적을 위해 코어 ML 모델 형식의 신경망이 필요합니다.
 자, 동료 인 Aseem이 언급했듯이,이 모델을 찾을 수있는 가장 좋은 곳은 Core ML machine learning 홈 페이지입니다.
 그리고 그 페이지에서 모델 중 하나를 다운로드했습니다.
 그래서이 모델은 SqueezeNet이라고합니다.
 계속해서 열어 보겠습니다.
 보시다시피이 모델의 크기는 5 메가 바이트입니다.
 227x227 픽셀의 이미지를 입력합니다.
 그리고 그것은 두 가지 결과물을 가지고 있습니다.
 출력 중 하나는 문자열 인 클래스 레이블이며, 이는 입력 이미지에 대한 가장 가능성있는 레이블입니다.
 두 번째 출력은 이미지를 전달할 때 이미지의 예상 가능성 목록입니다.
 이제이 모델의 양자화를 시작하겠습니다.
 그래서 내가하고 싶은 일은 파이썬 환경에 들어가기를 원한다는 것입니다.
 이제 Jupyter Notebook이 내가 익숙한 환경 중 하나입니다.
 그래서 나는 앞으로 나아가서 그것을 열어 갈 것입니다.
 새 노트를 열고 그 노트를 확대합시다.
 좋구나.
 먼저 Core ML Tools를 가져와 시작하겠습니다.
 실행 해 봅시다.
 이제 내가하고 싶은 두 번째 일은 Core ML Tools에서 가지고있는 모든 새로운 양자화 유틸리티를 가져오고 싶습니다.
 그리고 우리는 이것을 실행함으로써 그렇게합니다.
 이제 우리는 퀀 타이즈 할 모델을로드해야합니다.
 그리고 우리는 방금 스퀴즈 넷 모델을 보았습니다.
 우리는 그 모델의 인스턴스를 얻을 것입니다.
 바탕 화면으로 보내주십시오.

큰.
 이제이 모델을 양자화하기 위해 간단한 API 호출을 하나만 작성하면됩니다.
 선형 양자화를 사용하여 선형,이 모델을 양자화 해 봅시다.
 그리고 API는 간단히 가중치 양자화라고합니다.
 그리고 우리가 전달한 첫 번째 매개 변수는 방금로드 한 원래 모델입니다.
 모델을 양자화 할 비트 수입니다.
 이 경우 8 비트입니다.
 그리고 우리가 사용하고자하는 양자화 알고리즘.
 선형 양자화를 시도해 봅시다.
 이제는 유틸리티가 선형 네트워크의 모든 레이어에 대해 반복 작업을 수행하고 있습니다.
 그리고 그 레이어의 모든 가중치를 양자화합니다.
 그리고 우리는 끝났습니다.
 자, 잠시 전에 우리 모델의 양자화가 정확도의 손실을 가져 왔다고 언급 한 적이 있습니다.
 그래서 우리는 우리의 양자화 모델이 원래의 모델과 어떻게 겹쳐 졌는지 알고 싶습니다.
 가장 쉬운 방법은 원래 모델을 사용하여 일부 데이터를 가져 와서 해당 데이터를 추론하는 것입니다.
 또한 양자화 된 모델을 사용하여 동일한 데이터에 대해 동일한 추론을 수행하고 해당 모델의 예측을 비교합니다.
 그리고 그들이 얼마나 잘 동의하는지 봅니다.
 핵심 ML 도구에는이를 수행하는 데 도움이되는 유틸리티가 있습니다.
 그리고 우리는이 모델을 비교 모델이라고 부릅니다.
 우리는 풀 정밀도 모델을 전달하고 우리가 방금 양자화 한 모델을 전달합니다.
 그리고이 모델은 하나의 이미지 입력 ​​만 갖는 간단한 이미지 분류 자이기 때문에.
 우리에게는 편의 유틸리티가 있습니다.
 따라서 샘플 데이터 이미지가 들어있는 폴더를 전달할 수 있습니다.
 이제는 내 바탕 화면에 응용 프로그램과 관련된 일련의 이미지가있는 폴더가 있습니다.
 그래서 나는이 폴더의 경로를 내 [들리지 않음] 매개 변수로 전달할 것입니다.
 큰.
 이제는 해당 폴더의 모든 이미지를 분석하고 있습니다.
 추측을 실행 중입니다. 전체 예측 또는 전체 정밀도 모델을 사용하고 있습니다.
 우리는 양자화 모델에 대한 추론을하고 있습니다.
 우리는 두 가지 예측을 비교하고 있습니다.
 그래서 우리는 그 일을 끝내는 것처럼 보입니다.
 그리고 우리는 톱 1 협정이 94임을 알 수 있습니다.
8 %.
 나쁘지 않다.
 이제이 Top 1 Agreement는 무엇을 의미합니까? 예를 들어, 원래 모델에서 강아지의 이미지를 전달하면이 이미지가 개라고 예측됩니다.
 내 양자화 모델도 마찬가지였습니다.
 그리고 그것은 98, 94 년에 일어났습니다.
데이터 세트의 8 %.
 그래서 우리의 앱에서이 모델을 사용할 수 있습니다.
 그러나이 모델에서 다른 양자화 기술이 더 잘 작동하는지보고 싶습니다.
 앞서 언급했듯이 코어 ML은 두 가지 유형의 양자화 기술을 지원합니다.
 선형 양자화 및 룩업 테이블 양자화.
 이제 lookup table quantization을 사용하여이 모델을 시도하고 양자화 해 봅시다.
 다시 말하지만, 모델을 양자화하기를 원하는 비트의 수인 원래 모델을 전달합니다.
 그리고 우리의 양자화 기술.
 죄송합니다. 오타가 발생했습니다.
 이걸 실행 해 봅시다.
 이제 k-means는 가중치 분포를 근사화하는 간단한 클러스터링 알고리즘입니다.
 그리고이 분포를 사용하여 가중치를위한 룩업 테이블을 만들 수 있습니다.
 그리고 여기서 우리가하는 일은 신경망의 모든 레이어를 반복하는 것입니다.
 그리고 우리는 양자화를하고 있으며 특정 레이어의 룩업 테이블을 알아 내고 있습니다.
 이제는 전문가이고 모델을 알고 있고 모델 아키텍처를 알고 있고 k-means가 알고리즘이 아니라는 것을 알고 있다면이 알고리즘 대신 사용자 정의 함수를 전달할 수있는 유연성이 있습니다. 유틸리티는 사용자 정의 함수를 사용하여 실제로 조회 테이블을 구성합니다.
 그래서 우리는 룩업 테이블 방식을 사용하여 다시이 모델의 양자화를 마쳤습니다.
 이제이 모델이 원래 모델과 얼마나 비교되는지 봅시다.
 다시 한번 우리는 비교 모델의 API를 호출합니다.
 원래 모델을 전달하고 조회 테이블 모델을 전달합니다.
 다시 샘플 데이터 폴더에 전달합니다.
 다시 원래 모델과 양자화 된 모델을 사용하여 모든 이미지에 대해 추론을 실행합니다.
 그리고 우리는 이번에 우리가 훨씬 더 좋은, 조금 더 좋은 톱 1 계약을 얻는 것을 봅니다.
 이제이 모델에서 룩업 테이블이 올바른 방법임을 알았습니다.
 그러나 다시 이것은 모델에 따라 다르며 다른 모델에서는 선형이 길일 수 있습니다.
 이제 우리는이 작업에 만족하고 최소한이 작업은 응용 프로그램에 충분하다는 것을 알았으므로이 모델을 저장하십시오.
 우리는 save를 호출하거나 save를 호출하여이를 수행합니다.
 Quantized SqueezeNet이라는 창의적인 이름을 부여 할 것입니다.
 그리고 거기에 우리가 간다.
 우리는 양자화 된 모델을 가지고 있습니다.
 그래서 이것은 원래의 모델이었습니다.
 그리고 크기가 5 메가 바이트라는 것을 알았습니다.
 우리의 양자화 된 모델을여십시오.
 그리고 우리가 배트에서 처음 발견 한 것은이 모델이 단지 1이라는 것입니다.
3 메가 바이트 크기.
 따라서 우리가 양자화 된 모델에 관한 모든 세부 사항은 원래 모델과 동일합니다.
 여전히 이미지 입력을 받아들이지 만 여전히 두 개의 출력을 가지고 있습니다.
 이제이 모델을 사용하는 앱이 있다면 이전 데모에서 본 것처럼 할 수있는 것입니다.
 우리는이 양자화 된 모델을 우리의 앱으로 드래그하여 그것을 대신 사용할 수 있습니까?

그리고 그렇게해서 우리는 앱의 크기를 줄였습니다.
 그래서 Core ML Tools를 사용한 양자화였습니다.
 요약하면 코어 ML 도구를 사용하여 모델을 양자화하는 것이 얼마나 쉬운지를 알 수 있습니다.
 간단한 API를 사용하여 원래 모델, 모델을 양자화하려는 비트 수 및 사용한 양자화 알고리즘을 제공했습니다.
 또한 Core ML Tools에는 양자화 된 모델을 비교하여 원래 모델과 비교하여 성능을 확인하는 데 도움이되는 유틸리티가 있습니다.
 이제 데모에서 보았 듯이 모델의 양자화와 관련된 정확성의 손실이 있습니다.
 그리고 이러한 정확성의 손실은 모델 및 데이터에 크게 좌우됩니다.
 일부 모델은 양자화 후 다른 모델보다 잘 작동하거나 성능이 우수합니다.
 엄지 손가락의 일반적인 규칙으로, 비트 수를 줄이면 모델을 양자화하여 더 정밀한 히트를 얻습니다.
 이제 데모에서 Core ML Tools를 사용하여 Top 1 Agreement 메트릭을 사용하여 양자화 된 모델과 원래 모델을 비교할 수있었습니다.
 그러나 모델 및 유스 케이스의 관련 메트릭이 무엇인지 파악하고 양자화 모델이 수용 가능한지 확인해야합니다.
 이제 이전 세션에서 스타일 전송 데모를 살펴 보았습니다.
 그리고이 네트워크는 입력 이미지를 가져 왔으며이 네트워크의 출력은 양식화 된 이미지였습니다.
 이 모델이 다른 양자화 레벨에서 어떻게 작동하는지 살펴 보겠습니다.
 그래서 왼쪽 상단 왼쪽 상단에 있습니다.
 원래 모델은 30 - 32 비트이고 6입니다.
7 메가 바이트 크기.
 그리고 우리의 8 비트 선형 양자화 모델은 단지 1입니다.
크기는 7 메가입니다.
 그리고 우리는 육안 검사에 의한 성능이 제 스타일 전송 데모에 충분하다는 것을 알 수 있습니다.
 이제 우리는 4 비트까지도 성능면에서 많이 손실되지 않는다는 것을 알 수 있습니다.
 심지어 적어도 내 애플 리케이션을 위해, 3 비트 잘 작동합니다 논쟁 것입니다.
 그리고 우리는 2 비트로 볼 때, 많은 인공물을 보게되고 이것은 우리에게 맞는 모델이 아닐 수도 있습니다.
 핵심 ML 도구를 사용한 양자화였습니다.
 이제는 맞춤 변환에 대해 이야기 할 Aseem에게 다시 전달할 것입니다.
 고맙습니다.
  Sohaib, 고마워.
 따라서 우리 주변에서 일어나는 기계 학습 연구에 보조를 맞춰 나가는 데 필수적인 기능에 대해 이야기하고 싶습니다.
 여러분 모두 아시다시피, 기계 학습 분야는 매우 빠르게 확장되고 있습니다.
 따라서 Core ML에서 우리에게 필요한 소프트웨어 도구를 제공하는 것이 매우 중요합니다.
 이제 예를 들어 봅시다.
 코어 ML에서 지원되지 않는 새로운 모델을 실험하고 있다고 가정 해 보겠습니다.
 또는 Core ML에서 실행되는 신경망을 가지고 있다고 가정 해 봅시다.하지만 Core ML에는 아직없는 계층이있을 수 있습니다.
 이 경우에도 코어 ML의 기능을 계속 사용할 수 있어야합니다. 맞습니까? 그리고 그 질문에 대한 대답은 '예'입니다.
 그리고 커스터마이즈 기능이 당신을 도울 것입니다.
 다음 몇 분 안에 새로운 신경 네트워크 계층을 사용하는 구체적인 사례에 중점을두고 싶습니다.
 Core ML로 변환 한 다음 응용 프로그램에서 구현하는 방법을 보여줍니다.
 이제 모델 변환을 살펴 보겠습니다.
 따라서 변환기 중 하나를 사용하거나 사용하지 않은 경우에도 매우 간단한 API입니다.
 그것은 하나의 함수를 호출하는 것입니다.
 이것은 Keras 변환기를 찾는 방법입니다.
 그리고 이것은 ONNX 변환기 또는 TensorFlow 변환기와 매우 유사합니다.
 이제이 함수를 호출하면 대부분 모든 것이 올바르게됩니다.
 그러나 때로는 이와 같은 오류 메시지가 나타날 수 있습니다.
 그것은 말할 수 있습니다. "야, 그런 종류의 지원되지 않는 운영.
"이제 그런 일이 생기면이 오류를 극복하기 위해 조금만 더 할 필요가 있습니다.
 보다 구체적으로, 이러한 오류 메시지는 사용자 지정 레이어를 사용해야한다는 표시입니다.
 변환하기 위해해야 ​​할 약간의 노력이 무엇인지 보여주기 전에 맞춤 레이어를 사용해야하는 몇 가지 예를 살펴 보겠습니다.
 따라서 이미지 분류 기준이 있다고 가정 해 보겠습니다.
 이것은 Xcode에서 보이는 방식입니다.
 따라서 모델에 대한 높은 수준의 설명이 될 것입니다.
 내부를 들여다 보면 신경망 일 가능성이 높습니다.
 그리고 그것은 convolutional 신경 네트워크 일 가능성이 높습니다.
 그래서 많은 레이어, 컨볼 루션, 활성화가 있습니다.
 이제 Core ML이 지원하지 않는 새로운 활성화 계층이 생길 수 있습니다.
 그리고 모든 기계 학습 컨퍼런스에서와 마찬가지로 연구원들은 항상 새로운 레이어를 고안하고 있습니다.
 그래서 이것은 매우 일반적인 시나리오입니다.
 이제 이런 일이 발생하면이 새 레이어의 사용자 지정 구현 만 사용하면됩니다.
 그리고 나서 당신은 잘 가게됩니다.
 그러면 모델이 어떻게 생겼을 것입니다.
 유일한 차이점은 아래쪽에있는이 종속성 섹션입니다.
 그러면이 모델에는이 사용자 정의 레이어에 대한 설명이 포함됩니다.
 다른 예를 살펴 보겠습니다.
 우리가 아주 간단한 자릿수 분류자를 가지고 있다고 가정 해 봅시다.
 이제 저는이 연구 보고서를 최근에 보았습니다.
 Spatial Transformer Network라고합니다.
 그리고 그것이하는 것은 이것입니다.

따라서 숫자를 지역화하려고하는 숫자 다음에 신경망을 삽입합니다.
 그런 다음 다시 숫자를 렌더링하는 그리드 샘플러 레이어를 통해 피드하지만, 이번에는 이미 숫자에 초점을 맞 춥니 다.
 그런 다음 이전 분류 방법으로 전달합니다.
 이제 우리는 여기서 세부 사항에 대해 걱정할 필요가 없습니다.
 그러나 주목할 점은 녹색 부분이 Core ML이 지원하는 부분이라는 것입니다.
 그리고이 새로운 그리드 샘플러 레이어 인 빨간색 부분은 코어 ML이 지원하지 않는 새로운 실험 레이어입니다.
 따라서이 특정 모델의 예를 들고 핵심 ML 도구를 사용하여 변환하는 방법을 보여 드리겠습니다.
 그럼 데모로 나가자.
 첫 번째 시도에서 효과가 있기를 바랍니다.
 뒤로, 오 예.
 괜찮아.
 그럼이 창문을 닫도록 하죠.
 내가 간다, 이걸 정리해라.
 ML을 지우십시오.
 좋아요, 그래서 Jupyter Notebook을 사용하여 데모를 보여 드리겠습니다.
 그래서 나는 사전 훈련 된 네트워크를 가지고있는 폴더로 이동합니다.
 여기서 볼 수있는 것은이 공간 트랜스포머 점 [들리지 않음] 파일을 가지고 있다는 것입니다.
 이것은 미리 훈련 된 Keras 모델입니다.
 그리고 내가이 모델을 구하기 위해 특별한 것을했는지 궁금하게 생각하는 경우.
 기본적으로 공간 트랜스포머의 오픈 소스 구현을 쉽게 찾을 수있었습니다.
 방금 Keras에서 그 스크립트를 전시했고,이 모델을 가지고 있습니다.
 그리고이 모델과 함께이 그리드 샘플러 레이어 Python 스크립트도 얻었습니다.
 이제 내가 말하고있는이 그리드 샘플러 레이어는 Keras에서 기본적으로 지원되지 않습니다.
 따라서 온라인으로 구현 한 경우 Keras 사용자 정의 레이어를 사용하여 레이어를 구현했습니다.
 보시다시피 커스터마이즈의 개념은 Core ML만의 것이 아닙니다.
 실제로 대부분의 기계 학습 프레임 워크에서는 매우 일반적입니다.
 이것은 사람들이 새로운 층에서 실험하는 방법입니다.
 자, 지금까지 Keras 모델을 가지고 있습니다.
 이제 Core ML 모델을 얻는 방법에 중점을두고 싶습니다. 이제 열어 보겠습니다. 파이썬 노트북을 새로 시작하겠습니다.
 그래서이 Keras 모델을 파이썬 환경으로 가져 오기부터 시작하겠습니다.
 괜찮아? 그래서 Keras를 가져오고, 우리는 Keras에있는 사용자 정의 레이어를 가져옵니다.
 이제 Keras에서 모델을로드합니다.
 괜찮아? 그래서 이것은 모델, Keras 모델을로드하는 방법입니다.
 파트에 모델을 지정하고 사용자 정의 레이어가 있으면 그 파트에 파트를 제공합니다.
 괜찮아.
 그래서 우리는 지금 모델을 가지고 있습니다.
 이제 이것을 Core ML로 변환 해 봅시다.
 그래서 코어 ML 도구를 가져올 것입니다.
 그것을 실행하십시오.
 그리고 지금 저는 제가 전에 여러분에게 보여 줬던 것처럼 이것은 그것을 변환하는 하나의 함수에 대한 호출 일뿐입니다.
 그래서 그렇게 하죠.
 그게 내 전화 야.
 예상대로 오류가 발생합니다.
 파이썬은 이러한 거대한 오류 메시지를 던지기를 좋아합니다.
 그러나 실제로 우리가 집중하고있는 것은 마지막 줄입니다.
 이제 마지막 라인에서 볼 수 있듯이 레이어 또는 샘플러가 지원되지 않습니다.
 자 이제 우리가 그걸 없애기 위해해야 ​​할 일이 있는지 봅시다.
 어쩌면 내가 볼 수 있도록이 모든 것을 정리할 수 있습니다.
 괜찮아.
 이제 코어 콜 모델을 사용하기 위해 컨버터 콜을 약간 변경했습니다.
 이제 추가 인수를 하나 전달할 것입니다.
 사용자 지정 변환 함수라고합니다.
 그리고 이것은 레이어 이름에서 내가 정의 할 함수에 대한 사전이 될 것입니다.
 그리고 좋은 샘플러를 부르고 있습니다.
 여기서 한 걸음 뒤로 물러나서 여기서 일어나는 일을 설명하겠습니다.
 변환기가 작동하는 방식을 알기 때문에 모든 Keras 계층을 통과합니다.
 첫 번째 레이어를 보면 알 수 있습니다.
 그런 다음 Core ML에 대한 매개 변수를 들여다 볼 수 있습니다.
 두 번째 레이어로 이동 한 다음 해당 매개 변수를 변환하는 등의 작업을 수행합니다.
 이제이 맞춤 레이어에 도달하면 무엇을해야할지 알 수 없습니다.
 그래서이 샘플러를 변환하는 여기에있는이 함수는 제 변환기에서 그렇게하는 데 도움이 될 것입니다.
 그리고이 함수의 모습을 보여 드리겠습니다.
 그래서 이것은 함수입니다.
 몇 줄의 코드가 있지만 그것이하는 일은 모두 세 가지입니다.
 첫째, 클래스의 이름을 부여합니다.
 따라서 우리가 알았 듯이 레이어 구현은 여기에 없습니다.
 구현은 나중에 앱에서 제공되며 클래스에 캡슐화됩니다.
 이것이 나중에 구현할 클래스의 이름입니다.
 따라서 변환하는 동안이 클래스 이름을 지정하면됩니다.
 그게 전부 야.
 그리고 누군가에게 누군가가 당신의 모델을보고 있다면 그것이 가지고있는 것을 알기 위해서 당신이 제공해야만하는 설명이 있습니다.
 그리고 세 번째는 기본적으로 Keras 계층이 Core ML에 가지고있는 모든 매개 변수를 변환하는 것입니다.
 이 특정 레이어에는 두 개의 매개 변수가 있습니다.
 출력 높이 및 출력 가중치.
 그리고 저는 그것을 Core ML로 번역하고 있습니다.
 매개 변수가없는 사용자 지정 계층에로드 한 다음 수행 할 필요가없는 경우에는이 작업을 수행하십시오.
 레이어에 많은 매개 변수가있는 경우 모두 여기로 갈 수 있으며 모두 코어 ML 모델 안에 캡슐화됩니다.
 그래서 제가 여기서 한 모든 것이 당신이 수업을 어떻게 정의 할 것인가와 매우 흡사하다는 것을 눈치 챘을 것입니다, 그렇죠? 당신은 클래스 이름을 부여합니다.
 어쩌면 설명 일 수도 있고 어쩌면 매개 변수 일 수도 있습니다.
 자 이제 이걸 실행하도록하겠습니다.

그리고 이제 컨버터가 작동한다는 것을 알았습니다. 전환은 잘되었습니다.
 그래서 나는 이것이 어떤 이유로 아주 이상하게 행동하고 있다고 봅니다.
 괜찮으 시다면,이 모든 것을 삭제할 것입니다.
 따라서이 모델을 시각화 해 보겠습니다. 코어 ML 도구의 기능을 사용하면 매우 간단합니다.
 이를 시각화 사양이라고합니다.
 여기에서 모델의 시각화를 볼 수 있습니다.
 우리가 볼 수 있듯이, 우리는 [들리지 않음]과 거기에 몇 개의 층을 가지고 있습니다.
 그리고 이것은 우리의 맞춤 레이어입니다.
 그리고 이것을 클릭하면 매개 변수를 봅니다.
 그래서 이것은 내가 준 수업의 이름입니다.
 그리고 이것과 이것들은 내가 설정 한 매개 변수입니다.
 드래그 앤 드롭하기 전에 Core ML 모델을 시각화하여 모든 것이 잘 보이는 지 항상 확인하는 것이 좋습니다.
 괜찮아.
 이것은 잘못된 노트입니다.
 괜찮아.
 이제이 모델을 저장해 보겠습니다.
 이제이 모델을 살펴 보겠습니다.
 그래서 내가 이것을 닫을 게.
 괜찮아.
 실제로 제가 가지고있는 디렉토리로 이동하게하겠습니다.
 여기 내 모델이 있습니다.
 따라서 Xcode를 클릭하면 어떻게 보이는지보실 수 있습니다.
 여기에 사용자 정의 설명이 있음을 알 수 있습니다.
 괜찮아.
 슬라이드로 돌아가겠습니다.
 그래서 우리가 본 것은 몇 줄의 단순한 선으로 나타났습니다. Core ML에 함수를 변환 할 수있었습니다.
 TensorFlow 변환기 또는 ONNX 변환기를 사용하는 경우 프로세스가 거의 동일합니다.
 그래서 여기에 우리 모델이 왼쪽에 있습니다.
 매개 변수가있는 사용자 지정 레이어 모델입니다.
 이제이 모델을 Xcode로 드래그 앤 드롭하면 클래스 구현을 제공해야합니다.
 예를 들어 파일에서 [들리지 않음]이라고 말합니다.
 그리고 이것이 어떻게 보일 것입니다.
 따라서 클래스가 있으므로 초기화 함수를 사용할 수 있습니다.
 그래서 이것은 우리가 모델에 가지고있는 매개 변수를 초기화하는 것입니다.
 그리고이 클래스의 주 기능은 평가 될 것입니다.
 여기에서 레이어가 수행해야하는 수학 함수가 실제로 구현되는 곳이 여기에 있습니다.
 그리고 출력 모양 또는 입력 모양이라는 또 하나의 기능이 있습니다.
 이 값은 레이어가 생성하는 출력 영역의 크기를 지정합니다.
 이렇게하면로드 타임에 버퍼 크기를 할당 할 때 Core ML이 도움이되므로 런타임에 앱의 효율성이 높아집니다.
 그래서 우리는 당신이 신경망에서 새로운 층을 어떻게 다루는 지 보았습니다.
 커스텀 레이어와 매우 비슷한 컨셉이 있으며 커스텀 모델이라고합니다.
 그것은 똑같은 생각을 가지고 있지만 좀 더 일반적인 것입니다.
 따라서 사용자 정의 모델을 사용하면 모든 종류의 네트워크를 처리 할 수 ​​있습니다.
 신경이 될 필요는 없습니다. 신경망 일 필요는 없습니다.
 기본적으로 전반적인 유연성을 기본적으로 제공합니다.
 세션을 요약하겠습니다.
 우리는 Core ML Tools를 둘러싼 생태계가 얼마나 더 풍부한지를 보았습니다.
 이제 Core ML 모델을 가져올 많은 선택의 여지가 있기 때문입니다.
 이것을 양자화하고 코어 ML 모델을 양자화하는 것이 얼마나 쉬운지를 보았습니다.
 그리고 몇 줄의 코드로 모델에 새로운 사용자 정의 레이어를 쉽게 통합 할 수있었습니다.
 자세한 내용은 문서 페이지를 참조하십시오.
 그리고 실험실에 와서 우리에게 이야기하십시오.
 좋아 감사합니다.

얘들 아.
 고맙습니다.
 와 주셔서 감사합니다.
 유체 인터페이스 설계에 오신 것을 환영합니다.
 내 이름은 찬이에요.
 그리고 저는 여기에있는 휴먼 인터페이스 팀에서 일하고 있습니다.
 그리고 최근에는 iPhone 10의 유동적 인 제스처 인터페이스 인이 작업을 수행했습니다.
 Marcos, Nathan, 우리는 이것에 대한 작업을 배운 것에 대해 조금 이나마 나누고 싶습니다. 과거와 같은 다른 프로젝트도 있습니다.
 그래서, 우리가 많이 묻는 질문은 실제로 인터페이스가 유동적 인 느낌을 갖게하는 것입니까? 그리고 우리는 많은 사람들이 그것을 다르게 묘사하고 있음을 발견했습니다.
 당신은 때때로 사람들이 실제로이 물건을 시험해 볼 때 데모를 보여주고 시도 할 때 손에 들고있을 때 가끔은 빠르게 느껴진다 고합니다.
 또는 다른 사람들은 때로는 부드럽다고 말합니다.
 그리고 기분이 좋을 때 사람들은 때로는 자연스럽고 마 법적이라고 느낍니다.
 그러나, 그것에 관해서, 그것이 정말로 느껴질 때, 당신이 그것을 느낄 때 당신이 그것을 단지 알고있는 그러한 것들 중 하나입니다.
 그것은 단지 옳은 느낌입니다.
 그리고 제스처 UI를 사용할 수는 있지만 제스처 UI가 많이 보였습니다.하지만 올바르게 실행되지 않으면 뭔가 느껴집니다.
 그리고 왜 그런지에 손가락을 대는 것은 어렵습니다.
 그리고 이는 프레임 속도 이상입니다.
 초당 60 프레임의 놀라운 속도로 무언가를 경험할 수는 있지만 느껴집니다.
 그래서, 우리에게이 느낌을주는 것은 무엇입니까? 글쎄, 우리는 그것이 도구가 당신의 마음의 연장처럼 느껴질 때까지 비등한다고 생각합니다.
 너의 마음의 연장.
 그래서, 왜 이것이 중요한가? 글쎄, 당신이 그것을 본다면, 아이폰은 도구 겠지? 정보와 의사 소통을위한 손 도구입니다.
 그리고 그것은 우리의 촉각 감각과 우리의 시각 감각을 결합시킴으로써 작동합니다.
 그러나 생각해 보면, 실제로 수천년을 연장하는 수공구의 긴 라인의 일부입니다.
 여기 왼쪽의 도구는 150,000 년 전에 골수를 추출하여 우리 손가락이 할 수있는 것의 선명도를 확장 시켰습니다.
 그래서, 우리는 지금 수공구를 만들고 있습니다.
 그리고 가장 놀라운 점은 우리 손이 실제로 도구를 따라 진화하고 적응했기 때문입니다.
 우리는 근육, 신경, 가장 섬세한 제스쳐를 수행 할 수있는 혈관, 그리고 가장 가벼운 감각을 감지하여 엄청난 농도를 발전 시켰습니다.
 그래서, 우리는 우리 모두가 살고있는이 촉각 세계에 매우 적응했습니다.
 그러나 컴퓨터의 역사를 살펴보면 사용자와 인터페이스간에 많은 추출 계층이있는 곳에서 작업을 시작했습니다.
 당신이 그것을 운영하기 위해서 단지 알고 있어야했던 것이 너무 많았습니다.
 그리고, 그것은 많은 사람들에게 다가갔습니다.
 그러나 지난 수십 년 동안 간접적 인 조작으로 시작하여 일대일로 진행되는 작업을 시작으로 일종의 계층을 철저히 지켜 왔습니다.
 이제 모든 레이어를 다시 벗겨 내고 콘텐츠와 직접 상호 작용하는 곳까지 조금 더 직접적으로 접근 할 수 있습니다.
 우리에게 이것은 불가사의 한 요소입니다.
 컴퓨터처럼 느껴지지 않고 자연 세계의 연장처럼 느껴지기도합니다.
 이것은 인터페이스가 이제까지했던 것보다 훨씬 더 고대 수준에서 우리와 통신하고 있음을 의미합니다.
 그리고 우리는 그것을위한 높은 기준을 가지고 있습니다.
 사소한 일이 잘못되었다고 생각하면, 그 환상은 산산조각이 난다.
 그러나, 그것이 옳다고 느끼면, 그것은 당신의 육체의 연장 인 자신의 연장처럼 느껴집니다.
 그것은 당신의 생각과 일치하는 도구입니다.
 사용하기가 즐겁고 정말 마찰이 적고 놀기조차합니다.
 그래서, 우리에게이 느낌을주는 것은 무엇입니까? 그리고 기분이 좋을 때 어떻게 기분이 좋을까요? 그것이 바로이 프리젠 테이션의 전부입니다.
 우리는 오늘 네 가지 일에 대해 이야기 할 것입니다.
 그리고 우리는 우리의 연장선처럼 느껴지는 인터페이스를 구축하는 방법에 대해 이야기하면서 몇 가지 원칙을 설계하는 것으로부터 시작하겠습니다.
 우리 몸의 움직임과 우리 주변의 세계와 조화되는 움직임을 어떻게 디자인 할 것인가?
 또한 우아하고 지적인 느낌의 몸짓을 디자인합니다.
 우리는 이런 종류의 물건을 만들었으니, 이제는 그것에 대해 이야기 할 것입니다. 어떻게하면 매체로서의 촉감의 매체에 고유하다고 느끼는 상호 작용을 구축 할 수 있을까요? 시작하겠습니다.
 실제로 우리의 마음을 확장시키는 인터페이스를 어떻게 설계 할 것인가? 어떻게해야합니까? 글쎄, 우리는 그것을하는 방법이 우리가 생각하는 방식과 우리가 움직이는 방식에 인터페이스를 맞추는 것이라고 생각한다.
 그래서 가장 중요한 부분은 우리의 마음이 끊임없이 변화와 자극과 생각에 반응한다는 것입니다. 우리의 마음과 몸은 끊임없이 역동적 인 변화의 상태에 있습니다.
 따라서 우리 인터페이스가 유동적이어야한다는 것은 아닙니다. 우리가 유동적이며 인터페이스가 이에 대응할 수 있어야합니다.
 그래서, 그것은 응답으로 시작됩니다.
 알다시피, 우리 도구는 대기 시간에 달려 있습니다.

도구를 사용하거나 악기를 연주하거나 실제 세계에서 사용하기가 어려우면 얼마나 힘든지 생각해보십시오. 그리고 우리는 사람들이 대기 시간에 정말로 민감하다는 것을 발견했습니다.
 있잖아? 어느 정도의 지체를 도입하면 모든 상황이 갑자기 벼랑에서 떨어지기 시작합니다.
 이 모든 추가 정신적 부담이 있습니다.
 그것은 슈퍼 연결이 끊긴 느낌.
 더 이상 너의 연장자 같지 않아.
 그래서 우리는 대기 시간을 줄이기 위해 열심히 노력합니다.
 어디에서, 우리는 실제로 손가락에 빠르게 반응하도록 최신 iPhone을 설계 했으므로 최대한 신속하게 제스처의 모든 뉘앙스를 감지 할 수 있습니다.
 그래서 우리는이 물건에 대해 정말로 관심이 있습니다. 우리는 당신도 그렇게해야한다고 생각합니다.
 그리고, 그것은 모든 곳에서 지연을 찾는 것을 의미합니다.
 그것은 단지 swipes가 아닙니다.
 그것은 도청 장치입니다, 프레스, 그것은 물체와의 모든 상호 작용입니다.
 모든 것이 즉각적으로 대응해야합니다.
 그리고,이 물건을 디자인하는 과정에서, 당신은 알고 있습니다. 종종 지연 종류가 조금씩 스며 나오는 경향이 있습니다.
 있잖아? 따라서 지연에주의를 기울이는 것이 중요합니다.
 우리가 인터페이스에 도입 할 수있는 모든 대기 시간이나 타이머를주의 깊게 살펴서 항상 반응이 느껴지도록하십시오.
 그래서, 그것은 반응의 주제입니다.
 정말 간단하지만 인터페이스가 생동감 있고 역동적입니다.
 다음으로, 우리는 일정한 방향 전환과 중단을 허용하려고합니다.
 이건 큰거야.
 그래서, 우리의 몸과 마음은 끊임없이 우리가 이야기 한 것처럼 사고의 변화에 ​​반응하여 방향을 전환하는 상태에 있습니다.
 그래서, 제가이 무대의 끝까지 걸어 간다면, 그곳에있는 무언가를 잊어 버렸을 것입니다. 즉시 되돌릴 수 있습니다.
 그리고, 나는 그 일을하기 전에 몸이 끝나기를 기다릴 필요가 없을 것입니다. 그렇죠? 따라서 인터페이스가 지속적으로 리디렉션 할 수있는 능력을 반영 할 수 있어야합니다.
 그리고, 그것은 당신에게 연결되어 있다고 느끼게합니다.
 이것이 바로 iPhone 10에서 우리가 완전히 리디렉션 할 수있는 인터페이스를 구축 한 이유입니다.
 그래서, 그게 뭐죠? 그래서, iPhone 10은 사실 아주 단순한 2 축 제스처입니다.
 당신은 애플 리케이션 사이에 수평으로 간다.
 그리고, 당신은 집에 가기 위해 수직으로갑니다.
 하지만 두 축을 섞어서 집으로 돌아가서 멀티 태스킹을 들여다보고 그곳에 갈지 여부를 결정할 수 있습니다.
 또는 멀티 태스킹에 참여하여 결정할 수 있습니다. 사실, 아니오, 집에 가고 싶습니다.
 그래서, 이것은 그렇게 중요하지 않겠지 만, 우리가 이것을하지 않으면 어떨까요? 리디렉터 블이 아닌 경우에는 어떻게해야합니까? 그래서, 당신이 할 수있는 유일한 제스추어가 앱 사이의 수평 적 제스처이고, 그 다음에는 집으로 돌아 가기위한 수직적 제스처라면 무엇입니까?
 방금 언급 한 것들 중 어느 것도 할 수 없었습니다.
 글쎄, 일어날 일은 당신이하기 전에 생각해야 할 것입니다, 당신이 몸짓을하기 전에, 당신은 당신이하고 싶은 것을 생각해야 할 것입니다.
 그래서, 일련의 사건은 매우 직선이 될 것입니다, 그렇죠? 그래서, 생각하고, 집에 가고 싶니? 멀티 태스킹을 원하십니까? 그런 다음 결정을 내린 다음 제스처를 수행 한 다음 릴리스합니다.
 그러나 멋진 점은 방향 전환이 가능할 때 사고와 동작이 동시에 발생한다는 것입니다.
 그리고, 당신은 제스처로 그것을 생각해 봅니다. 그리고 이것은 행동하기 전에 생각하는 것보다 빠릅니다.
 있잖아? 그것은 다축 제스처 공간이기 때문입니다.
 별도의 제스처가 아닙니다.
 이 모든 것들을하는 하나의 제스처입니다.
 홈, 멀티 태스킹, 빠른 앱 전환으로 별도의 제스처로 생각할 필요가 없습니다.
 그리고 발견에 도움이됩니다.
 기존 제스처의 경로를 따라 새로운 동작을 발견 할 수 있기 때문입니다.
 그리고 생각의 속도로 몸짓을 겹쳐 쌓을 수 있습니다.
 그래서, 그게 마지막으로 무엇을 의미합니까? 그래서 몇 가지 예를 보여 드리겠습니다.
 그리고 우리는 시뮬레이션에서 물리학을 느리게 했으므로, 실제로 제가 말하고자하는 것을 조금 볼 수 있습니다.
 그래서 집으로 가서 집으로 가서 문지르면 다음 페이지로 넘어갈 수 있습니다.
 일단 내가 내부화 한 후에 나는이 두 제스처를 쌓을 수 있습니다.
 또 다른 예는 앱을 실행하고 실제로 오히려 멀티 태스킹에 들어갈 필요가 있다는 것입니다. 앱이 시작되는 동안 앱을 중단하고 멀티 태스킹을 할 수 있습니다.
 또는 앱을 실행하여 잘못된 앱임을 알 수 있습니다.
 그리고 내가 그것을 시작하는 동안 나는 그것을 집으로 쏠 수있다.
 이제 실제로 앱을 시작할 수있는 또 다른 앱이 있습니다. 서둘러야 만 앱을 시작할 때 앱과 상호 작용할 수 있습니다.
 그래서,이 물건은 정말로 중요하지는 않겠지 만 인터페이스가 항상 반응하고 항상 당신을 이해하는 것이 중요하다는 사실을 발견했습니다.
 항상 살아 있다고 느낍니다.
 인터페이스에 대한 당신의 기대와 이해가 그 인터페이스에 익숙해지기 위해서 정말로 중요합니다.
 필요할 때 언제나 당신에게 응답 할 것이라는 것을 깨닫기 위해서입니다.

그리고 이것은 상호 작용의 시작뿐만 아니라 상호 작용의 중간에있을 때 움직임의 변화에도 적용됩니다. 그리고 당신은 변화하고 있습니다.
 우리가 방해에도 반응하는 것이 중요합니다.
 따라서 좋은 예는 iPhone 10에서 멀티 태스킹입니다.
 그래서 우리는 손가락을 화면의 절반 위로 밀어 올리며 포즈를 취하는 이런 일시 중지 제스처를 가지고 있으므로이 움직임의 변화를 감지하는 방법을 찾아야합니다.
 그렇다면 어떻게해야할까요? 이러한 움직임의 변화를 어떻게 감지 할 수 있습니까? 우리는 타이머를 사용해야합니까? 몇 시간 동안 손가락이 일정한 속도 이하로 떨어질 때까지 기다렸다가 멀티 태스킹 카드를 가져 가야합니까? 음, 너무 느립니다.
 사람들은 즉시 멀티 태스킹을 할 수 있기를 기대합니다.
 그리고 우리는 그들만큼 빨리 대응할 수있는 방법이 필요합니다.
 그래서, 대신 우리는 당신의 손가락의 가속도를 봅니다.
 잠시 멈추었을 때 손가락의 가속도가 크게 증가했습니다.
 실제로 멈출수록 빠를수록 빨리 감지 할 수 있습니다.
 따라서 실제로는 타이머를 기다리는 대신 모션의 변화에 ​​대해 실제로 빠르게 응답합니다.
 따라서 리디렉션에 가능한 한 빨리 응답하는 좋은 예입니다.
 따라서 이것은 중단 및 재 지정의 개념입니다.
 이 물건들은 인터페이스가 실제로 당신에게 연결되어 있다고 느끼게합니다.
 다음으로, 우리는 인터페이스의 아키텍처에 대해 조금 이야기하고 싶다.
 개념적으로 어떻게 배치했는지.
 그리고 우리가 그렇게 할 때, 운동을 통해 공간적 일관성을 유지하는 것이 중요하다고 생각합니다.
 그게 무슨 뜻 이죠? 이런 종류의 것은 우리의 객체 영속 기억이 실제 세계에서 작동하는 방식을 모방합니다.
 따라서 사물은 부드럽게 떠나 대칭 경로로 우리의 지각에 들어갑니다.
 뭔가가 사라지면, 그것이 어디에서 왔는지 예상 할 수 있습니다. 권리? 그래서, 내가이 단계에서이 길을 떠나서 그런 식으로 등장한다면, 당신은 꽤 놀랄 것입니다, 그렇죠? 왜냐하면 그건 불가능합니다.
 그래서 우리는 우리 모두가 세계에서 가지고있는 일관된 공간 감각으로 놀고 싶었습니다.
 즉, 인터페이스에서 어떤 것이 보이지 않고 다시보기로 돌아 오면 대칭 경로에서 그렇게해야합니다.
 그것은 들어가고 떠날 때 일관된 오프 스크린 경로를 가져야합니다.
 좋은 예는 실제로 iOS 탐색입니다.
 이 목록의 요소를 탭하면 오른쪽에서부터 슬라이드됩니다.
 뒤로 버튼을 탭하면 오른쪽으로 돌아갑니다.
 그것은 대칭 경로입니다.
 각 요소는 두 주에서 모두 일관된 위치에 있습니다.
 이것은 또한 제스처를 보강합니다.
 내가 그것을 오른쪽으로 밀어 넣는다면, 그것이 그것이 사는 곳이라는 것을 알기 때문에, 나는 그것을 할 수 있습니다.
 예상대로입니다.
 우리가 이것을하지 않으면 어떻게 될까요?
 다음은 예를 들어, 무언가를 두 드렸을 때 슬라이드가 들어가서 뒤로 치면 사라집니다.
 그리고 연결이 끊어지고 혼란 스럽다고 느끼십니까? 내가 어딘가에 보내고있는 것 같아.
 사실, 내가 어딘가에 보내고 있다는 의사 소통을 원한다면, 어떻게 할 수 있겠는가? 그래서, 그것은 공간적 일관성의 주제입니다.
 그것은 제스처가 세계에 대한 우리의 공간적 이해와 조화를 이루도록 도와줍니다.
 이제 다음은 제스처의 방향을 암시하는 것입니다.
 우리 인간은 항상 우리 경험의 다음 몇 단계를 예언하고 있습니다.
 우리는 항상 감동의 다음 몇 단계를 예측하기 위해 세상에서 일어나고있는 모든 것의 궤도를 사용하고 있습니다.
 그래서 우리는 인터페이스가 그 예측에 참여할 때 훌륭하다고 생각합니다.
 여기에 두 가지 상태, 초기 상태 및 최종 상태가있는 경우
 그 대상과 중간 전환이 있습니다.
 객체는 제스처 또는 애니메이션을 통 하든지간에 초기 상태에서 최종 상태로 커지는 방식으로이 두 상태간에 부드럽게 전환해야합니다.
 그래서 좋은 예가 Control Center입니다.
 우리는 Control Center에이 모듈들을 가지고 있습니다. 여기에서 여러분은 누를 때 최종 상태의 방향으로 손가락을 향해 자라면서 결국 실제로 열리게됩니다.
 그래서, 그것은 암시입니다.
 제스처가 예상되고 예측 가능하게 만듭니다.
 이제 다음 중요한 원칙은 터치 상호 작용을 경량으로 유지하는 것입니다.
 당신은 멀티 터치의 밝기가 가장 과소 평가 된 부분 중 하나라고 생각합니다.
 그것은 통풍이 잘되는 swipes와 스크롤과 우리가 모두 익숙해있는 모든 도청 장치를 가능하게합니다.
 그것은 모두 초경량입니다.
 그러나 우리는 또한 그들의 움직임을 증폭시키고 자합니다.
 당신은 작은 입력을 받아 큰 출력을 내고, 뭔가를 움직이거나 던지고 만족시키는 느낌을주고 확대 된 결과를 얻고 싶습니다.
 그렇다면 이것이 인터페이스에 어떻게 적용됩니까? 음, 짧은 상호 작용으로 시작됩니다.
 짧고 가벼운 상호 작용.
 그리고 우리는 모든 센서와 모든 기술을 사용하여 센서에 대해 많은 것을 이해합니다.
 일종의 제스처에 포함 된 에너지와 운동량 프로파일을 생성합니다.

위치, 속도, 속도, 힘, 우리가 알고있는 모든 것을 사용하여이 제스처의 일종의 관성 프로파일을 생성합니다.
 그런 다음 우리는 그것을 받아들이고 확장 된 움직임을 생성합니다.
 그것은 여전히 ​​당신의 연장처럼 느껴집니다.
 그래서, 당신은 가벼운 상호 작용으로 만족스러운 결과를 얻습니다.
 그래서, 이것의 좋은 예가 실제로 스크롤링입니다.
 짧은 시간 동안 손가락 만 화면에 표시되지만 시스템이 모든 에너지와 기세를 보존하고 정상적으로 인터페이스로 전송합니다.
 그래서, 만약 이것이 없다면? 그 똑같은 말투는, 음, 너를 아주 멀리하지 않을거야.
 그리고 스크롤하려면 스크롤을 길게 눌러야합니다. 수동으로 입력해야합니다.
 그것은 사용하는 데 큰 고통이 될 것입니다.
 이것에 대한 또 다른 좋은 예는 슬쩍으로 집에 돌아 오는 것입니다.
 손가락이 화면 상 매우 가벼운 시간.
 그리고, 그것은 멀티 터치의 매체에 여전히 고유하게 느껴지는 훨씬 더 가볍고 가벼운 몸짓을 만들어냅니다.
 손가락으로 화면을 움직이고 발판으로 돌아 가기 때문에 많은 버튼을 사용하여 근육 기억을 재사용 할 수 있습니다.
 그리고 그것은 단지 스 와이프가 아니라 도청입니다.
 인터페이스가 모든 상호 작용에 만족스럽게 응답하는 것이 중요합니다.
 인터페이스는 당신을 이해한다는 신호입니다.
 인터페이스가 생생하게 느껴지고 연결되는 것이 중요합니다.
 그래서, 그것은 가벼움과 증폭의 주제입니다.
 다음은 고무 밴딩입니다.
 인터페이스의 경계를 부드럽게 나타냅니다.
 따라서이 예에서 인터페이스는 점진적이고 부드럽게 거기에 아무것도 없다는 것을 알려줍니다.
 그리고, 그것을 통해 당신을 추적합니다.
 언제나 그것이 당신을 이해하고 있음을 당신에게 알려주고 있습니다.
 네가 그렇게하지 않으면 어떻게 될까? 글쎄, 그렇게 느낄거야.
 그것은 매우 가혹하고 당혹 스럽다고 느낄 것입니다.
 너 거기 벽에 부딪쳤다.
 기분이 좋지 않을까? 그리고 실제로 화면의 가장자리 꼭대기에있는 고정 된 전화와 전화의 차이를 실제로 알지 못합니다. 맞습니까? 그래서, 항상 당신이 가장자리에 도달했다고 말하는 것이 중요합니다.
 그리고 이것은 전환에도 적용됩니다.
 그것은 당신이 가장자리에 충돌했을 때뿐 아니라 한 일에서 다른 일로 손을 내밀 때도 마찬가지입니다.
 추적.
 그래서, 이것의 좋은 예가 도킹 위로부터 슬라이딩으로 전환 할 때입니다.
 그것은 단지 벽에 부딪히지 않고 한 가지만 추적을 멈추고 다른 것은 계속 이어집니다.
 둘 다 매끄러운 곡선으로 부드럽게 전달되므로 한 물건에서 다른 물건으로 물러가는 가혹한 순간이있는 것처럼 느껴지지 않습니다.
 다음은 부드러운 모션 프레임을 디자인하는 것입니다.
 그래서 여기에 작은 물건이 위아래로 움직이는 것을 상상해보십시오.
 매우 간단합니다.
 그러나 우리 모두는이 물체가 실제로 움직이지 않는다는 것을 알고 있습니다. 우리는 모두 움직이는 것에 대한 인식 만 가지고 있습니다.
 왜냐하면 우리는 한꺼번에 많은 프레임을 볼 수 있기 때문에 움직이는 환상을 우리에게줍니다.
 그래서 우리가 모든 움직임의 틀을 잡아서 여기에 펼쳐 놓으면.
 시간이 지남에 따라 볼이 움직이는 것을 볼 수 있습니다. 우리가 염려하는 것은 바로 인접한 프레임 사이에 너무 많은 시각적 변화가있는 곳입니다.
 이것은 인터페이스의 인식이 조금 고르지 않게 될 때입니다.
 이 비주얼 스트로브를 얻을 수 있습니다.
 그리고 이것은 두 프레임 간의 차이가 너무 크기 때문입니다.
 그리고, 그것은 당신의 시력에 반하는 스트로브입니다.
 여기에 두 가지가 모두 초당 30 프레임으로 움직이는 예제가 있습니다.
 그러나 오른쪽에있는 것보다 훨씬 더 부드럽게 보입니다. 오른쪽에있는 것이 너무 빨리 움직이기 때문에 스트로브입니다.
 내 시력에 대한 인식은 일종의, 깨어납니다.
 나는 그것이 더 이상 원활하게 움직이지 않는다고 믿지 않는다.
 따라서 제거해야 할 중요한 사항은 프레임 속도 만이 아니라는 것입니다.
 그것은 프레임 안에 있습니다.
 그래서, 우리는 프레임 속도에 의해 다소 제한적이며, 우리가 얼마나 빨리 움직일 수 있고 여전히 부드러운 움직임을 유지할 수 있습니다.
 그래서 이것은 초당 30 프레임입니다.
 초당 최대 60 프레임을 움직이면 실제로 조금 더 빠르게 움직일 수 있고 부드러운 동작을 유지할 수 있습니다.
 우리는 섬광없이 더 빠른 움직임을 할 수 있습니다.
 그리고 우리가 할 수있는 추가 트릭이 있습니다. 우리는 모션 블러 같은 것을 할 수 있습니다.
 모션 블러는 기본적으로 눈이 움직이는 방식과 카메라 작동 방식과 같은 움직임에 대한 각 프레임의 더 많은 정보를 제공합니다.
 또한 2D 애니메이션 및 비디오 게임의 페이지를 스트레칭하여 가져올 수 있습니다.이 기술은 모션 스트레칭이라고 불리는이 기술은 각 프레임의 내용을 뻗어 속도와 함께 움직일 때이 탄성적인 모양을 제공합니다.
 그래서 움직이기 때문에, 이런 종류의 것 같습니다.
 그래서, 각기 다른 기법들 (종류)은 모션에서 무슨 일이 벌어지고 있는지에 대해 더 많은 정보를 시각적으로 인코딩하려고 시도합니다.

그리고 저는이 마지막 하나, 모션 스트레칭에 조금 집중하고 싶습니다. 실제로 iPhone 10에서이 작업을 수행하기 때문입니다.
 아시다시피 앱을 실행하면 아이콘이 탄력적으로 펼쳐져 앱이됩니다.
 그리고 앱을 닫을 때 반대 방향으로 뻗어 있습니다.
 모션의 각 프레임 사이에 약간의 추가 정보를 제공하여 조금 더 부드럽게 보이게 만듭니다.
 마지막으로 우리는 애니메이션이 아닌 행동으로 작업하기를 원합니다.
 현실 세계의 것들은 언제나 역동적 인 움직임의 상태에 있으며, 항상 당신의 영향을받습니다.
 실제 애니메이션처럼 애니메이션처럼 작동하지 않습니다. 실생활에 의해 규정 된 애니메이션 곡선이 없습니다.
 그래서 우리는 애니메이션과 행동을 당신과 대상 사이의 대화로 생각하고 싶습니다.
 인터페이스에서 규정하지 않음.
 따라서 정적 인 것들을 움직이는 것으로 옮기고 대신 행동에 대해 생각하십시오.
 네이선이 이걸 깊이 들여다 보려고합니다.
 그러나 여기에 간단한 예가 있습니다.
 따라서 사진에서는 개념적으로 더 가벼워서 사진에 질량이 적습니다.
 하지만 앱을 스 와이프하면 앱에 더 많은 부분이 생깁니다.
 개념적으로 더 무겁기 때문에 시스템에 더 많은 부분을 부여합니다.
 그렇기 때문에 우리와 같이 생각하고 작동하는 인터페이스를 설계하는 방법에 대해서는 조금 있습니다.
 응답으로 시작합니다.
 일들이 당신과 연결되어 있고, 우리의 마음이 끊임없이 움직이는 방식을 수용하기 위해서.
 공간 일관성을 유지하고, 일관된 공간 감각을 강화하고, 그 공간 내에서 대칭 전환을 유지합니다.
 그리고 몸짓의 방향을 암시합니다.
 미래에 대한 우리의 예측을 재생합니다.
 그리고 경량 인터랙션을 유지하면서 출력을 증폭하십시오.
 만족스러운 반응을 얻으려면 여전히 가볍고 가벼운 상호 작용을 유지해야합니다.
 그리고 인터페이스에 부드러운 경계와 가장자리가 있어야합니다.
 이 인터페이스는 당신이 엣지를 치거나 한 가지를 추적하는 것에서 다른 것을 추적하는 것으로 전환 할 때조차도 항상 당신에게 우아하게 응답합니다.
 그리고 당신과 함께 작동하는 매끄러운 동적 행동을 디자인하십시오.
 그래서, 그것은 우리의 마음의 연장처럼 느껴지는 빌딩 인터페이스에 접근하는 방법에 대한 몇 가지 원칙입니다.
 그래서 조금 더 깊이 들어가 봅시다.
 저는 제 동료 인 Nathan de Vries에게 모션을 디자인하도록 의논 할 것입니다 - 모션과 모션, 자연스러운 모션 모두에 대한 모션을 디자인하는 방법에 대해 이야기하겠습니다.
  고마워, 찬.
 안녕 모두.
 내 이름은 Nathan입니다. 오늘은 동적 인 모션으로 디자인하는 것에 대해 이야기 할 수있어서 기쁩니다.
 따라서 Chan이 말한 것처럼 우리의 마음과 우리 몸은 끊임없이 변화의 상태에 있습니다.
 우리 주변의 세계는 변화의 상태에 있습니다.
 그리고 이것은 우리의 인터페이스가 더 촉각 적으로 변함에 따라 우리의 인터페이스가 똑같이 행동 할 것이라는 기대를 불러 일으키며 우리의 기대를 훨씬 더 충실하게 바꿉니다.
 이제 우리가 인터페이스에서 모션을 사용한 한 가지 방법은 타임 애니메이션입니다.
 버튼이 화면에 두드려지고, 고삐가 디자이너에게 넘겨진다.
 그리고, 그들의 직업은 시간을 통해 완벽한 애니메이션 프레임을 제작하는 것입니다.
 그리고 애니메이션이 완성되면 인터페이스를 사용하는 사람에게 컨트롤이 전달되어 계속 상호 작용할 수 있습니다.
 그래서, 당신은 애니메이션과 상호 작용이 이런 종류의, 호출과 응답 패턴에서 시간을 통해 선형 적으로 움직이는 것처럼 생각할 수 있습니다.
 유체 인터페이스에서 인터페이스 종류를 사용하는 사람의 동적 특성은 설계자로서 시간이 지남에 따라 제어를 벗어납니다.
 대신 우리의 역할은 동작이 상호 작용과 함께 어떻게 작동하는지 설계하는 것입니다.
 그리고 우리는 항상 실행중인 항상 연속적인 동적 동작을 통해이 작업을 수행합니다.
 그래서 제가가는이 역동적 인 행동들입니다. 오늘은 정말로 집중하고 있습니다.
 우선, 우리는 끊김없는 모션에 대해 이야기 할 것입니다.
 그리고 동적 모션이 자신의 연장 인 것처럼 느껴지도록 만드는 것은 모션 요소입니다.
 그런 다음 인물을 살펴 보겠습니다.
 타이밍 커브가없고 시간이 잡힌 애니메이션이 없어도 인터페이스에서 장난, 캐릭터 또는 텍스처의 개념을 모션에 도입 할 수 있습니다.
 마지막으로, 모션 자체가 인터페이스를 통해 사람들이 의도하는 바에 대한 단서를 제공하는 방법을 살펴 보겠습니다.
 몸짓의 움직임을 실제로보고 제스처가하려고하는 것에 대한 불확실성을 해결할 수있는 방법.
 그래서, 물건을 걷어차 기 위해, 완벽한 동작을 살펴 봅시다.
 원활한 동작이란 무엇을 의미합니까? 그래서, 우리가 모두 익숙해 질 수 있다고 생각하는 예제를 보겠습니다.
 그래서, 여기에 우리는 차가 있고 일정한 속도로 순항 중입니다.
 그런 다음 브레이크가 적용되어 완전히 멈추게됩니다.
 다시 한번 살펴 보도록하겠습니다.하지만 이번에는 시간이 지남에 따라 차의 위치를 ​​계획 할 것입니다.
 그래서,이 커브의 맨 처음에는 일종의 직선이며 오른쪽으로 향하게됩니다.

그리고, 이것은 차의 위치가 일정한 속도로 움직이고 있다는 것을 보여줍니다, 그것은 변하지 않습니다.
 그런 다음 곡선이 구부러지기 시작하고이 직선에서 부드럽게 곡선을 그리기 시작합니다.
 그리고, 이것은 적용되는 브레이크입니다.
 마찰이 도입되면서 자동차가 감속하고 있습니다.
 그리고 커브의 끝까지 커브는 완전히 평평하고 수평이며 현재 위치가 변하지 않음을 나타냅니다.
 차가 멈췄다는거야.
 따라서이 위치 곡선은 본질적으로 우리가 이음매없는 모션이라고 부르는 시각화입니다.
 그 선은 완전히 끊어지지 않았으며 방향이 갑자기 바뀌지 않았습니다.
 부드럽고 매끄 럽습니다.
 실제로 자동차에 마찰을 가하는 브레이크와 같은 새로운 동적 동작이 자동차의 동작에 도입 될 때도 마찬가지입니다.
 그리고 자동차가 완전히 멈추더라도 곡선이 완전히 매끄 럽음을 알 수 있습니다.
 이 눈에 띄지 않는 품질이 있습니다.
 차가 언제 정확하게 멈췄는지 알 수 없습니다.
 그래서, 왜 나는 자동차에 대해 이야기하고 있습니까? 이것은 유체 인터페이스에 관한 이야기입니다. 그래서, 우리는 육체적 인 세계의 특성이 훌륭한 행동을하도록 만든 것처럼 느낍니다.
 이 방에있는 모든 사람들은 차 이해가 매우 간단하다는 것을 알고 있습니다. 왜냐하면 우리는 공유 된 이해력을 가지고 있기 때문이며, 차와 같은 물체가 어떻게 움직이는지를 공유하는 직관력을 공유하기 때문입니다.
 그리고, 이것은 우리를 훌륭한 참고 점으로 만듭니다.
 지금, 나는 우리가 문자 그대로 우리의 인터페이스를 운전하는 자동차의 완벽한 물리적 시뮬레이션을 구축해야한다는 것을 의미하지는 않습니다.
 그러나 우리는 자동차의 움직임, 우리 주변의 물리적 세계에서 던지거나 움직이는 물건을 그린 다음 자신의 역동적 인 행동에 사용하여 자신의 움직임을 친숙하고 친근하며 믿을 수있게 만듭니다. 가장 중요한 것.
 이제 동적 동작에서 물리적 세계를 참조하는이 아이디어는 처음부터 스크롤과 함께 iPhone에있었습니다.
 아이가 바닥에 장난감 자동차를 밀어 넣을 수있는 것처럼 쉽게 iPhone을 들고 홈 화면에서 좋아하는 앱으로 스크롤 할 수 있습니다.
 그래서, 우리가 가지고있는이 스크롤하고 역동적 인 행동의 핵심, 종류, 특징은 무엇입니까? 글쎄요, 첫째, 그것은 우리가 모두 세계 곳곳에서 움직이는 물체에 대해 가지고있는 이해를 공유하는 그런 직관에 두드러지고 있습니다.
 그리고, 우리가 그 대상들에 미친 영향.
 콘텐츠의 움직임은 완벽하게 매끄럽게 처리되므로 콘텐츠를 드래그하는 동안 상호 작용하는 동안 내 몸은 유동적이어서 운동의 유동성을 제공합니다.
 그러나 콘텐츠를 놓아 버리면 곧바로 중단됩니다.
 그래서, 우리는 인터페이스에 투입되는 노력의 추진력을 유지하고 있습니다.
 스크롤링에 사용되는 마찰의 양이 일정하기 때문에 예측 가능하고 마스터하기가 쉽습니다.
 그리고 마지막으로, 내용은 마치 차가 멈출 때를 정확히 알지 못하는 차 같은 종류의 멈추게됩니다.
 그리고 이러한 결말의 결여는 콘텐츠가 항상 움직이고 항상 움직일 수 있다는 생각을 강화시켜 주므로 콘텐츠를 스크롤하는 동안 손가락을 다시 내려 놓을 수있는 것처럼 느껴집니다. 스크롤을 계속하십시오.
 끝내기 위해 기다릴 필요가 없습니다.
 그래서 훌륭한 행동을 취할 물리적 세계의 수많은 특성이 있습니다.
 우리는 그들 모두에 대해 말할 시간이 없지만, 우리가 개인적으로 우리 자신의 디자인 작업에 없어서는 안될 필수적인 것을 발견했기 때문에이 다음 것에 집중하고 싶습니다.
 그래서이 아름다운 꽃과 같은 물질들,이 꽃의 천연 섬유는 탄력이라고 불리는이 유기적 인 특징을 가지고 있습니다.
 그리고 탄성은 일단 응력이나 변형이 제거되면 소재가 정상적으로 휴식 상태로 되돌아가는 경향입니다.
 우리 자신의 몸은 엄청나게 탄력적입니다.
 이제 우리는 근육의 힘 때문에가 아니라 긴장을 풀 수있는 능력 때문에 믿을 수 없을만큼 먼 거리를 달릴 수 있습니다.
 이 일을하는 것은 그들의 탄력성입니다.
 스트레스와 스트레인이 제거되면 우리의 근육은 수축하고 이완됩니다.
 그리고 이것은 우리가 에너지를 보존하는 방법입니다.
 자연스럽고 유기적 인 느낌을줍니다.
 iPhone 10에서도 동일한 탄력성이 사용됩니다.
 홈 화면에서 아이콘을 누르면 탄력적 인 행동으로 앱이 당겨집니다.
 당신이 원하는 곳으로 정확히 가져 오십시오.
 또한 하단에서 스 와이프하면 앱이 홈 화면의 완벽한 위치에 다시 배치됩니다.
 우리는 또한 스크롤에 탄력성을 사용합니다.
 그래서 너무 멀리 스크롤하고 고무 밴드가 Chan이 말했던 것처럼, 놓았을 때 내용이 탄력성을 사용하여 경계 내에서 뒤로 당겨서이 쉬는 자세로 들어갈 수있게하고 다음에 스크롤하려는 시간을 준비합니다.
 그럼,이 신축성이 장면 뒤에서 어떻게 작동하는지 좀 더 자세히 살펴 봅시다.
 스크롤하는 내용은 봄에 붙은 공이라고 생각할 수 있습니다.
 봄의 한쪽 끝은 현재 값입니다.
 여기에 내용이 디스플레이에 표시됩니다.
 그리고 봄의 다른 끝은 콘텐츠가 탄력성 때문에 가고 싶어하는 곳입니다.

그래서, 현재의 목표 값을 목표로 끌어들이는이 봄을 얻었습니다.
 그것의 행동은 내용의 위치에 영향을 미치고 있습니다.
 이제 스프링은 기본적으로 목표 값을 향해 현재 값을 끌어옵니다.
 그리고 봄에 대해 흥미로운 점은 이것이 완벽하게 수행된다는 것입니다.
 이 매끄러움은 일종의 행동에 내장되어 있습니다.
 그리고 이것이 유체 인터페이스 디자인을 수행하는 데있어 다목적 도구가되었습니다.
 너 너 일종의 자유로운 물건이야.
 그것은 행동 자체에 구워집니다.
 그래서 우리는 목표를 향해 움직이는 가치에 대한이 행동을 좋아합니다.
 우리는 어디로 가야할지 공을 말할 수 있으며, 우리는 목표물쪽으로 움직이는 공의 완벽한 동작을 얻을 것입니다.
 그러나 우리는 그것이 얼마나 빨리 움직이는지를 조금 더 제어하기를 원합니다.
 그리고 오버 슈트 여부.
 그럼, 어떻게해야합니까? 글쎄, 우리는 볼을 조금 더 크게 만들거나 더 크게 만들거나 더 무겁게 만들 수 있습니다.
 그리고, 우리가 그렇게한다면, 공의 관성이나 움직이기 시작하려는 의지를 바꿉니다.
 아니면 움직이기를 원치 않을 수도 있습니다.
 그리고, 당신은이 작은 오버 슛으로 끝납니다.
 우리가 바꿀 수있는 또 다른 특성은 봄의 강성 또는 봄의 인장 강도입니다.
 그리고 이것이하는 일은 공에 적용되는 힘에 영향을 미치며 목표를 향해 얼마나 빨리 움직이는지를 변경하는 것입니다.
 그리고 마침내, 차의 많은 부분과 차의 제동과 같이, 볼이 앉아있는 표면의 감쇠 또는 마찰을 변경할 수 있습니다.
 그리고, 이것은 일종의, 시간이 지남에 따라 볼을 감속시키는 브레이크 역할을 할 것이고, 우리의 오버 슛 능력에도 영향을 줄 것입니다.
 그래서 공과 스프링의 물리적 특성은 일종의 물리학 교재입니다. 맞습니까? 그것은 과학적 맥락에서 매우 유용하지만, 우리는 우리 자신의 디자인 작업에서 화면상의 객체의 동작을 제어하기 위해 다소 압도적이거나 다루기 힘들 수 있다는 것을 발견했습니다.
 그래서, 우리는 우리의 디자인 툴이 그들에게 인간 인터페이스가 조금 있어야한다고 생각합니다.
 도구를 사용하는 디자이너의 요구를 반영해야합니다.
 그래서, 어떻게 그것에 대해 가야합니까? 이러한 속성을보다 단순하게 디자인을 단순화하기 위해 어떻게 단순화합니까? 그래서 질량 뻣뻣함과 댐핑이 장면 뒤에 남을 것입니다. 이것은 우리가 사용하고있는 스프링 시스템의 근본적인 특성입니다.
 그러나 인터페이스를 두 가지 간단한 속성으로 단순화 할 수 있습니다.
 첫 번째는 100 % 댐핑에서 얼마나 많은 오버 슛이 발생하는지 제어하는 ​​댐핑입니다. 스프링이 무한정 진동 할 때 0 % 댐핑까지 오버 슛이 발생하지 않습니다.
 두 번째 속성은 응답입니다.
 그리고, 이것은 얼마나 빨리 가치가 목표물에 도달하려고 시도 하는지를 제어합니다.
 그리고 단어 길이를 사용하지 않았 음을 알 수 있습니다.
 우리는 실제로 탄성 동작을 설명 할 때 지속 시간 사용을 피하고 싶습니다. 이는이 동적 변경 개념을 강화하기 때문입니다.
 봄은 항상 움직이며 다른 곳으로 이동할 준비가되었습니다.
 이제이 두 가지 특성에 대한 기술 용어는 댐핑 비율과 주파수 응답입니다.
 따라서 이러한 디자인을 자신의 디자인 작업에 사용하려면 해당 용어를 찾아 볼 수 있으며이를 변환하는 쉬운 방법을 찾을 수 있습니다.
 이제 탄성 동작을 제어하기위한이 두 가지 간단한 속성을 갖게되었습니다.
 그러나 이러한 곡선을 통해 가질 수있는 가능성은 무한합니다.
 마찬가지로 수백, 수천, 수백만 가지의 다양한 방법으로이 두 가지 간단한 속성을 구성하고 매우 다른 동작을 얻을 수 있습니다.
 앱에서 캐릭터를 만드는 데 어떻게 이것을 사용합니까? 우리 앱의 느낌을 제어하려면? 우선, 우리는 장치가 도구라는 것을 기억해야합니다.
 그리고 도구를 존중해야합니다. 도구는 용도와 함께 사용될 때 불필요한 동작을 유발하지 않도록 방해하지 않아야합니다.
 그래서, 우리는 당신이 시작해야한다고 생각합니다.
 봄에는 오버 슛이 필요하지 않습니다.
 탄력있는 스프링을 사용할 필요가 없습니다.
 따라서 100 % 댐핑으로 시작하거나 탄성 동작을 조정할 때 오버 슛이 발생하지 않도록하는 것이 좋습니다.
 그렇게하면 가까이에있는 작업에서 벗어나지 않는 부드럽고 우아하고 완벽한 동작을 얻을 수 있습니다.
 마치 이메일을 빨리 찍는 것처럼.
 그래서, 탄력을 사용하는 것이 언제 적절한가요? 그게 적절한 때가있을거야, 그렇지? 자, 모션 자체를 주도하는 제스처가 추진력을 가지고 있다면, 우리는 약간의 오버 슛으로 그 기세를 보상해야한다고 생각합니다.
 다른 말로하면, 제스처가 기세를 가지고 있고 오버 슛이없는 경우, 종종 동작이 깨어 지거나 불만족스럽게 느껴질 수 있습니다.
 우리가 이것을 사용하는 곳의 예는 뮤직 앱에 있습니다.
 따라서 음악 앱에는 화면 하단에있는 Now Playing을 나타내는 작은 미니 바가 있으며,이 막대를 살짝 눌러 Now Playing을 표시 할 수 있습니다.
 Tap은 Now Playing의 프리젠 테이션 방향에 어떤 추진력도 없으므로 100 % 댐핑을 사용하여 오버 슛을 방지합니다.

하지만 지금 재생을 취소하기 위해 스 와이프하면 해고의 방향에 기세가 있습니다. 따라서 제스처를 훨씬 더 만족스럽게 만들기 위해 80 % 댐핑을 사용하여 약간의 바운스와 스킬을 사용합니다.
 Bounciness는 기능적 수단으로 유틸리티로 사용할 수도 있습니다.
 표면 아래에 뭔가가 있다는 유용한 힌트가 될 수 있습니다.
 iPhone 10을 사용하여 손전등을 켜고 카메라를 시작하기위한 표지에 두 개의 버튼을 추가했습니다.
 우연히 실수로 손전등을 켜는 것을 피하기 위해 손전등을 작동시키기 위해보다 의도적 인 제스처가 필요합니다.
 그러나 버튼을 탭하면 활발히 반응하는 의도적 인 제스처가 있다는 것을 모를 경우 탄력적으로 반응합니다.
 이런 종류의 장난기있는 느낌이 들었습니다.
 그리고 그 힌트는 버튼이 작동하고있을뿐 아니라 그것이 당신에게 응답하고 있다는 것을 가르쳐줍니다.
 그러나, 조금 더 단단히 누르면, 활성화 될 것입니다.
 그것은 당신을 가르치는 것과 같습니다.
 그것은 모션의 방향을 암시합니다.
 그래서, bounciness는 이런 종류의 것을 나타 내기 위해 사용될 수 있습니다.
 이제까지는 모션을 사용하여 주변을 움직이거나 스케일을 변경하여 화면에서 시각적 표현을 변경하는 것에 대해 이야기 해 왔습니다.
 그러나 우리는 다양한 방식으로 동작을 인식합니다.
 빛과 색의 변화, 질감과 느낌을 통해.
 또는 심지어 소리.
 우리가 느끼는 많은 다른 감각들 - 우리의 감각이 감지 할 수 있습니다.
 우리는 이것이 앱의 성격을 조정할 때 모션 이상으로 나아갈 수있는 기회라고 생각합니다.
 움직임에 대한 동적 거동과 소리 및 촉각에 대한 동적 거동을 결합하여 인터페이스가 실제로 느끼는 방식을 근본적으로 바꿀 수 있습니다.
 그래서, 당신이 보았을 때, 그리고 당신이 듣고, 제스처의 결과를 느낄 때, 그것은 스크롤링 동작을 매우 촉감적인 인터페이스처럼 느껴지도록 변형시킬 수 있습니다.
 자, 앱의 특성을 만들 때 생각하고 싶은 마지막 메모가 하나 있습니다.
 그리고 그게 응집력 있고, 당신이 성격을 유지하고 있다는 것입니다.
 자,이게 무슨 뜻이야? 따라서 앱 내 또는 시스템 전체에서조차도 행동을 행동의 집합으로 취급하는 것이 중요합니다.
 예를 들어, 스크롤 할 때 스크롤하는 동작을 사용하여 페이지를 아래로 스크롤 한 다음 상태 막대를 탭하여 탄성 동작을 사용하여 페이지의 끝까지 스크롤합니다.
 두 경우 모두 페이지 자체가 동일한 방식으로 움직이는 것처럼 느껴지며 두 가지 유형의 동작이 동작을 주도하고 동작에 영향을 미치더라도 동일한 동작을 나타냅니다.
 이제는 스크롤링과 같은 단일 상호 작용을 넘어 확장되었습니다.
 전체 앱에 적용됩니다.
 장난이 심한 앱이 있다면 그 캐릭터를 받아 들여서 전체 앱을 동일한 방식으로 느껴야합니다.
 따라서 사람들은 앱의 한 가지 행동을 배우고 나면 반복적으로 배우기 때문에 다른 행동을 매우 쉽게 습득 할 수 있습니다.
 그리고 우리가 배운 것이 다른 행동으로 피를 흘립니다.
 그래서, 다음은 모션이나 동적 모션을 의도와 일치시키는 것에 대해 조금 이야기하고 싶습니다.
 따라서 버튼과 같은 개별적인 상호 작용의 경우 제스처의 의도가 무엇인지 명확하게 알 수 있습니다.
 권리? 여기에 세 가지 시각적 인 표현이 있습니다.
 그리고 그 중 하나를 살짝 누르면 그 결과가 명확합니다.
 그러나 스 와이프 같은 제스처를 사용하면 의도가 덜 분명해집니다.
 의도는 몸짓의 움직임에 거의 코드화되어 있다고 말할 수 있습니다. 따라서 우리가해야 할 일을 결정하기 위해 모션이 무엇을 의미 하는지를 해석하는 것이 우리의 역할, 즉 우리의 역할입니다.
 예를 살펴 보겠습니다.
 그래서 FaceTime 콜과 일대일 FaceTime 콜을 만들고, FaceTime에 스크린 코너에 자신의 작은 비디오 표현이 있다고 가정 해 봅시다.
 그리고, 이것은 다른 쪽 끝에있는 사람이 보는 것을 볼 수 있습니다.
 이 플로팅 비디오를 PIP라고 부릅니다. PIP는 그림 속의 그림을 나타냅니다.
 이제는 PIP를 움직일 수 있다는 것을 명확하게 보여주기 위해 PIP를 떠올리게합니다.
 그리고, 그것은 정말 가벼운 영화와 함께 화면의 어떤 구석으로 이동할 수 있습니다.
 따라서 Play, Pause 및 Skip 버튼과 비교하면 차이점은 무엇입니까? 따라서이 경우에는 실제로 보이지 않는 영역이 4 개 있습니다.
 더 이상 우리는이 세 가지 별개의 시각적 표현을 두드리고 있습니다.
 우리는 제스처를 통해 일어나는 동작을보고 종류를 이해해야합니다.
 어느 구석에 갈 생각 이었습니까? 이제 우리는 제스처의 화면 끝점에서 이러한 영역을 호출합니다.
 그리고 PIP가 던져 질 때, 우리의 목표는 의도 된 올바른 종말점을 찾는 것입니다.
 그리고 이것을 엔드 포인트를 제스처의 의도에 맞게 정렬합니다.
 그래서, 한 가지 접근법은 PIP를 드래그하면서 가장 가까운 끝점을 추적하는 것입니다.
 자, 이런 종류의 작품.
 PIP를 화면의 다른 구석으로 이동할 수는 있지만 PIP를 조금 더 이동하자마자 고장이 나기 시작합니다.

이제, 실제로는 PIP를 아주 먼 곳으로 드래그해야합니다.
 다른 구석에 꽤 가깝다.
 따라서, 그것은 내 의견을 실제로 확대하지 않습니다.
 그것은 나를 위해 실제로 작동하지 않습니다.
 그리고 PIP를 시도해 볼 때 가장 가까운 모서리로 되돌아갑니다. 이것은 내가 예상했던 것만은 아닙니다.
 그래서 여기에있는 문제는 우리가 단지 자세를보고 있다는 것입니다.
 우리는 PIP의 추진력과 그것이 튕겨 질 때의 속도를 완전히 무시하고 있습니다.
 그렇다면 우리는 어떻게 끝점을 결정할 것인지에 대한 추진력을 어떻게 통합 할 수 있습니까? 따라서 이것에 대해 생각해 보시려면 잠시 동안 엔드 포인트를 무시하고 한 발 뒤로 물러 설 수 있다고 생각합니다.
 그리고 문제를 단순화합니다.
 궁극적으로 내가 여기서하려고하는 것은 화면에서 콘텐츠를 이동하는 것입니다.
 그리고 실제로 스크롤을 사용하면 근육 메모리가 많아졌습니다.
 그래서, 우리가 여기서 사용하지 않는 이유는 무엇입니까? 우리는 항상 스크롤 동작을 사용하므로, 스크롤 할 때 콘텐츠가 얼마나 남았는지에 대한 자연스러운 직감이 있습니다.
 여기에서 PIP를 스크롤 할 때 스크롤링을 통해 익숙한 익숙한 감속을 사용하여 속도가 느려지고 속도가 느려지는 것을 볼 수 있습니다.
 그리고 기본적으로 여기를 이용함으로써 우리는 사람들이 다른 곳에서 배운 것을 강화하고 있습니다.
 그 행동은 단지 시스템에 기대되는 것을 행하는 것입니다.
 이제이 가상의 상상 속 PIP 포지션은 현실이 아닙니다.
 PIP가 인터페이스에 표시되지는 않을 것입니다.
 이것이 우리가 투사라고 부르는 것입니다.
 그래서 우리는 그것이 던져 질 때 PIP의 속도를 취했습니다.
 우리는 일종의 감속 률을 혼합했습니다. 우리가 거기서 스크롤하면 감속 할 수있는 위치로 끝납니다.
 그래서 우리가 던질 때 PIP에 가장 가까운 종점을 찾는 대신에, 우리는 투영 된 위치를 계산하고 그곳으로 이동할 수 있습니다.
 이제는 화면의 한 구석에서 다른 구석으로 가볍게 쓸어 넘기면서 예상 한 끝점으로 이동합니다.
 따라서 운동량을 끌어들이는이 아이디어는 대단히 유용합니다.
 그리고, 우리는 그것의 슈퍼 중요하다고 생각합니다.
 나는 당신과 당신의 자신의 애플 리케이션에서 이것을 할 수 있도록 당신과 이것을하기위한 몇 가지 코드를 공유하고 싶습니다.
 따라서이 기능은 PIP의 위치 속도 및 감속 률과 같은 속도를 취하며 동적 동작의 끝점으로 사용할 수있는 값을 제공합니다.
 꽤 간단합니다.
 팬 제스처 종료 코드의 FaceTime 예제를 보면 방금 UIScrollView를 사용하고 있음을 알 수 있습니다.
감속 비율.
 따라서 우리는 사람들이 스크롤을 할 때의 친숙 함과 스크롤 할 때 얼마나 멀리 갈 것인지를 생각합니다.
 그리고, 나는 그것을 내 생각으로 사용하고 있습니다.
 그래서 나는 PIP의 속도와 감속도를 취합니다. 그리고 나는 그 가상의 PIP 위치를 만듭니다.
 그리고이 가상의 투영 된 위치가 가장 가까운 모서리 위치로 사용됩니다.
 그리고 PIP를 retargeting하여 보내드립니다.
 따라서 투영법을 사용하여 위치의 끝점을 찾는이 아이디어는 드래그 또는 스 와이프되는 것에 매우 유용합니다. 실제로는 제스처의 추진력을 존중해야합니다.
 그러나이 투영 함수는 위치에 유용 할뿐만 아니라 비늘이나 회전에도 사용할 수 있습니다.
 또는 두 가지 조합도 가능합니다.
 그것은 당신이 제스처의 추진력을 존중하고 앱의 역동적 인 움직임이 자신의 연장 인 것처럼 느껴지도록하기 위해 정말로 사용해야하는 정말 다재다능한 도구입니다.
 그래서, 그것은 모션으로 디자인하고 있습니다.
 동적 인 모션.
 행동은 상호 작용과 함께 지속적이고 원활하게 작동해야합니다.
 우리는 우리 주변의 물리적 세계에 대한 우리의 공통된 직관에 기대고 있어야합니다.
 물리적 세계에서 객체가 어떻게 움직이고 움직이는 지에 관해 우리가 아이들로 배운 것들은 우리의 역동적 인 인터페이스에도 똑같이 적용됩니다.
 bounciness는 목적이 있어야한다는 것을 기억해야합니다.
 왜 그것을 사용하고 적절한 지 생각해보십시오.
 그리고 캐릭터와 질감을 추가 할 때 유틸리티와의 균형을 유지해야합니다.
 그리고 마지막으로, 추진력을 기르기 위해 노력하십시오.
 직책을 사용하지 말고, 처분 할 수있는 모든 정보를 사용하여 사람들이 실제로 가고 싶은 곳의 의도와 동의가 이루어 지도록하십시오.
 그리고 거기로 데려가십시오.
 따라서 제스처와 상호 작용에 유연하게 반응하는 방법에 대해 조금 더 이야기하려면 제 동료 인 Marcos를 무대에 소개하고 싶습니다.
 데려 줘서 고마워. 모두들.
  멋 졌어요.
 고마워, 네이 쓴.
 안녕 모두.
 내 이름은 마르코스.
 지금까지 인터페이스를 설계 할 때 유동성이 얼마나 중요한지 살펴 보았습니다.
 그리고 그 많은 것은 장치와의 상호 작용에서 비롯됩니다.
 이제이 섹션에서는 화면에서 터치하는 방법이 앱에서 제스처가되는 방법을 보여 드리겠습니다.
 그리고 인터페이스에 모든 표현과 의도를 포착하기 위해 이러한 제스처를 설계하는 방법.
 그래서 우리는 탭과 스 와이프와 같은 몇 가지 핵심 제스처의 디자인을 살펴볼 것입니다.

그런 다음 인터페이스에 대한 제스처를 디자인 할 때 따라야 할 몇 가지 상호 작용 원리를 살펴 보겠습니다.
 그런 다음 여러 동작을 처리하는 방법과이를 앱에 결합하는 방법을 살펴 보겠습니다.
 우리는 분명히 매우 단순한 몸짓, 꼭지를보고 시작할 것입니다.
 당신은 무언가를 생각할 것입니다. 꼭지는 디자인 할 필요가없는 것이라고 생각 하겠지만, 그 행동이 보이는 것보다 더 미묘한 차이가 나는 것을 보게 될 것입니다.
 이 예에서는 버튼 (이 경우 계산기 응용 프로그램)을 두드리는 방법을 살펴 보겠습니다.
 가장 먼저 기억해야 할 것은 버튼을 터치하면 버튼이 즉시 강조 표시되어야한다는 것입니다.
 이것은 버튼이 작동 중이며 시스템이 제 제스처에 반응하고 있음을 나타냅니다.
 그러나 터치가 올라갈 때까지 꼭지를 확인해서는 안됩니다.
 다음으로 기억해야 할 것은 탭 영역 주변에 여분의 여백을 만드는 것입니다.
 이 여분의 마진은 우리의 도청을 더 편안하게 만들 것이고, 상호 작용 중에 터치가 움직이면 우발적 인 취소를 피할 것입니다.
 그리고 Chan이 말하는 내 동료처럼, 버튼을 눌러서 마음을 바꿀 수 있어야합니다.
 따라서 손가락을 탭 영역 밖으로 드래그하여 들어 올리면 탭을 취소 할 수 있습니다.
 같은 방식으로, 버튼 위로 다시 스 와이프하면 버튼이 다시 강조 표시되고 탭을 확인하게합니다.
 우리가 말할 다음 행동은 스 와이프입니다.
 스 와이프는 iOS의 핵심 동작 중 하나이며 스크롤, 드래그 및 페이징과 같은 여러 동작에 사용됩니다.
 그러나, 당신이 그것을 사용하는 방법이나 호출하는 방법에 관계없이, 제스처의 핵심 원리는 항상 동일합니다.
 이 예에서는 스 와이프를 사용하여이 이미지를 오른쪽으로 드래그합니다.
 따라서 이미지를 드래그하려는 의도로 이미지를 터치하는 순간 상호 작용이 시작됩니다.
 하지만 스 와이프인지 확인하기 전에 터치가 특정 거리를 이동해야합니다.
 우리는 다른 제스처와 스 와이프를 구별하는 법을 배웁니다.
 이 거리를 히스테리 시스라고하며 일반적으로 iOS에서 10 포인트입니다.
 따라서 터치가이 거리에 도달하면 스 와이프가 시작됩니다.
 이것은 또한 스 와이프의 방향을 결정하는 좋은 순간입니다.
 예를 들어 수평 또는 수직 인 경우.
 예를 들어 실제로는 필요하지 않지만 일부 상황에서는 매우 유용합니다.
 이제 스 와이프가 감지되었으므로 이것은 제스처의 초기 위치입니다.
 이 순간 이후에 터치와 이미지는 함께 있어야하며 한 가지로 움직여야합니다.
 우리는 상대적인 위치를 존중해야하며 이미지의 중심을 드래그 포인트로 사용하지 마십시오.
 드래그하는 동안 위치를 추적하고 터치 속도를 높여야하므로 끌기가 끝나면 마지막 위치는 사용하지 않습니다.
 모든 동작이 유동적으로 이미지로 전달되도록 터치의 역사를 사용합니다.
 이제까지 보았 듯이 터치와 콘텐츠가 함께 움직여야합니다.
 일대일 추적은 매우 중요합니다.
 스 와이프하거나 드래그 할 때 콘텐츠는 제스처에 붙어 있어야합니다.
 이것은 iOS의 원칙 중 하나입니다.
 스크롤 기능을 사용하면 자연스럽고 직관적 인 느낌을줍니다.
 터치와 컨텐트가 일대일로 추적을 멈추는 순간, 우리는 즉시 알아 차릴 수 있습니다.
 스크롤링의 경우에는 콘텐츠의 끝까지 도달했음을 알 수 있습니다.
 그러나 일대일 추적은 터치 스크린에만 국한되지 않습니다.
 예를 들어, Apple TV에서 UI를 조작하는 것은이 개념을 중심으로 설계되었습니다.
 따라서 터치가 컨텐츠를 직접 조작하지 않더라도 제스처와 인터페이스가 직접 연결되어있어 작업을 제어 할 수 있으며 상호 작용을 직관적으로 만듭니다.
 몸짓을 디자인 할 때 또 다른 핵심 원리는 상호 작용 중에 지속적인 피드백을 제공하는 것입니다.
 그리고 이것은 단지 손가락이나 끌기에 국한된 것이 아닙니다.
 모든 상호 작용에 적용됩니다.
 따라서 iPhone 10의 손전등 버튼을 다시 보면 단추의 크기가 터치 감에 따라 달라집니다.
 그리고, 이것은 나에게 나의 행동을 확인시켜 준다.
 그것은 시스템이 제 제스처에 반응하고 있다는 것을 보여 주지만 더 강하게 누르면 결국 플래쉬를 켤 것이라고 저에게 가르쳐줍니다.
 지속적인 피드백의 또 다른 좋은 예는 Apple TV의 포커스 엔진입니다.
 따라서 Siri 리모컨의 움직임이 화면에 계속 표시됩니다.
 그리고, 그들은 현재 내가 선택한 항목, 선택이 변경 될 순간, 그리고 선택이 갈 방향을 보여줍니다.
 따라서 제스처 중 UI가 응답하는 것은 유동적 인 경험을 창출하는 데 중요합니다.
 이러한 이유로 제스처를 구현할 때 UISwipeGestureRecognizer와 같이 제스처가 끝날 때만 감지되는 메서드는 사용하지 않아야합니다.
 실제 제스처 또는 제스처에 대한 모든 가능한 정보를 제공하는 기타 제스처 인식기와 같은 것을 사용하십시오.
 그래서, 위치뿐 아니라 속도, 압력, 접촉의 크기.
 대부분의 상황에서 인터페이스는 하나 이상의 제스처에 응답해야합니다.

앱에 기능을 계속 추가하면 제스처의 복잡성과 수 또한 증가합니다.
 예를 들어 스크롤보기를 사용하는 거의 모든 UI에는 탭과 스 와이프와 같은 다른 동작이 서로 경쟁합니다.
 이 예에서와 같이 연락처 목록을 스크롤하거나 그 중 하나를 자유롭게 터치하여 미리 볼 수 있습니다.
 따라서 우리가 최종 제스처를 기다리지 않으면 피드백을 표시하기 전에 지연을 도입해야합니다.
 그리고 기다리는 동안 인터페이스가 반응이 느껴지지 않습니다.
 이런 이유로 우리는 행동의 시작부터 가능한 모든 제스처를 탐지해야합니다.
 그리고 일단 우리가 의도를 확신하면 다른 모든 제스처를 취소하십시오.
 따라서 우리가 본보기로 돌아 가면 그 접촉을 시작하지만 대신 스크롤을하기로 결정했습니다.
 그리고 그 순간에 3D 터치 동작을 취소하고 올바른 제스처로 전환합니다.
 때로는 지연을 피할 수없는 경우도 있습니다.
 예를 들어 UI에서 더블 탭을 사용할 때마다 모든 정상 탭이 지연됩니다.
 시스템은 탭 이후에 기다려야 만 탭인지 더블 탭인지 확인할 수 있습니다.
 이 예에서는 두 번 살짝 눌러 사진을 확대 및 축소 할 수 있으므로 앱 메뉴를 표시하기 위해 두드리기는 약 0.5 초 정도 지연됩니다.
 따라서 응용 프로그램의 동작을 디자인 할 때는 이러한 상황을 인식하고 가능할 때마다 지연을 피하십시오.
 요약하면, 우리는 탭과 스 와이프 같은 핵심 제스처를 디자인하는 방법을 보았습니다.
 우리는 콘텐츠와 터치가 일대일로 움직여야한다는 것을 보았습니다. 이것이 iOS의 핵심 개념 중 하나입니다.
 또한 모든 상호 작용 중에 지속적인 피드백을 제공하고, 여러 제스처가있는 경우 처음부터 병렬로 감지합니다.
 그리고 이제 저는 그것을 Chan에게 돌려주고 싶습니다. Chan은 유체 인터페이스로 작업하는 것에 대해 이야기 할 것입니다.
 고마워, 모두들.
  좋은 작업.
 좋아, 나 왔어.
 그래서 우리는 유체처럼 느껴지고, 반응이 빠르며, 생동감이있는 인터페이스를 구축하는 방법에 대해 배웠습니다.
 이제 유체 인터페이스의 매개체 내에서 작업 할 때 좀 더 편안하게 느껴지면서 몇 가지 고려 사항에 대해 이야기 해 보겠습니다.
 그리고 그것은 가르침으로 시작됩니다.
 따라서 제스처 인터페이스의 한 단점은 제스처가 무엇인지 즉시 알 수 없다는 것입니다.
 그래서 우린 친절하고 열정적 인 방식으로 사용자를 우리와 함께 가져 오는 방법에 대해 친절하고 영리해야합니다.
 그래서 우리가 할 수있는 한 가지 방법은 시각적 단서입니다.
 세상은 이런 것들로 가득 차 있습니다. 그렇죠? 한 번 배우면 어디에서나 사용할 수 있습니다.
 그들은 휴대 가능합니다.
 그래서 이것을 보게되면 어떻게 사용하는지 알게됩니다.
 그래서 우리는 iOS에서 비슷한 규칙을 세우려고했습니다.
 몇 가지 예가 있습니다.
 따라서 스크롤링 목록의 콘텐츠가있는 경우 콘텐츠를 하단에서 잘라내어 더 볼 수 있음을 나타낼 수 있으며 그 아래에있는 콘텐츠를 시도하고 공개하도록 초대 할 수 있습니다.
 또한 콘텐츠 페이지를 처리하는 경우 페이징 표시기를 사용하여 여러 페이지의 콘텐츠가 있음을 나타낼 수 있습니다.
 또한 컨텐츠의 슬라이딩 창에 대해 어포던스 또는 이와 유사한 그래버 핸들을 사용하여 잡을 수 있고 슬라이딩 할 수 있음을 나타낼 수 있습니다.
 사용할 수있는 또 다른 기술은 대화식 요소를 별도의 평면으로 올리는 것입니다.
 따라서 대화 형 요소가있는 경우이를 별도의 평면으로 들어 올리면 내용과 구분할 수 있습니다.
 따라서이 좋은 예는 온 / 오프 스위치입니다.
 우리는 스위치의 손잡이가 잡을 수 있음을 나타내므로 스위치를 다른 비행기로 올립니다.
 시각적으로 분리하여 드래그 가능한 특성을 나타냅니다.
 따라서 인터페이스 위에 떠있는 요소 인 인터랙티브 요소가 있으면 잡을 수 있음을 나타냅니다.
 다음으로 우리는 행동을 사용하여 인터페이스를 사용하는 방법을 사용하지 않고 보여줄 수 있습니다.
 따라서 정적 애니메이션을 사용하여 동적 동작을 강화할 수 있습니다.
 예를 들면 Safari입니다.
 Safari에서 왼쪽 상단에 x 아이콘이 탭을 닫습니다.이 버튼을 누르면 해당 탭이 왼쪽으로 밀려나 삭제 된 것으로 나타납니다.
 이 말은 나 자신에게 왼쪽으로 밀어 넣을 수 있음을 암시합니다.
 그리고 제스처를 통해 탭을 삭제하는 것과 동일한 작업을 수행하십시오.
 따라서 이산 애니메이션과 제스처를 정렬하여 유지하면서 다른 하나를 가르 칠 수 있습니다.
 그리고 우리가 사용할 수있는 또 다른 기술이 있는데, 그것은 설명입니다.
 이것은 사용자에게 제스처 사용 방법을 명시 적으로 알려주는 경우입니다.
 따라서,이 방법은 드물게 사용하는 것이 가장 좋습니다. 그러나 제스처가 여러 곳에 반복적으로 사용되는 경우 가장 좋으며 한 번 정면으로 설명하고 나서 계속 사용하면 강화됩니다.
 간헐적으로 만 사용되는 제스처에는 사용하지 마십시오.
 사람들은 그것을 기억하지 못할 것입니다.
 자, 재미와 장난에 대해 조금 이야기하고 싶습니다.
 이것은 유체 인터페이스의 가장 중요한 측면 중 하나이기 때문입니다.
 그리고 그것은 모든 것을 못질 할 때만 발생합니다.
 유체 인터페이스의 자연스러운 결과입니다.
 인터페이스가 즉각적이고 만족스럽게 반응하고 있습니다.

리디렉션 할 수 있고 용서할 때.
 동작과 몸짓이 부드러울 때.
 그리고 방금 이야기 한 모든 것.
 인터페이스가 사용자와 동기화되어 시작됩니다.
 그리고 인터페이스를 배우는 것처럼 느껴지지 않는 곳에서 마술 같은 일이 생기면 인터페이스를 발견하는 것처럼 느낍니다.
 따라서 우리는 사람들이 게임을 통해 인터페이스를 발견 할 수있게 해 주면 좋다고 생각합니다.
 그리고, 배우는 것처럼 느껴지지도 않습니다. 재미 있습니다.
 그래서, 사람들은 물건을 가지고 노는 것을 좋아합니다.
 그래서, 우리는 우리의 자연적인 바이올린 요소를 사용하는 것이 좋다고 생각합니다.
 우리의 마음은 인터페이스의 느낌을 내면화하는 것입니다.
 그래서 우리가이 물건을 만들 때, 프로토 타이핑을 할 때, 그것을 구축하는 것이 좋습니다.
 너 혼자 놀아.
 너는 그것으로 어떻게 지내는지 보아라.
 다른 사람들에게 그것을 건네면서 그들이 어떻게 놀고 있는지보십시오.
 그리고 애니메이션이나 행동, 설명 같은 것으로 어떻게 강화할 수 있는지 생각해보십시오.
 그리고 놀이가 얼마나 멀리 갈 수 있는지, 그리고 인터페이스가 사람들에게 스스로를 가르치는 것은 놀랍습니다.
 매체로서의 유동성에 관해서 조금 이야기합시다.
 우리가 실제로이 물건을 만드는 방법에 대해 실제로 생각해보십시오.
 우리는 이와 같은 인터페이스가 독특한 매체라고 생각합니다. 우리가 올바르게 접근하는 것이 중요합니다.
 따라서 우선, 상호 작용을 비주얼이 아닌 비주얼에서 분리 할 수 ​​있도록 디자인하는 것이 중요합니다.
 상호 작용 설계는 비주얼과 함께 수행되어야합니다.
 사람이 끝나고 다른 사람이 시작될 때도 알 수 없어야합니다.
 그리고이 자료의 데모를 제작하는 것이 중요합니다.
 우리가 생각하는 인터랙티브 데모는 실제로 백만 가지의 정적 인 디자인에 가치가 있다고 생각합니다.
 다른 사람들을 보여줄뿐만 아니라 인터페이스 자체의 진정한 본질을 이해해야합니다.
 그리고이 프로토 타입을 만들 때, 인터페이스를 구축 할 때 인터페이스를 거의 발견 할 수 있으므로 매우 유용합니다.
 이 기술은 실제로 우리가 iPhone 10 인터페이스를 어떻게 구축했는지입니다.
 또한 구현 목표를 설정하기 때문에 매우 중요합니다.
 우리는 Apple에서 정말 운이 좋았습니다.이 놀라운 기술팀이이 제품을 만들 수있었습니다. 왜냐하면 정말 구축하기가 어렵 기 때문입니다.
 그리고 자신과 엔지니어링 팀, 그리고 스스로 느끼는 것이 무엇인지 생각 나게하는 그런 마술적인 예를 갖는 것도 중요합니다. 그리고, 그것의 종류, 기억, 생각 나게하는 것이 정말로 중요합니다.
 그리고, 실제로 만들면, 복사가 어려운 무언가가 만들어지고 앱에 독특한 성격이 부여됩니다.
 따라서 멀티 터치는 우리 모두가 즐길 수있는 놀라운 매체입니다.
 우리는 기술을 사용하여 고대의 촉각 적 수준의 사람들과 교류합니다.
 실제로 정말 멋지다.
 오늘날 우리가 이야기 한 모든 원리는 iPhone 10 제스처 인터페이스 디자인의 핵심입니다. 즉, 반응 적이며 방향 전환 가능한 인터럽트 가능한 제스처, 동적 인 동작, 우아한 제스처 처리입니다.
 많은면에서 유체 인터페이스가 될 수 있다고 생각하는 것을 구체화 한 것입니다.
 우리가 생각하고 움직이는 방식으로 인터페이스를 정렬하면 어떤 종류의 마술이 일어납니다.
 정말 컴퓨터처럼 느껴지지 않고 끊임없이 우리를 확장시키는 느낌을 받기 시작합니다.
 우리는 인터페이스의 미래를 설계 할 때 이와 같은 기술에서 인류애를 포착하는 것이 정말로 중요하다고 생각합니다.
 따라서 인류의 가장 중요한 도구 중 하나는 부담이 아니라 즐거움과 기쁨입니다.
 고맙습니다.

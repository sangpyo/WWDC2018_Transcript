모두들 안녕.
 이미지 및 그래픽 모범 사례에 오신 것을 환영합니다.
 내 이름은 카일이야.
 나는 UIKit에서 일한다.
 오늘은 응용 프로그램에서 그래픽 콘텐트를 효율적으로 사용하기위한 몇 가지 기술과 전략을 알려 드리려고합니다.
 프레임 워크 스택을 둘러 봅니다.
 먼저 UIImage와 UIImageView로 시작하겠습니다. UIImage와 UIImageView는 앱의 그래픽 콘텐츠 작업을위한 UIKit의 고급 도구입니다.
 그런 다음 UIKit을 사용하여 응용 프로그램 내부에서 사용자 지정 드로잉을 가장 잘 수행 할 수있는 방법에 중점을 두어 설명하겠습니다.
 마지막으로 고급 CPU 및 GPU 기술을 응용 프로그램에 통합하는 방법에 대해 간략히 설명하겠습니다.
 그리고이 강연을 통해 우리는 주로 장치에서 부족한 두 가지 리소스를 사용하는 것에 집중할 것입니다. 메모리 및 CPU.
 그리고 우리는 이러한 것들을 분리 된 양으로 생각하는 경향이 있습니다.
 디버그 탐색기에는 자체 트랙이 있습니다.
 그들은 악기 응용 프로그램에 자신의 악기가 있습니다.
 그러나 실제로, 그들은 복잡하게 연결되어 있습니다.
 또한 응용 프로그램이 더 많은 CPU를 사용함에 따라 배터리 수명과 응용 프로그램의 응답성에 부정적인 영향을 미칠 수 있습니다.
 그러나 덜 분명한 점은 시스템의 응용 프로그램과 다른 응용 프로그램이 더 많은 메모리를 사용하면 CPU 사용률도 높아집니다.
 배터리 수명과 성능에 더 나쁜 영향을 미칩니다.
 따라서 우리는 이러한 자원의 사용을 향상시키는 방법에 중점을 둘 것입니다.
 사진 응용 프로그램과 같이 사진 콘텐츠를 광범위하게 사용하는 응용 프로그램보다이 문제를 논의하기에 더 좋은 컨텍스트가 무엇입니까? 보시다시피, 우리는 여기에 사진을 편집 중입니다.
 그리고 이전에 언급 한 것처럼 UIImages, UIKits, 이미지 데이터 처리를위한 고급 클래스.
 그래서, 우리는이 풍부한 콘텐츠를 대표하는 UIImage를 가지고 있습니다.
 그리고 우리는 우리의 응용 프로그램에서 그래픽 콘텐츠를 두 가지 범주로 나누는 경향이 있습니다. 이 사진과 도상과 같은 풍부한 콘텐츠.
 UIImage는이 버튼에 표시된 아이콘과 같은 것을 나타내는 데 사용되는 UIKit의 데이터 유형이기도합니다.
 그리고 이전에 언급했듯이 UIImageView는 UIImage를 표시하기 위해 UIKit에서 제공하는 클래스입니다.
 이제 고전적인 MVC 스타일 인 UIImage는 모델 객체로 생각할 수 있습니다.
 그리고 UIImageView는 이름에서 알 수 있듯이 뷰입니다.
 그리고 모델과 뷰로서의 역할을 수행하는 이러한 객체에는 전통적인 책임이 있습니다.
 UIImage는 이미지 내용을로드합니다.
 UIImageView는 렌더링을 위해이를 표시하는 역할을합니다.
 자, 우리는 이것을 한 번 확립하는 단순한 관계로 생각할 수 있습니다.
 그것은 일방적 인 관계입니다.
 실제 이야기는 좀 더 복잡합니다.
 일회성 이벤트가 아닌 연속 프로세스 인 렌더링 외에도 숨겨진 단계가 있습니다.
 응용 프로그램의 성능을 측정하려면 이해하는 것이 중요합니다.
 그리고이 단계를 디코딩이라고합니다.
 그러나 디코딩을 논의하기 위해 먼저 버퍼라는 개념을 논의해야합니다.
 버퍼는 단지 연속적인 메모리 영역입니다.
 그러나 동일한 크기의 요소 (일반적으로 같은 내부 구성 요소)의 시퀀스로 구성된 메모리에 대해 논의 할 때는 버퍼라는 용어를 사용하는 경향이 있습니다.
 그리고 우리의 목적을 위해, 정말로 중요한 종류의 버퍼는 이미지 버퍼입니다.
 이것은 이미지의 메모리 내 표현을 보유하는 버퍼에 사용하는 용어입니다.
 이 버퍼의 각 요소는 이미지의 단일 픽셀의 색상과 투명도를 설명합니다.
 따라서 메모리에있는이 버퍼의 크기는 포함 된 이미지의 크기에 비례합니다.
 특히 중요한 버퍼의 한 예를 프레임 버퍼라고합니다.
 프레임 버퍼는 응용 프로그램의 실제 렌더링 된 출력을 보유합니다.
 따라서 애플리케이션이 뷰 계층 구조를 업데이트하면 UIKit은 애플리케이션의 창과 모든 하위 뷰를 프레임 버퍼로 렌더링합니다.
 그리고 그 프레임 버퍼는 디스플레이상의 픽셀을 비추기 위해 디스플레이 하드웨어가 읽을 픽셀 정보를 제공합니다.
 이제 마지막 부분은 일정한 간격으로 발생합니다.
 60 fps에서 발생할 수 있습니다.
 그래서 1 / 60th 초마다.
 또는 ProMotion Display가있는 iPad에서는 1 / 120 초마다 빠르게 발생할 수 있습니다.
 응용 프로그램에서 아무 것도 변경되지 않으면 디스플레이 하드웨어는 이전에 본 프레임 버퍼에서 동일한 데이터를 다시 가져옵니다.
 하지만 예를 들어, 응용 프로그램에서보기의 내용을 변경하면 새 UIImage가 이미지보기에 할당됩니다. 여기를 클릭하십시오.
 UIKit은 응용 프로그램의 윈도우를 프레임 버퍼로 다시 렌더링합니다.
 다음에 디스플레이 하드웨어가 프레임 버퍼에서 당겨지면 새로운 컨텐츠가 생성됩니다.
 이제 이미지 버퍼를 다른 종류의 버퍼 인 데이터 버퍼와 대조 할 수 있습니다. 데이터 버퍼는 바이트 시퀀스가 ​​포함 된 버퍼 일뿐입니다.
 여기서는 이미지 파일이 포함 된 데이터 버퍼가 걱정됩니다.
 아마도 네트워크에서 다운로드했거나 디스크에서로드했을 것입니다.

일반적으로 이미지 파일을 포함하는 데이터 버퍼는 해당 데이터 버퍼에 저장된 이미지의 크기를 설명하는 일부 메타 데이터로 시작합니다.
 그런 다음 JPEG 압축이나 PNG와 같은 형식으로 인코딩 된 이미지 데이터 자체를 포함합니다.
 즉, 메타 데이터에 이어지는 바이트는 실제로 이미지의 픽셀에 대해 직접적으로 기술하지 않습니다.
 따라서 우리가 설정 한이 파이프 라인을 자세히 살펴볼 수 있습니다.
 여기에 UIImageView가 있고 우리는 이미지 뷰의 렌더링에 의해 채워질 프레임 버퍼의 영역을 강조했습니다.
 그리고이 이미지보기에 UIImage를 지정했습니다.
 이미지 파일의 내용을 나타내는 데이터 버퍼가 있습니다.
 아마도 네트워크에서 다운로드하거나 디스크에서 읽을 수 있습니다.
 그러나 픽셀 데이터 당 프레임 버퍼를 채울 수 있어야합니다.
 그래서 UIImage는 데이터 버퍼에 포함 된 이미지 크기와 동일한 크기의 이미지 버퍼를 할당합니다.
 또한 JPEG 또는 PNG 또는 다른 인코딩 된 이미지 데이터를 픽셀 이미지 정보로 변환하는 디코딩이라는 작업을 수행합니다.
 그런 다음 이미지보기의 콘텐츠 모드에 따라 다릅니다.
 UIKit에서 이미지 뷰를 렌더링하도록 요청하면 이미지 버퍼를 이미지 버퍼로 복사하고 프레임 버퍼에 복사 할 때 이미지 데이터를 복사하고 크기를 조정합니다.
 이제는 디코딩 단계가 CPU 집중적 일 수 있습니다. 특히 큰 이미지의 경우.
 따라서 UUmage가 이미지 뷰를 렌더링하도록 요청할 때마다 UUmage가 해당 이미지 버퍼에 매달릴 것이므로 매번 그 작업을 수행합니다.
 결과적으로 디코딩 된 모든 이미지에 대한 응용 프로그램은 지속적이고 대용량의 메모리 할당을 수행 할 수 있습니다.
 그리고 이전에 언급했듯이이 할당은 입력 이미지의 크기에 비례합니다.
 반드시 그런 것은 아니지만 실제로는 프레임 버퍼에서 렌더링되는 이미지보기의 크기입니다.
 그리고 이것은 성능에 다소 부정적인 결과를 가져올 수 있습니다.
 응용 프로그램의 주소 공간에있는 큰 할당량은 다른 관련 콘텐츠를 참조하려는 콘텐츠와 강제로 분리시킬 수 있습니다.
 이를 조각화라고합니다.
 결국, 응용 프로그램이 많은 메모리 사용량을 누적하기 시작하면 운영 체제가 들어서서 물리적 메모리의 내용을 투명하게 압축하기 시작합니다.
 이제는 CPU가이 작업에 참여해야하므로 자신의 응용 프로그램에서 모든 CPU 사용이 가능합니다.
 당신이 통제 할 수없는 전역 CPU 사용량을 증가시킬 수 있습니다.
 결국 응용 프로그램이 프로세스 종료를 시작하는 데 필요한 많은 실제 메모리를 소비하기 시작할 수 있습니다.
 우선 순위가 낮은 백그라운드 프로세스로 시작합니다.
 결국 응용 프로그램이 충분한 메모리를 사용하면 응용 프로그램 자체가 종료 될 수 있습니다.
 그리고 이러한 백그라운드 프로세스 중 일부는 사용자를 대신하여 중요한 작업을 수행하고 있습니다.
 그래서, 그들은 그들이 끝나 자마자 다시 시작할 수 있습니다.
 따라서 응용 프로그램이 단시간 동안 메모리를 소비하는 경우에도 CPU 사용률에있어 이렇게 긴 시간 효과가있을 수 있습니다.
 따라서 응용 프로그램에서 사용하는 메모리 양을 줄이려고합니다.
 그리고 우리는 다운 샘플링 (downsampling)이라는 기술로 곡선을 앞당길 수 있습니다.
 이제 이미지 렌더링 파이프 라인에 대해 좀 더 자세히 살펴 보겠습니다.
 우리가 이미지를 표시 할 이미지 뷰가 사실 내부에 표시 할 이미지보다 작다는 사실을 포함합니다.
 일반적으로 핵심 애니메이션 프레임 워크는 렌더링 단계에서 해당 이미지를 축소하는 역할을 담당하지만이 다운 샘플링 기술을 사용하여 일부 메모리를 절약 할 수 있습니다.
 그리고 우리가해야 할 일은 본질적으로 작게 축소 된 작업을 미리보기 이미지라는 객체로 캡처하는 것입니다.
 그리고 우리는 더 작은 전체 디코딩 된 이미지 버퍼를 가지므로 총 메모리 사용량을 줄여야합니다.
 그래서 우리는 이미지 소스를 설정하고 썸네일을 생성 한 다음 디코딩 된 이미지 버퍼를 UIImage로 캡쳐합니다.
 그리고 UIImage를 이미지보기에 지정하십시오.
 그런 다음 이미지가 포함 된 원본 데이터 버퍼를 삭제할 수 있습니다.
 그리고 우리는 응용 프로그램을 위해 훨씬 더 작은 장기 메모리 공간을 남겨 둡니다.
 코드에는 몇 단계가 있습니다.
 그래서, 나는 그들을 통해 당신을 걸어 갈거야.
 나는 극도로 낮은 수준의 세부 사항을 수행하지 않을 것입니다.
 그러나 중요한 부분을 강조하겠습니다.
 먼저 CGImageSource 객체를 생성합니다.
 그리고 CGImageSourceCreate는 옵션 사전을 취할 수 있습니다.
 여기서 중요한 옵션은 ShouldCache 플래그입니다.
 그리고 이것은 Core Graphics 프레임 워크에 우리가이 URL에있는 파일에 저장된 정보를 나타 내기위한 객체를 생성하고 있음을 알려줍니다.
 이 이미지를 즉시 디코드하지 마십시오.
 표현할 개체를 만드십시오.
 이 URL의 정보가 필요합니다.
 그런 다음 수평 및 수직 축을 계산할 것입니다.

우리가가는 축척과 포인트 크기 (픽셀 단위의 더 큰 치수)에서 렌더링하려고합니다.
 해당 정보를 계산 한 다음 미리보기 이미지의 옵션 사전을 만듭니다.
 여기에 몇 가지 옵션이 있습니다.
 문서에서 이러한 옵션의 기능을 정확히 볼 수 있습니다.
 그러나 매우 중요한 것은 CacheImmediately 옵션입니다.
 이 옵션을 여기에 전달함으로써 Core Graphics에게 디코딩 된 이미지 버퍼를 생성해야하는 정확한 순간 인 썸네일을 만들 것을 요구할 때 말합니다.
 따라서 CPU 해독 시점을 정확히 제어 할 수 있습니다.
 그런 다음 우리가 가져온 CGImage 인 축소판을 만듭니다.
 UIImage에서 그것을 감싸고 우리가 여기서 작성한 도우미 함수에서 반환하십시오.
 따라서이 기술이 제공하는 절약 규모의 개념을 알려면 전체 화면 이미지 만 표시하면됩니다.
 이것은 사진입니다.
 3,000 x 2,000 픽셀입니다.
 최적화를하지 않으면 스토리 보드에 UIImageView를 던지고 이미지를 할당하면이 애플리케이션에는 31이 소요됩니다.
5 메가 바이트 그냥 아무것도 앉아.
 이제이 다운 샘플링 기술을 사용하고 실제 디스플레이 크기의 이미지 버퍼 만 생성하면이 애플리케이션의 메모리 사용량을 최대 18 개까지 줄일 수 있습니다.
4 메가 바이트.
 그리고 이것은 메모리 사용량을 크게 줄입니다.
 박수를 보내 주셔서 감사합니다.하지만이 기술을 응용 프로그램에 구현할 때 모두 박수를 보냅니다.
 화면의 작은 공간에 큰 입력 이미지가 많이 표시되는 앱에 대해 얼마나 큰 차이가 있는지 상상할 수 있습니다.
 예 : 카메라 롤.
 UICollectionView를 사용하여 이러한 뷰를 구현할 수 있습니다.
 그래서, 여기서는 indexPath에 item을위한 셀을 구현했습니다.
 그리고 이전에 작성한 도우미 함수를 사용하여 셀을 실제로 화면에 표시 할 때 표시 할 크기로 이미지를 다운 샘플링합니다.
 그래서, 이것이 꽤 좋은 일이라고 생각합니까? 이러한 큰 할당을 사용하는 것보다 메모리 사용량이 줄어 듭니다.
 불행히도 테이블 뷰 및 콜렉션 뷰와 같은 스크롤 가능한 뷰에서 일반적으로 발생하는 또 다른 문제를 해결할 수는 없습니다.
 그것은 아마, 전에 이것을 보았습니다.
 응용 프로그램을 스크롤하면 스크롤 할 때 히치 싱됩니다.
 여기서 일어나는 일은 디스플레이 하드웨어가 프레임 버퍼의 다음 복사본을 필요로하기 전에 CPU가 상대적으로 유휴 상태이거나 스크롤링 작업이 수행 될 수 있다는 것입니다.
 프레임 버퍼가 업데이트되고 디스플레이 하드웨어가 새 프레임을 제 시간에 가져올 수있게되면 유체 모션을 볼 수 있습니다.
 그러나 이제 우리는 또 다른 이미지 행을 표시하려고합니다.
 그리고 우리는 UICollectionView로 다시 셀을 전달하기 전에 Core Graphics에게 이미지를 디코딩하도록 요청할 것입니다.
 그리고 그것은 많은 CPU 시간을 필요로 할 수 있습니다.
 너무 많이, 우리는 프레임 버퍼를 다시 랜더링하지 않습니다.
 그러나 디스플레이 하드웨어는 고정 된 간격으로 작동합니다.
 따라서 사용자의 관점에서 볼 때 응용 프로그램은 이제 막 더러워졌습니다.
 이제 이러한 이미지의 디코딩이 끝났습니다. 이러한 셀을 UICollectionView에 다시 제공 할 수 있습니다.
 그리고 애니메이션은 이전처럼 계속됩니다.
 시각적 장애를 봤어.
 이제이 동작의 명백한 반응 결과 외에도 배터리 수명에 미묘한 해로운 영향이 있습니다.
 왜냐하면 iOS는 CPU에 일정한 일정한 수요가있을 때 배터의 전력 수요를 관리하는 데 매우 뛰어납니다.
 그리고 우리가 가진 것은 스파이크입니다.
 새로운 행이 스크롤 뷰에서 보게 될 때 CPU 사용량이 급증합니다.
 그런 다음 다시 낮은 수준으로 돌아갑니다.
 따라서 CPU 사용을 원활하게하기 위해 사용할 수있는 두 가지 기술이 있습니다.
 첫 번째는 프리 페칭입니다.
 그리고 프리 페칭에 대해 전체적으로 알고 싶다면 올해의 WWDC에서 CollectionView Talk의 A Tour를 확인하십시오.
 그러나 여기서 일반적인 아이디어는 프리 페칭을 통해 CollectionView가 데이터 소스에 현재 셀이 필요 없다는 것을 알려주지 만 매우 가까운 장래에 그렇게 될 것이라는 것입니다.
 그래서, 할 수있는 일이 있다면 어쩌면 시작을 할 수 있습니다.
 따라서 시간이 지남에 따라 CPU 사용량을 분산시킬 수 있습니다.
 그래서 우리는 CPU 사용의 최대 크기를 줄였습니다.
 우리가 사용할 수있는 또 다른 기술은 백그라운드에서 작업을 수행하는 것입니다.
 이제 우리는 시간이 지남에 따라 업무를 보급 했으므로 사용 가능한 CPU를 통해 작업을 퍼뜨릴 수 있습니다.
 결과적으로 응용 프로그램의 응답 성이 향상되고 장치의 배터리 수명이 연장됩니다.
 따라서 여기에이 작업을 적용하려면 데이터 소스에서 프리 페치 메소드를 구현해야합니다.
 그리고이 헬퍼 함수를 ​​호출하여이 CollectionView 셀에 표시 할 이미지의 다운 샘플링 된 버전을 생성합니다.
 그리고 작업을 글로벌 비동기 대기열 중 하나에 전달하여이 작업을 수행합니다.
 큰.
 우리의 일은 배경에서 일어나고 있습니다.
 이것이 우리가하고 싶은 일입니다.
 그러나 여기에는 잠재적 인 결함이 있습니다.

그리고 이것은 우리가 스레드 폭발이라고 부르는 현상입니다.
 이것은 시스템이 CPU 사용 가능한 것보다 더 많은 작업을하도록 요구할 때 발생합니다.
 한 번에 6-8 개의 이미지와 같은 전체 이미지를 표시하려고하지만 2 개의 CPU 만있는 장치에서 실행 중이라면 한 번에 그 모든 작업을 수행 할 수는 없습니다.
 존재하지 않는 CPU를 통해 병렬 처리 할 수 ​​없습니다.
 이제 글로벌 대기열에 비동기 적으로 디스패치 할 때 교착 상태를 피하기 위해 GCD는 요청하는 작업을 캡처하기 위해 새 스레드를 생성합니다.
 그리고 나서 CPU는 우리가 운영 체제에 요구하는 모든 작업에 대해 점차적으로 진보하기 위해 스레드간에 이동하는 데 많은 시간을 할애 할 것입니다.
 실제로 이러한 쓰레드를 전환하는 것은 상당한 오버 헤드가 있습니다.
 하나 이상의 CPU가 이미지를 얻을 수있는 기회가 있다면 더 잘 수행 할 것입니다.
 그래서 우리는 지난해 그랜드 센트럴 디스패치 사용법 현대화 (Grand Central Dispatch Usage Talk)에서 제시된 기술을 빌릴 것입니다.
 그리고 우리는 몇 가지 작업을 동기화하거나 미안합니다.
 동기화하지 않으면 작업을 직렬화합니다.
 따라서 단순히 비동기식 대기열 중 하나에 작업을 보내지 않고 직렬 대기열을 생성합니다.
 그리고 프리 페치 (prefetch) 메소드 구현에서 비동기 적으로 해당 큐로 전달합니다.
 이제 개별 이미지가 이전보다 늦게까지 진행되기 시작하지 않을 수도 있음을 의미합니다.
 그러나 이는 또한 CPU가 할 수있는 일들 사이에서 전환하는 데 소요되는 시간을 줄이는 것을 의미합니다.
 자, 우리가 보여주는이 이미지들은 여러 곳에서 올 수 있습니다.
 응용 프로그램과 함께 제공 될 수도 있습니다. 이러한 경우 이미지 자산에 저장 될 수 있습니다.
 또는 응용 프로그램 랩퍼 대신 파일에 저장 될 수도 있습니다.
 아니면 그들은 네트워크에서 올 수 있습니다.
 또는 응용 프로그램 문서 디렉토리에 저장된 문서에있을 수 있습니다.
 캐시에 저장할 수 있습니다.
 그러나 응용 프로그램과 함께 제공되는 아트웍의 경우 이미지 애셋을 사용하는 것이 좋습니다.
 그리고 여러 가지 이유가 있습니다.
 이미지 자산은 이름 기반 및 특성 기반 조회에 최적화되어 있습니다.
 특정 이름 지정 체계가있는 디스크의 파일을 검색하는 것보다 자산 카탈로그에서 이미지 자산을 찾는 것이 더 빠릅니다.
 자산 카탈로그 런타임에는 버퍼 크기를 관리하는 데있어 정말 좋은 아이디어가 있습니다.
 그리고 이미지 자산에만 적용되는 런타임 성능과 관련없는 기능도 있습니다.
 장치 별 축소와 같은 기능을 포함하므로 응용 프로그램이 실행될 장치 및 벡터 아트웍과 관련된 이미지 리소스 만 다운로드됩니다.
 벡터 아트웍은 iOS 11에 도입 된 기능입니다.
 또한 편집기에서 이미지 애셋의 [벡터 데이터 유지] 확인란을 선택하여 사용할 수 있습니다.
 그리고 이것의 결과는 이미지가 네이티브 크기보다 크거나 작은 이미지 뷰에서 렌더링되면 이미지가 흐려지지 않는다는 것입니다.
 실제로 이미지는 벡터 아트웍에서 다시 래스터 화되어 멋진 선명한 가장자리를 갖습니다.
 우리가 운영 체제에서 이것을 사용하는 곳.
 접근성 설정에서 동적 유형을 매우 큰 크기로 설정 한 경우
 그런 다음 탭 막대의 항목을 탭하여 길게 누르면 HUD가 현재 손가락을 대고있는 항목의 확대보기로 표시됩니다.
 따라서, 이와 같은 장소에서 아트 워크를 멋지게 보이게하려면 [벡터 아트 워크 보존] 확인란을 선택합니다.
 죄송 해요.
 이미지 자산 관리자의 [벡터 데이터 유지] 확인란.
 이제는이 방식이 이전에 보았던 파이프 라인과 매우 유사합니다.
 디코드 단계 라기보다는 벡터 데이터를 가져 와서 프레임 버퍼에 복사 할 수있는 비트 맵 데이터로 변환하는 래스터 화 단계가 있습니다.
 이제 응용 프로그램에서 모든 벡터 아트웍에 대해이 작업을 수행해야한다면 더 많은 CPU를 소비하게 될 것입니다.
 여기에 최적화가 있습니다.
 벡터 데이터 보존이 선택되었지만 일반 크기로 렌더링 한 이미지가있는 경우
 자산 카탈로그 컴파일러는 실제로 미리 이미지의 사전 래스터 화 된 버전을 생성하고이를 자산 카탈로그에 저장했습니다.
 따라서 벡터 아트웍을 비트 맵으로 래스터 화하는 복잡한 수학을 수행하는 대신 자산 카탈로그에 저장된 이미지를 디코딩하여 프레임 버퍼에 직접 렌더링 할 수 있습니다.
 몇 가지 고정 된 크기로 아트웍을 렌더링 할 계획이라면
 어쩌면 작은 버전과 큰 버전의 아이콘이있을 수 있습니다.
 [벡터 데이터 유지] 확인란을 사용하지 않고 이미지를 렌더링 할 두 가지 크기의 이미지 애셋을 두 개 만듭니다.
 이렇게하면 이미지가 프레임 버퍼로 그려 질 때마다 최적화되지 않고 컴파일 시간에 아트웍을 래스터 화하는 CPU 히트를 최적화 할 수 있습니다.

UIImage와 UIImageView를 사용하는 방법을 살펴 보았습니다.
 하지만 이것이 응용 프로그램이하는 모든 그래픽 작업이 아닙니다.
 때로는 응용 프로그램이 런타임에 내용을 그립니다.
 이러한 상황의 예는 사진 응용 프로그램의이 편집보기에서 볼 수 있습니다.
 아이콘과 UIButton을 표시하는 UIButton은 UIImageView를 직접 사용할 수 있습니다.
 그러나 UIButton은이 라이브 버튼의 스타일을 지원하지 않습니다. 여기서 라이브 사진을 활성화 또는 비활성화 할 수 있습니다.
 그래서 우리는 여기서 일을해야 할 것입니다.
 그리고 이것의 구현 중 하나는 UIView를 서브 클래스 화하고 draw 메소드를 구현하는 것입니다.
 그리고이 구현은 여기에 노란색 roundRect를 그리고, 텍스트와 그 위에 이미지를 그립니다.
 몇 가지 이유로이 방법을 권장하지 마십시오.
 이 뷰 하위 클래스를 UIImageView와 비교해 보겠습니다.
 자, 이미 알고 있겠지만, 모든 UIView는 실제로 Core Animation 런타임의 CALayer에 의해 지원됩니다.
 그리고 우리의 이미지 뷰의 경우, 이미지 뷰는를 생성하고, 이미지에 디코딩 된 이미지 버퍼를 생성하도록 요청합니다.
 그런 다음 CALayer로 이미지를 디코딩하여 해당 레이어의 콘텐츠로 사용합니다.
 추첨을 무효화하는 사용자 정의보기의 경우 비슷하지만 약간 씩 다릅니다.
 draw 메소드의 내용을 보관 유지하는 이미지 버퍼를 작성하는 층과 뷰를 draw하는 기능은 그 이미지 버퍼의 내용을 채 웁니다.
 그러면 디스플레이 하드웨어에서 필요에 따라 프레임 버퍼에 복사됩니다.
 이것이 우리에게 어느 정도 비용이 들며, 왜 우리가해야만 하는지를 이해하기 위해 아마도이 UI를 구현하는 다른 방법을 추구 할 것입니다.
 여기에서 사용하는 백업 스토어, CALayer에 첨부 된 이미지 버퍼는 그 크기가 우리가 표시하는 뷰에 비례합니다.
 이제 iOS 12에 새로 추가 된 기능 중 하나는 색상 저장 여부에 따라 해당 백킹 스토어에있는 요소의 크기가 실제로 커질 것이라는 것입니다.
 그리고 그 색상 내용이 표준 색상 범위의 내부인지 외부인지.
 따라서 확장 된 SRGB 색상을 사용하여 넓은 색상의 콘텐츠를 그리는 경우 0에서 1 범위 내에서만 색상을 사용하는 경우 배킹 스토어가 실제로 배킹 스토어보다 커집니다.
 이제 iOS의 이전 버전에서는 CALayer의 콘텐츠 형식 속성을 Core Animation의 힌트로 설정할 수 있습니다. ''이보기에서 넓은 색상의 콘텐츠를 지원할 필요가 없다는 것을 알고 있습니다. '또는' 나는이 견해에서 넓은 색의 내용을지지 할 필요가 있음을 알고있다.
 이제이 작업을 수행하면 실제로 iOS 12에서 도입 한 최적화 기능을 사용할 수 없게됩니다.
 따라서 layerWillDraw의 구현을 확인하십시오.
 iOS 12에서 실행될 때 실수로 코드를 최적화 할 수있는 최적화를 수행하지 않도록하십시오.
 그러나 우리는 넓은 색상의 백업 저장소가 필요한지 여부를 암시하는 것보다 더 잘 할 수 있습니다.
 실제로 애플리케이션에 필요한 총 백업 저장 공간을 줄일 수 있습니다.
 이 큰 뷰를 작은 하위 뷰로 리팩터링하여이를 수행 할 수 있습니다.
 그리기 기능을 무시하는 부분을 줄이거 나 제거합니다.
 이렇게하면 메모리에있는 이미지 데이터의 중복 사본을 제거하는 데 도움이됩니다.
 또한 Backing Store가 필요없는 UIView의 최적화 된 속성을 사용할 수 있습니다.
 앞서 언급했듯이 draw 메소드를 오버라이드하려면 CALayer와 함께 사용할 백킹 스토어를 만들어야합니다.
 그러나 UIView의 일부 속성은 끌기를 재정의하지 않아도 계속 작동 할 수 있습니다.
 예를 들어, 패턴 색상을 사용하지 않는 한 UIView의 배경색을 설정하는 경우 배경 저장소를 만들 필요가 없습니다.
 따라서 UIView에서 배경색 속성을 가진 무늬 색상을 사용하지 않는 것이 좋습니다.
 대신, UIImageView를 만듭니다.
 해당 이미지보기에 이미지를 지정하십시오.
 그리고 UIImageView의 함수를 사용하여 타일링 매개 변수를 적절하게 설정하십시오.
 둥근 사각형의 모서리를 자르려면 CALayer cornerRadius 속성을 사용하고 싶습니다.
 Core Animation은 여분의 메모리 할당을하지 않고 클리핑 된 모서리를 렌더링 할 수 있기 때문입니다.
 대신,보다 강력한 maskView 또는 maskLayer 속성을 사용하면 마스크를 저장하기 위해 추가 할당을해야합니다.
 cornerRadius 속성으로 표현할 수없는 투명 영역이있는 배경이 더 복잡한 경우 UIImageView를 사용하는 것이 좋습니다.
 해당 정보를 자산 카탈로그에 저장하거나 런타임에 렌더링하십시오.
 그리고 maskView 또는 maskLayer를 사용하는 대신 이미지 뷰로 이미지로 제공하십시오.
 마지막으로, 아이콘 인 라이브 사진 아이콘의 경우 UIImageView는 추가 할당없이 단색 아트웍을 채색 할 수 있습니다.
 가장 먼저 할 일은 확인란을 선택하지 않고, 이미지 자산 편집기에서 속성을 설정하고, 렌더링 모드 속성은 항상 템플릿으로 설정하는 것입니다.

또는 UIImageView의 withRenderingMode 함수를 사용하여 렌더링 모드가 항상 템플릿 인 UIImage를 만들 수 있습니다.
 그런 다음 해당 이미지를 이미지보기에 지정하고 해당 이미지보기의 tintColor를 이미지를 렌더링 할 색으로 설정하십시오.
 UIImage는 이미지를 프레임 버퍼에 렌더링 할 때 해당 복사 작업 중에 단색을 적용합니다.
 단색으로 이미지의 사본을 별도로 붙들어 두지 말고
 UIKit에 내장 된 또 다른 최적화 기능을 통해 UILabel은 컬러 텍스트 또는 이모티콘을 표시 할 때보 다 단색 텍스트를 표시 할 때 75 % 적은 메모리를 사용할 수 있습니다.
 이 최적화가 어떻게 작동하는지 자세히 알아보고 UIView의 사용자 정의 하위 클래스에 적용하는 방법에 대한 자세한 내용은 iOS 메모리 딥 다이브 세션을 참조하십시오.
 A8이라는이 백킹 스토어 포맷에 대해 자세히 설명합니다.
 때로는 메모리의 이미지 버퍼에 저장된 아트웍을 화면 밖으로 렌더링하려고합니다.
 그리고 UIKit이 제공하는 클래스는 UIGraphicsImageRenderer입니다.
 더 오래된 또 다른 기능이 있습니다. UIGraphicsBeginImageContext.
 하지만 제발 사용하지 마세요.
 Graphics Image Renderer만이 넓은 색의 내용을 정확하게 렌더링 할 수 있기 때문입니다.
 응용 프로그램에서 할 수있는 것은 UIGraphicsImageRenderer를 사용하여 화면 밖에서 렌더링하는 것입니다.
 그런 다음 UIImageView를 사용하여 효율적으로 화면에 표시하십시오.
 마찬가지로 CALayer 백킹 스토어에서 소개 한 최적화에 대해서도 마찬가지입니다.
 우리는 또한 UIGraphicsImageRenderer가 작업 블록에서 수행하는 작업에 따라 이미지 버퍼의 크기를 동적으로 늘릴 수 있도록했습니다.
 iOS 12 이전의 운영 체제에서 코드를 실행하는 경우 UIGraphicsImageRendererFormat의 prefersExtendedRange 속성을 사용하여 UIKit에 넓은 색상의 내용 그리기를 계획할지 여부를 알릴 수 있습니다.
 그러나 여기서 중간 정도의 중간계가 있습니다.
 주로 그래픽 이미지 렌더러에 이미지를 렌더링하는 경우 해당 이미지는 SRGB 범위를 벗어난 값을 필요로하는 색상 공간을 사용할 수 있습니다.
 그러나 실제로는 정보를 저장하기 위해 더 큰 요소 크기가 필요하지 않습니다.
 따라서 UIImage는 이미지 렌더러 형식 속성을 사용하여 UIGraphicsImageRendererFormat 객체를 가져 와서 해당 이미지를 다시 렌더링하는 최적의 저장 공간을 만들 수 있습니다.
 마지막으로 iOS에서 제공하는 고급 CPU 및 GPU 기술을 응용 프로그램에 통합하는 방법에 대해 조금 이야기하겠습니다.
 따라서 이미지에 대한 고급 처리 작업이 많은 경우 (아마도 실시간으로 Core Image 사용을 고려하십시오).
 코어 이미지는 이미지 처리를위한 레시피를 생성하고 CPU 또는 GPU에서 처리 할 수있는 프레임 워크입니다.
 CIImage에서 UIImage를 만들고이를 UIImageView에 건네 주면 UIImageView가 GPU에서 해당 제조법을 실행하도록주의를 기울입니다.
 이것은 효율적이며 응용 프로그램에서 다른 작업을 수행 할 때 CPU를 무료로 유지합니다.
 그것을 사용하려면 정상적으로 CIImage를 생성 한 다음 UIImage ciImage initializer를 사용하십시오.
 Metal, Vison 및 Accelerate를 포함하여 iOS에서 사용할 수있는 그래픽 콘텐츠를 처리하고 렌더링하기위한 다른 고급 프레임 워크가 있습니다.
 그리고 이러한 프레임 워크에서 공통적으로 사용되는 데이터 유형 중 하나는 CVPixelBuffer입니다.
 이것은 CPU 또는 GPU에서 사용 중이거나 사용 중이 아닌 버퍼를 나타내는 데이터 유형입니다.
 이러한 픽셀 버퍼 중 하나를 구성 할 때 최상의 초기화 프로그램을 사용해야합니다.
 당신이 가지고있는 표현에 가장 가까운 것.
 디코딩 작업을 풀지 마십시오.
 그것은 이미 기존 UIImage 또는 CGImage 표현에 의해 수행되었습니다.
 그리고 CPU와 GPU간에 데이터를 이동할 때 조심해야합니다. 따라서 두 작업 사이에서 작업을 중단하지 않아도됩니다.
 사실, 병렬로 실행할 수 있습니다.
 마지막으로 Accelerator 프레임 워크에서 처리하기 위해 버퍼의 형식을 올바르게 지정하는 방법에 대한 정보는 Accelerate 및 simd 세션을 확인하십시오.
 그래서, 몇 가지 요점을 요약하십시오.
 테이블 뷰 및 콜렉션 뷰에서 프리 페치를 구현하여 사전에 작업을 수행하고 히치 싱을 피할 수 있습니다.
 뷰와 관련된 백업 저장소의 크기를 줄이려면 UIKit이 제공하는 최적화를 수행하지 않아야합니다.
 응용 프로그램과 아트웍을 묶는 경우 자산 카탈로그에 저장합니다.
 앱과 연결된 파일에는 저장하지 마십시오.
 마지막으로 동일한 크기의 아이콘을 다른 크기로 렌더링하는 경우 [벡터 데이터 보존] 확인란을 선택하지 않아도됩니다.
 자세한 내용은 실제 성능 문제를 조사하는 방법을 포함하여 몇 가지 관련 세션이 있습니다.
 그리고 내일과 금요일에도 실험실이 있습니다.
 궁금한 점이 있으시면 실험실에서 저희에게 문의하십시오.
 지켜봐 줘서 고마워.
